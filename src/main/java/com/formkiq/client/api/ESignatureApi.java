/*
 * FormKiQ API JWT Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You
 * can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction
 * FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API
 * provides all the API endpoints to build your Perfect Document Management Platform. FormKiQ API
 * was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the
 * API spec file with any application that supports the OpenAPI specification. Open API OAuth
 * Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.17.1 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.api;

import com.formkiq.client.invoker.ApiCallback;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.invoker.ApiResponse;
import com.formkiq.client.invoker.Configuration;
import com.formkiq.client.invoker.Pair;
import com.formkiq.client.invoker.ProgressRequestBody;
import com.formkiq.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.formkiq.client.model.AddDocusignEnvelopesRequest;
import com.formkiq.client.model.AddDocusignEnvelopesResponse;
import com.formkiq.client.model.AddDocusignRecipientViewRequest;
import com.formkiq.client.model.AddDocusignRecipientViewResponse;
import com.formkiq.client.model.AddResponse;
import com.formkiq.client.model.ValidationErrorsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ESignatureApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public ESignatureApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ESignatureApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for addDocusignEnvelopes
   * 
   * @param documentId Document Identifier (required)
   * @param addDocusignEnvelopesRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocusignEnvelopesCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocusignEnvelopesRequest addDocusignEnvelopesRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addDocusignEnvelopesRequest;

    // create path and map variables
    String localVarPath = "/esignature/docusign/{documentId}/envelopes"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addDocusignEnvelopesValidateBeforeCall(
      @javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocusignEnvelopesRequest addDocusignEnvelopesRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling addDocusignEnvelopes(Async)");
    }

    // verify the required parameter 'addDocusignEnvelopesRequest' is set
    if (addDocusignEnvelopesRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addDocusignEnvelopesRequest' when calling addDocusignEnvelopes(Async)");
    }

    return addDocusignEnvelopesCall(documentId, addDocusignEnvelopesRequest, siteId, _callback);

  }

  /**
   * Create Docusign Envelope request DocuSign create Docusign Envelope request; available as an
   * Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param addDocusignEnvelopesRequest (required)
   * @param siteId Site Identifier (optional)
   * @return AddDocusignEnvelopesResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public AddDocusignEnvelopesResponse addDocusignEnvelopes(
      @javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocusignEnvelopesRequest addDocusignEnvelopesRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    ApiResponse<AddDocusignEnvelopesResponse> localVarResp =
        addDocusignEnvelopesWithHttpInfo(documentId, addDocusignEnvelopesRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Create Docusign Envelope request DocuSign create Docusign Envelope request; available as an
   * Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param addDocusignEnvelopesRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;AddDocusignEnvelopesResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddDocusignEnvelopesResponse> addDocusignEnvelopesWithHttpInfo(
      @javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocusignEnvelopesRequest addDocusignEnvelopesRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall = addDocusignEnvelopesValidateBeforeCall(documentId,
        addDocusignEnvelopesRequest, siteId, null);
    Type localVarReturnType = new TypeToken<AddDocusignEnvelopesResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Create Docusign Envelope request (asynchronously) DocuSign create Docusign Envelope request;
   * available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param addDocusignEnvelopesRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocusignEnvelopesAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocusignEnvelopesRequest addDocusignEnvelopesRequest,
      @javax.annotation.Nullable String siteId,
      final ApiCallback<AddDocusignEnvelopesResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = addDocusignEnvelopesValidateBeforeCall(documentId,
        addDocusignEnvelopesRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<AddDocusignEnvelopesResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for addDocusignRecipientView
   * 
   * @param documentId Document Identifier (required)
   * @param envelopeId Docusign Envelope Id (required)
   * @param addDocusignRecipientViewRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocusignRecipientViewCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String envelopeId,
      @javax.annotation.Nonnull AddDocusignRecipientViewRequest addDocusignRecipientViewRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addDocusignRecipientViewRequest;

    // create path and map variables
    String localVarPath = "/esignature/docusign/{documentId}/envelopes/{envelopeId}/views/recipient"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
        .replace("{" + "envelopeId" + "}", localVarApiClient.escapeString(envelopeId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addDocusignRecipientViewValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String envelopeId,
      @javax.annotation.Nonnull AddDocusignRecipientViewRequest addDocusignRecipientViewRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling addDocusignRecipientView(Async)");
    }

    // verify the required parameter 'envelopeId' is set
    if (envelopeId == null) {
      throw new ApiException(
          "Missing the required parameter 'envelopeId' when calling addDocusignRecipientView(Async)");
    }

    // verify the required parameter 'addDocusignRecipientViewRequest' is set
    if (addDocusignRecipientViewRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addDocusignRecipientViewRequest' when calling addDocusignRecipientView(Async)");
    }

    return addDocusignRecipientViewCall(documentId, envelopeId, addDocusignRecipientViewRequest,
        siteId, _callback);

  }

  /**
   * Create Docusign Recipient View request DocuSign create Docusign Recipient View request;
   * available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param envelopeId Docusign Envelope Id (required)
   * @param addDocusignRecipientViewRequest (required)
   * @param siteId Site Identifier (optional)
   * @return AddDocusignRecipientViewResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public AddDocusignRecipientViewResponse addDocusignRecipientView(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String envelopeId,
      @javax.annotation.Nonnull AddDocusignRecipientViewRequest addDocusignRecipientViewRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    ApiResponse<AddDocusignRecipientViewResponse> localVarResp =
        addDocusignRecipientViewWithHttpInfo(documentId, envelopeId,
            addDocusignRecipientViewRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Create Docusign Recipient View request DocuSign create Docusign Recipient View request;
   * available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param envelopeId Docusign Envelope Id (required)
   * @param addDocusignRecipientViewRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;AddDocusignRecipientViewResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddDocusignRecipientViewResponse> addDocusignRecipientViewWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String envelopeId,
      @javax.annotation.Nonnull AddDocusignRecipientViewRequest addDocusignRecipientViewRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall = addDocusignRecipientViewValidateBeforeCall(documentId, envelopeId,
        addDocusignRecipientViewRequest, siteId, null);
    Type localVarReturnType = new TypeToken<AddDocusignRecipientViewResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Create Docusign Recipient View request (asynchronously) DocuSign create Docusign Recipient View
   * request; available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param envelopeId Docusign Envelope Id (required)
   * @param addDocusignRecipientViewRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocusignRecipientViewAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String envelopeId,
      @javax.annotation.Nonnull AddDocusignRecipientViewRequest addDocusignRecipientViewRequest,
      @javax.annotation.Nullable String siteId,
      final ApiCallback<AddDocusignRecipientViewResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = addDocusignRecipientViewValidateBeforeCall(documentId, envelopeId,
        addDocusignRecipientViewRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<AddDocusignRecipientViewResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for addEsignatureDocusignEvents
   * 
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addEsignatureDocusignEventsCall(final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/esignature/docusign/events";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addEsignatureDocusignEventsValidateBeforeCall(final ApiCallback _callback)
      throws ApiException {
    return addEsignatureDocusignEventsCall(_callback);

  }

  /**
   * Add E-signature event DocuSign callback URL handler; available as an Add-On Module
   * 
   * @return AddResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public AddResponse addEsignatureDocusignEvents() throws ApiException {
    ApiResponse<AddResponse> localVarResp = addEsignatureDocusignEventsWithHttpInfo();
    return localVarResp.getData();
  }

  /**
   * Add E-signature event DocuSign callback URL handler; available as an Add-On Module
   * 
   * @return ApiResponse&lt;AddResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddResponse> addEsignatureDocusignEventsWithHttpInfo() throws ApiException {
    okhttp3.Call localVarCall = addEsignatureDocusignEventsValidateBeforeCall(null);
    Type localVarReturnType = new TypeToken<AddResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add E-signature event (asynchronously) DocuSign callback URL handler; available as an Add-On
   * Module
   * 
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addEsignatureDocusignEventsAsync(final ApiCallback<AddResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = addEsignatureDocusignEventsValidateBeforeCall(_callback);
    Type localVarReturnType = new TypeToken<AddResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}

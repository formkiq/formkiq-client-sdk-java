/*
 * FormKiQ API JWT Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You
 * can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction
 * FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API
 * provides all the API endpoints to build your Perfect Document Management Platform. FormKiQ API
 * was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the
 * API spec file with any application that supports the OpenAPI specification. Open API OAuth
 * Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.17.1 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.api;

import com.formkiq.client.invoker.ApiCallback;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.invoker.ApiResponse;
import com.formkiq.client.invoker.Configuration;
import com.formkiq.client.invoker.Pair;
import com.formkiq.client.invoker.ProgressRequestBody;
import com.formkiq.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.formkiq.client.model.AddDocumentTagsRequest;
import com.formkiq.client.model.DeleteResponse;
import com.formkiq.client.model.GetDocumentTagResponse;
import com.formkiq.client.model.GetDocumentTagsResponse;
import com.formkiq.client.model.SetDocumentTagKeyRequest;
import com.formkiq.client.model.UpdateMatchingDocumentTagsRequest;
import com.formkiq.client.model.UpdateMatchingDocumentTagsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentTagsApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public DocumentTagsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DocumentTagsApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for addDocumentTags
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentTagsCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addDocumentTagsRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/tags".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addDocumentTagsValidateBeforeCall(
      @javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling addDocumentTags(Async)");
    }

    // verify the required parameter 'addDocumentTagsRequest' is set
    if (addDocumentTagsRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addDocumentTagsRequest' when calling addDocumentTags(Async)");
    }

    return addDocumentTagsCall(documentId, addDocumentTagsRequest, siteId, _callback);

  }

  /**
   * Add tag to document Add multiple tags to a document; this endpoint also accepts a different
   * body parameter for adding a single tag
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public void addDocumentTags(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    addDocumentTagsWithHttpInfo(documentId, addDocumentTagsRequest, siteId);
  }

  /**
   * Add tag to document Add multiple tags to a document; this endpoint also accepts a different
   * body parameter for adding a single tag
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<Void> addDocumentTagsWithHttpInfo(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        addDocumentTagsValidateBeforeCall(documentId, addDocumentTagsRequest, siteId, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Add tag to document (asynchronously) Add multiple tags to a document; this endpoint also
   * accepts a different body parameter for adding a single tag
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentTagsAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        addDocumentTagsValidateBeforeCall(documentId, addDocumentTagsRequest, siteId, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteDocumentTag
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentTagCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nullable String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/tags/{tagKey}"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
        .replace("{" + "tagKey" + "}", localVarApiClient.escapeString(tagKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteDocumentTagValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteDocumentTag(Async)");
    }

    // verify the required parameter 'tagKey' is set
    if (tagKey == null) {
      throw new ApiException(
          "Missing the required parameter 'tagKey' when calling deleteDocumentTag(Async)");
    }

    return deleteDocumentTagCall(documentId, tagKey, siteId, _callback);

  }

  /**
   * Delete document tag Delete a document tag by using its key
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteResponse deleteDocumentTag(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nullable String siteId)
      throws ApiException {
    ApiResponse<DeleteResponse> localVarResp =
        deleteDocumentTagWithHttpInfo(documentId, tagKey, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete document tag Delete a document tag by using its key
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteResponse> deleteDocumentTagWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        deleteDocumentTagValidateBeforeCall(documentId, tagKey, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete document tag (asynchronously) Delete a document tag by using its key
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentTagAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nullable String siteId,
      final ApiCallback<DeleteResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        deleteDocumentTagValidateBeforeCall(documentId, tagKey, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteDocumentTagAndValue
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param tagValue Tag Key Value (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentTagAndValueCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nonnull String tagValue,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String shareKey,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/tags/{tagKey}/{tagValue}"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
        .replace("{" + "tagKey" + "}", localVarApiClient.escapeString(tagKey.toString()))
        .replace("{" + "tagValue" + "}", localVarApiClient.escapeString(tagValue.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteDocumentTagAndValueValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nonnull String tagValue, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteDocumentTagAndValue(Async)");
    }

    // verify the required parameter 'tagKey' is set
    if (tagKey == null) {
      throw new ApiException(
          "Missing the required parameter 'tagKey' when calling deleteDocumentTagAndValue(Async)");
    }

    // verify the required parameter 'tagValue' is set
    if (tagValue == null) {
      throw new ApiException(
          "Missing the required parameter 'tagValue' when calling deleteDocumentTagAndValue(Async)");
    }

    return deleteDocumentTagAndValueCall(documentId, tagKey, tagValue, siteId, shareKey, _callback);

  }

  /**
   * Delete document&#39;s tag value Delete a specific document tag&#39;s key/value combination; the
   * request will be ignored if there is no valid key/value combination found
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param tagValue Tag Key Value (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return DeleteResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteResponse deleteDocumentTagAndValue(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nonnull String tagValue,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String shareKey)
      throws ApiException {
    ApiResponse<DeleteResponse> localVarResp =
        deleteDocumentTagAndValueWithHttpInfo(documentId, tagKey, tagValue, siteId, shareKey);
    return localVarResp.getData();
  }

  /**
   * Delete document&#39;s tag value Delete a specific document tag&#39;s key/value combination; the
   * request will be ignored if there is no valid key/value combination found
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param tagValue Tag Key Value (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;DeleteResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteResponse> deleteDocumentTagAndValueWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nonnull String tagValue, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey) throws ApiException {
    okhttp3.Call localVarCall = deleteDocumentTagAndValueValidateBeforeCall(documentId, tagKey,
        tagValue, siteId, shareKey, null);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete document&#39;s tag value (asynchronously) Delete a specific document tag&#39;s key/value
   * combination; the request will be ignored if there is no valid key/value combination found
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param tagValue Tag Key Value (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentTagAndValueAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nonnull String tagValue,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String shareKey,
      final ApiCallback<DeleteResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = deleteDocumentTagAndValueValidateBeforeCall(documentId, tagKey,
        tagValue, siteId, shareKey, _callback);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentTag
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentTagCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/tags/{tagKey}"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
        .replace("{" + "tagKey" + "}", localVarApiClient.escapeString(tagKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentTagValidateBeforeCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocumentTag(Async)");
    }

    // verify the required parameter 'tagKey' is set
    if (tagKey == null) {
      throw new ApiException(
          "Missing the required parameter 'tagKey' when calling getDocumentTag(Async)");
    }

    return getDocumentTagCall(documentId, tagKey, siteId, shareKey, _callback);

  }

  /**
   * Get document tag by key Get a document tag by using its key
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return GetDocumentTagResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentTagResponse getDocumentTag(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey) throws ApiException {
    ApiResponse<GetDocumentTagResponse> localVarResp =
        getDocumentTagWithHttpInfo(documentId, tagKey, siteId, shareKey);
    return localVarResp.getData();
  }

  /**
   * Get document tag by key Get a document tag by using its key
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;GetDocumentTagResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentTagResponse> getDocumentTagWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String shareKey)
      throws ApiException {
    okhttp3.Call localVarCall =
        getDocumentTagValidateBeforeCall(documentId, tagKey, siteId, shareKey, null);
    Type localVarReturnType = new TypeToken<GetDocumentTagResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get document tag by key (asynchronously) Get a document tag by using its key
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentTagAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey,
      final ApiCallback<GetDocumentTagResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getDocumentTagValidateBeforeCall(documentId, tagKey, siteId, shareKey, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentTagResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentTags
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param shareKey Share Identifier (optional)
   * @param next Next page of results token (optional)
   * @param previous Previous page of results token (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentTagsCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit,
      @javax.annotation.Nullable String shareKey, @javax.annotation.Nullable String next,
      @javax.annotation.Nullable String previous, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/tags".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    if (previous != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("previous", previous));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentTagsValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String limit, @javax.annotation.Nullable String shareKey,
      @javax.annotation.Nullable String next, @javax.annotation.Nullable String previous,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocumentTags(Async)");
    }

    return getDocumentTagsCall(documentId, siteId, limit, shareKey, next, previous, _callback);

  }

  /**
   * Get document&#39;s tags Get a listing of a document&#39;s tags
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param shareKey Share Identifier (optional)
   * @param next Next page of results token (optional)
   * @param previous Previous page of results token (optional)
   * @return GetDocumentTagsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentTagsResponse getDocumentTags(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit,
      @javax.annotation.Nullable String shareKey, @javax.annotation.Nullable String next,
      @javax.annotation.Nullable String previous) throws ApiException {
    ApiResponse<GetDocumentTagsResponse> localVarResp =
        getDocumentTagsWithHttpInfo(documentId, siteId, limit, shareKey, next, previous);
    return localVarResp.getData();
  }

  /**
   * Get document&#39;s tags Get a listing of a document&#39;s tags
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param shareKey Share Identifier (optional)
   * @param next Next page of results token (optional)
   * @param previous Previous page of results token (optional)
   * @return ApiResponse&lt;GetDocumentTagsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentTagsResponse> getDocumentTagsWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String limit, @javax.annotation.Nullable String shareKey,
      @javax.annotation.Nullable String next, @javax.annotation.Nullable String previous)
      throws ApiException {
    okhttp3.Call localVarCall = getDocumentTagsValidateBeforeCall(documentId, siteId, limit,
        shareKey, next, previous, null);
    Type localVarReturnType = new TypeToken<GetDocumentTagsResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get document&#39;s tags (asynchronously) Get a listing of a document&#39;s tags
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param shareKey Share Identifier (optional)
   * @param next Next page of results token (optional)
   * @param previous Previous page of results token (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentTagsAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit,
      @javax.annotation.Nullable String shareKey, @javax.annotation.Nullable String next,
      @javax.annotation.Nullable String previous,
      final ApiCallback<GetDocumentTagsResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getDocumentTagsValidateBeforeCall(documentId, siteId, limit,
        shareKey, next, previous, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentTagsResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for setDocumentTag
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param setDocumentTagKeyRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentTagCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nonnull SetDocumentTagKeyRequest setDocumentTagKeyRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = setDocumentTagKeyRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/tags/{tagKey}"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
        .replace("{" + "tagKey" + "}", localVarApiClient.escapeString(tagKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call setDocumentTagValidateBeforeCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nonnull SetDocumentTagKeyRequest setDocumentTagKeyRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling setDocumentTag(Async)");
    }

    // verify the required parameter 'tagKey' is set
    if (tagKey == null) {
      throw new ApiException(
          "Missing the required parameter 'tagKey' when calling setDocumentTag(Async)");
    }

    // verify the required parameter 'setDocumentTagKeyRequest' is set
    if (setDocumentTagKeyRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'setDocumentTagKeyRequest' when calling setDocumentTag(Async)");
    }

    return setDocumentTagCall(documentId, tagKey, setDocumentTagKeyRequest, siteId, _callback);

  }

  /**
   * Update document tag value(s) Update any and all values of a document tag, by using its key; you
   * can supply one tag value or a list of tag values in the request body
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param setDocumentTagKeyRequest (required)
   * @param siteId Site Identifier (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public void setDocumentTag(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nonnull SetDocumentTagKeyRequest setDocumentTagKeyRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    setDocumentTagWithHttpInfo(documentId, tagKey, setDocumentTagKeyRequest, siteId);
  }

  /**
   * Update document tag value(s) Update any and all values of a document tag, by using its key; you
   * can supply one tag value or a list of tag values in the request body
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param setDocumentTagKeyRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<Void> setDocumentTagWithHttpInfo(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nonnull SetDocumentTagKeyRequest setDocumentTagKeyRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall = setDocumentTagValidateBeforeCall(documentId, tagKey,
        setDocumentTagKeyRequest, siteId, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Update document tag value(s) (asynchronously) Update any and all values of a document tag, by
   * using its key; you can supply one tag value or a list of tag values in the request body
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param setDocumentTagKeyRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentTagAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nonnull SetDocumentTagKeyRequest setDocumentTagKeyRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = setDocumentTagValidateBeforeCall(documentId, tagKey,
        setDocumentTagKeyRequest, siteId, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }

  /**
   * Build call for setDocumentTags
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentTagsCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addDocumentTagsRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/tags".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call setDocumentTagsValidateBeforeCall(
      @javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling setDocumentTags(Async)");
    }

    // verify the required parameter 'addDocumentTagsRequest' is set
    if (addDocumentTagsRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addDocumentTagsRequest' when calling setDocumentTags(Async)");
    }

    return setDocumentTagsCall(documentId, addDocumentTagsRequest, siteId, _callback);

  }

  /**
   * Set document&#39;s tags Set multiple tags to a document; this endpoint also accepts a different
   * body parameter for setting a single tag
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public void setDocumentTags(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    setDocumentTagsWithHttpInfo(documentId, addDocumentTagsRequest, siteId);
  }

  /**
   * Set document&#39;s tags Set multiple tags to a document; this endpoint also accepts a different
   * body parameter for setting a single tag
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<Void> setDocumentTagsWithHttpInfo(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        setDocumentTagsValidateBeforeCall(documentId, addDocumentTagsRequest, siteId, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Set document&#39;s tags (asynchronously) Set multiple tags to a document; this endpoint also
   * accepts a different body parameter for setting a single tag
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentTagsAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        setDocumentTagsValidateBeforeCall(documentId, addDocumentTagsRequest, siteId, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }

  /**
   * Build call for updateDocumentTags
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateDocumentTagsCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addDocumentTagsRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/tags".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateDocumentTagsValidateBeforeCall(
      @javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling updateDocumentTags(Async)");
    }

    // verify the required parameter 'addDocumentTagsRequest' is set
    if (addDocumentTagsRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addDocumentTagsRequest' when calling updateDocumentTags(Async)");
    }

    return updateDocumentTagsCall(documentId, addDocumentTagsRequest, siteId, _callback);

  }

  /**
   * Update document tags Updates multiple tags to a document; this endpoint also accepts a
   * different body parameter for updating a single tag
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public void updateDocumentTags(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    updateDocumentTagsWithHttpInfo(documentId, addDocumentTagsRequest, siteId);
  }

  /**
   * Update document tags Updates multiple tags to a document; this endpoint also accepts a
   * different body parameter for updating a single tag
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<Void> updateDocumentTagsWithHttpInfo(
      @javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        updateDocumentTagsValidateBeforeCall(documentId, addDocumentTagsRequest, siteId, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Update document tags (asynchronously) Updates multiple tags to a document; this endpoint also
   * accepts a different body parameter for updating a single tag
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateDocumentTagsAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentTagsRequest addDocumentTagsRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        updateDocumentTagsValidateBeforeCall(documentId, addDocumentTagsRequest, siteId, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }

  /**
   * Build call for updateMatchingDocumentTags
   * 
   * @param updateMatchingDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateMatchingDocumentTagsCall(
      @javax.annotation.Nonnull UpdateMatchingDocumentTagsRequest updateMatchingDocumentTagsRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = updateMatchingDocumentTagsRequest;

    // create path and map variables
    String localVarPath = "/documents/tags";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateMatchingDocumentTagsValidateBeforeCall(
      @javax.annotation.Nonnull UpdateMatchingDocumentTagsRequest updateMatchingDocumentTagsRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'updateMatchingDocumentTagsRequest' is set
    if (updateMatchingDocumentTagsRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'updateMatchingDocumentTagsRequest' when calling updateMatchingDocumentTags(Async)");
    }

    return updateMatchingDocumentTagsCall(updateMatchingDocumentTagsRequest, siteId, _callback);

  }

  /**
   * Mass Update document tag(s) This API request allows the adding/updating of multiple document
   * tag(s) based on document(s) that have the matching tag.
   * 
   * @param updateMatchingDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @return UpdateMatchingDocumentTagsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public UpdateMatchingDocumentTagsResponse updateMatchingDocumentTags(
      @javax.annotation.Nonnull UpdateMatchingDocumentTagsRequest updateMatchingDocumentTagsRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    ApiResponse<UpdateMatchingDocumentTagsResponse> localVarResp =
        updateMatchingDocumentTagsWithHttpInfo(updateMatchingDocumentTagsRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Mass Update document tag(s) This API request allows the adding/updating of multiple document
   * tag(s) based on document(s) that have the matching tag.
   * 
   * @param updateMatchingDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;UpdateMatchingDocumentTagsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<UpdateMatchingDocumentTagsResponse> updateMatchingDocumentTagsWithHttpInfo(
      @javax.annotation.Nonnull UpdateMatchingDocumentTagsRequest updateMatchingDocumentTagsRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall = updateMatchingDocumentTagsValidateBeforeCall(
        updateMatchingDocumentTagsRequest, siteId, null);
    Type localVarReturnType = new TypeToken<UpdateMatchingDocumentTagsResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Mass Update document tag(s) (asynchronously) This API request allows the adding/updating of
   * multiple document tag(s) based on document(s) that have the matching tag.
   * 
   * @param updateMatchingDocumentTagsRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateMatchingDocumentTagsAsync(
      @javax.annotation.Nonnull UpdateMatchingDocumentTagsRequest updateMatchingDocumentTagsRequest,
      @javax.annotation.Nullable String siteId,
      final ApiCallback<UpdateMatchingDocumentTagsResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = updateMatchingDocumentTagsValidateBeforeCall(
        updateMatchingDocumentTagsRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<UpdateMatchingDocumentTagsResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}

/*
 * FormKiQ API JWT Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You
 * can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction
 * FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API
 * provides all the API endpoints to build your Perfect Document Management Platform. FormKiQ API
 * was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the
 * API spec file with any application that supports the OpenAPI specification. Open API OAuth
 * Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.17.0 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.api;

import com.formkiq.client.invoker.ApiCallback;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.invoker.ApiResponse;
import com.formkiq.client.invoker.Configuration;
import com.formkiq.client.invoker.Pair;
import com.formkiq.client.invoker.ProgressRequestBody;
import com.formkiq.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.formkiq.client.model.AddCaseRequest;
import com.formkiq.client.model.AddCaseResponse;
import com.formkiq.client.model.AddNigoRequest;
import com.formkiq.client.model.AddNigoResponse;
import com.formkiq.client.model.AddTaskRequest;
import com.formkiq.client.model.AddTaskResponse;
import com.formkiq.client.model.DeleteCaseDocumentResponse;
import com.formkiq.client.model.DeleteCaseNigoDocumentResponse;
import com.formkiq.client.model.DeleteCaseNigoResponse;
import com.formkiq.client.model.DeleteCaseResponse;
import com.formkiq.client.model.DeleteCaseTaskDocumentResponse;
import com.formkiq.client.model.DeleteCaseTaskResponse;
import com.formkiq.client.model.GetCaseDocumentsResponse;
import com.formkiq.client.model.GetCaseNigoResponse;
import com.formkiq.client.model.GetCaseNigosResponse;
import com.formkiq.client.model.GetCaseResponse;
import com.formkiq.client.model.GetCaseTaskResponse;
import com.formkiq.client.model.GetCaseTasksResponse;
import com.formkiq.client.model.GetCasesResponse;
import com.formkiq.client.model.UpdateCaseRequest;
import com.formkiq.client.model.UpdateCaseResponse;
import com.formkiq.client.model.UpdateNigoRequest;
import com.formkiq.client.model.UpdateNigoResponse;
import com.formkiq.client.model.UpdateTaskRequest;
import com.formkiq.client.model.UpdateTaskResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CaseManagementApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public CaseManagementApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CaseManagementApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for addCase
   * 
   * @param addCaseRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addCaseCall(AddCaseRequest addCaseRequest, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addCaseRequest;

    // create path and map variables
    String localVarPath = "/cases";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addCaseValidateBeforeCall(AddCaseRequest addCaseRequest, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'addCaseRequest' is set
    if (addCaseRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addCaseRequest' when calling addCase(Async)");
    }

    return addCaseCall(addCaseRequest, siteId, _callback);

  }

  /**
   * Add New Case Adds new case; available as an Add-On Module
   * 
   * @param addCaseRequest (required)
   * @param siteId Site Identifier (optional)
   * @return AddCaseResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public AddCaseResponse addCase(AddCaseRequest addCaseRequest, String siteId) throws ApiException {
    ApiResponse<AddCaseResponse> localVarResp = addCaseWithHttpInfo(addCaseRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Add New Case Adds new case; available as an Add-On Module
   * 
   * @param addCaseRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;AddCaseResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddCaseResponse> addCaseWithHttpInfo(AddCaseRequest addCaseRequest,
      String siteId) throws ApiException {
    okhttp3.Call localVarCall = addCaseValidateBeforeCall(addCaseRequest, siteId, null);
    Type localVarReturnType = new TypeToken<AddCaseResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add New Case (asynchronously) Adds new case; available as an Add-On Module
   * 
   * @param addCaseRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addCaseAsync(AddCaseRequest addCaseRequest, String siteId,
      final ApiCallback<AddCaseResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = addCaseValidateBeforeCall(addCaseRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<AddCaseResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for addNigo
   * 
   * @param caseId Case Identifier (required)
   * @param addNigoRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addNigoCall(String caseId, AddNigoRequest addNigoRequest, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addNigoRequest;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/nigos".replace("{" + "caseId" + "}",
        localVarApiClient.escapeString(caseId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addNigoValidateBeforeCall(String caseId, AddNigoRequest addNigoRequest,
      String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException("Missing the required parameter 'caseId' when calling addNigo(Async)");
    }

    // verify the required parameter 'addNigoRequest' is set
    if (addNigoRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addNigoRequest' when calling addNigo(Async)");
    }

    return addNigoCall(caseId, addNigoRequest, siteId, _callback);

  }

  /**
   * Add New Nigo Adds new nigo; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param addNigoRequest (required)
   * @param siteId Site Identifier (optional)
   * @return AddNigoResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public AddNigoResponse addNigo(String caseId, AddNigoRequest addNigoRequest, String siteId)
      throws ApiException {
    ApiResponse<AddNigoResponse> localVarResp = addNigoWithHttpInfo(caseId, addNigoRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Add New Nigo Adds new nigo; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param addNigoRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;AddNigoResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddNigoResponse> addNigoWithHttpInfo(String caseId,
      AddNigoRequest addNigoRequest, String siteId) throws ApiException {
    okhttp3.Call localVarCall = addNigoValidateBeforeCall(caseId, addNigoRequest, siteId, null);
    Type localVarReturnType = new TypeToken<AddNigoResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add New Nigo (asynchronously) Adds new nigo; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param addNigoRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addNigoAsync(String caseId, AddNigoRequest addNigoRequest, String siteId,
      final ApiCallback<AddNigoResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        addNigoValidateBeforeCall(caseId, addNigoRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<AddNigoResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for addTask
   * 
   * @param caseId Case Identifier (required)
   * @param addTaskRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addTaskCall(String caseId, AddTaskRequest addTaskRequest, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addTaskRequest;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/tasks".replace("{" + "caseId" + "}",
        localVarApiClient.escapeString(caseId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addTaskValidateBeforeCall(String caseId, AddTaskRequest addTaskRequest,
      String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException("Missing the required parameter 'caseId' when calling addTask(Async)");
    }

    // verify the required parameter 'addTaskRequest' is set
    if (addTaskRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addTaskRequest' when calling addTask(Async)");
    }

    return addTaskCall(caseId, addTaskRequest, siteId, _callback);

  }

  /**
   * Add New Task Adds new task; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param addTaskRequest (required)
   * @param siteId Site Identifier (optional)
   * @return AddTaskResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public AddTaskResponse addTask(String caseId, AddTaskRequest addTaskRequest, String siteId)
      throws ApiException {
    ApiResponse<AddTaskResponse> localVarResp = addTaskWithHttpInfo(caseId, addTaskRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Add New Task Adds new task; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param addTaskRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;AddTaskResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddTaskResponse> addTaskWithHttpInfo(String caseId,
      AddTaskRequest addTaskRequest, String siteId) throws ApiException {
    okhttp3.Call localVarCall = addTaskValidateBeforeCall(caseId, addTaskRequest, siteId, null);
    Type localVarReturnType = new TypeToken<AddTaskResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add New Task (asynchronously) Adds new task; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param addTaskRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addTaskAsync(String caseId, AddTaskRequest addTaskRequest, String siteId,
      final ApiCallback<AddTaskResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        addTaskValidateBeforeCall(caseId, addTaskRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<AddTaskResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteCase
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteCaseCall(String caseId, String siteId, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}".replace("{" + "caseId" + "}",
        localVarApiClient.escapeString(caseId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteCaseValidateBeforeCall(String caseId, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling deleteCase(Async)");
    }

    return deleteCaseCall(caseId, siteId, _callback);

  }

  /**
   * Delete Case Delete Case
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteCaseResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteCaseResponse deleteCase(String caseId, String siteId) throws ApiException {
    ApiResponse<DeleteCaseResponse> localVarResp = deleteCaseWithHttpInfo(caseId, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete Case Delete Case
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteCaseResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteCaseResponse> deleteCaseWithHttpInfo(String caseId, String siteId)
      throws ApiException {
    okhttp3.Call localVarCall = deleteCaseValidateBeforeCall(caseId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteCaseResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete Case (asynchronously) Delete Case
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteCaseAsync(String caseId, String siteId,
      final ApiCallback<DeleteCaseResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = deleteCaseValidateBeforeCall(caseId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteCaseResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteCaseDocument
   * 
   * @param caseId Case Identifier (required)
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteCaseDocumentCall(String caseId, String documentId, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/documents/{documentId}"
        .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteCaseDocumentValidateBeforeCall(String caseId, String documentId,
      String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling deleteCaseDocument(Async)");
    }

    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteCaseDocument(Async)");
    }

    return deleteCaseDocumentCall(caseId, documentId, siteId, _callback);

  }

  /**
   * Delete Document from Case Delete Document from Case
   * 
   * @param caseId Case Identifier (required)
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteCaseDocumentResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteCaseDocumentResponse deleteCaseDocument(String caseId, String documentId,
      String siteId) throws ApiException {
    ApiResponse<DeleteCaseDocumentResponse> localVarResp =
        deleteCaseDocumentWithHttpInfo(caseId, documentId, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete Document from Case Delete Document from Case
   * 
   * @param caseId Case Identifier (required)
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteCaseDocumentResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteCaseDocumentResponse> deleteCaseDocumentWithHttpInfo(String caseId,
      String documentId, String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        deleteCaseDocumentValidateBeforeCall(caseId, documentId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteCaseDocumentResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete Document from Case (asynchronously) Delete Document from Case
   * 
   * @param caseId Case Identifier (required)
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteCaseDocumentAsync(String caseId, String documentId, String siteId,
      final ApiCallback<DeleteCaseDocumentResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        deleteCaseDocumentValidateBeforeCall(caseId, documentId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteCaseDocumentResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteNigo
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteNigoCall(String caseId, String nigoId, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/nigos/{nigoId}"
        .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
        .replace("{" + "nigoId" + "}", localVarApiClient.escapeString(nigoId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteNigoValidateBeforeCall(String caseId, String nigoId, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling deleteNigo(Async)");
    }

    // verify the required parameter 'nigoId' is set
    if (nigoId == null) {
      throw new ApiException(
          "Missing the required parameter 'nigoId' when calling deleteNigo(Async)");
    }

    return deleteNigoCall(caseId, nigoId, siteId, _callback);

  }

  /**
   * Delete Nigo Delete Nigo
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteCaseNigoResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteCaseNigoResponse deleteNigo(String caseId, String nigoId, String siteId)
      throws ApiException {
    ApiResponse<DeleteCaseNigoResponse> localVarResp =
        deleteNigoWithHttpInfo(caseId, nigoId, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete Nigo Delete Nigo
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteCaseNigoResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteCaseNigoResponse> deleteNigoWithHttpInfo(String caseId, String nigoId,
      String siteId) throws ApiException {
    okhttp3.Call localVarCall = deleteNigoValidateBeforeCall(caseId, nigoId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteCaseNigoResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete Nigo (asynchronously) Delete Nigo
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteNigoAsync(String caseId, String nigoId, String siteId,
      final ApiCallback<DeleteCaseNigoResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = deleteNigoValidateBeforeCall(caseId, nigoId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteCaseNigoResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteNigoDocument
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteNigoDocumentCall(String caseId, String nigoId, String documentId,
      String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/nigos/{nigoId}/documents/{documentId}"
        .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
        .replace("{" + "nigoId" + "}", localVarApiClient.escapeString(nigoId.toString()))
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteNigoDocumentValidateBeforeCall(String caseId, String nigoId,
      String documentId, String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling deleteNigoDocument(Async)");
    }

    // verify the required parameter 'nigoId' is set
    if (nigoId == null) {
      throw new ApiException(
          "Missing the required parameter 'nigoId' when calling deleteNigoDocument(Async)");
    }

    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteNigoDocument(Async)");
    }

    return deleteNigoDocumentCall(caseId, nigoId, documentId, siteId, _callback);

  }

  /**
   * Delete Document from Nigo Delete Document from Nigo
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteCaseNigoDocumentResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteCaseNigoDocumentResponse deleteNigoDocument(String caseId, String nigoId,
      String documentId, String siteId) throws ApiException {
    ApiResponse<DeleteCaseNigoDocumentResponse> localVarResp =
        deleteNigoDocumentWithHttpInfo(caseId, nigoId, documentId, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete Document from Nigo Delete Document from Nigo
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteCaseNigoDocumentResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteCaseNigoDocumentResponse> deleteNigoDocumentWithHttpInfo(String caseId,
      String nigoId, String documentId, String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        deleteNigoDocumentValidateBeforeCall(caseId, nigoId, documentId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteCaseNigoDocumentResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete Document from Nigo (asynchronously) Delete Document from Nigo
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteNigoDocumentAsync(String caseId, String nigoId, String documentId,
      String siteId, final ApiCallback<DeleteCaseNigoDocumentResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        deleteNigoDocumentValidateBeforeCall(caseId, nigoId, documentId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteCaseNigoDocumentResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteTask
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteTaskCall(String caseId, String taskId, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/tasks/{taskId}"
        .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
        .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteTaskValidateBeforeCall(String caseId, String taskId, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling deleteTask(Async)");
    }

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          "Missing the required parameter 'taskId' when calling deleteTask(Async)");
    }

    return deleteTaskCall(caseId, taskId, siteId, _callback);

  }

  /**
   * Delete Task Delete Task
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteCaseTaskResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteCaseTaskResponse deleteTask(String caseId, String taskId, String siteId)
      throws ApiException {
    ApiResponse<DeleteCaseTaskResponse> localVarResp =
        deleteTaskWithHttpInfo(caseId, taskId, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete Task Delete Task
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteCaseTaskResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteCaseTaskResponse> deleteTaskWithHttpInfo(String caseId, String taskId,
      String siteId) throws ApiException {
    okhttp3.Call localVarCall = deleteTaskValidateBeforeCall(caseId, taskId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteCaseTaskResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete Task (asynchronously) Delete Task
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteTaskAsync(String caseId, String taskId, String siteId,
      final ApiCallback<DeleteCaseTaskResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = deleteTaskValidateBeforeCall(caseId, taskId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteCaseTaskResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteTaskDocument
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteTaskDocumentCall(String caseId, String taskId, String documentId,
      String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/tasks/{taskId}/documents/{documentId}"
        .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
        .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()))
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteTaskDocumentValidateBeforeCall(String caseId, String taskId,
      String documentId, String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling deleteTaskDocument(Async)");
    }

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          "Missing the required parameter 'taskId' when calling deleteTaskDocument(Async)");
    }

    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteTaskDocument(Async)");
    }

    return deleteTaskDocumentCall(caseId, taskId, documentId, siteId, _callback);

  }

  /**
   * Delete Document from Task Delete Document from Task
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteCaseTaskDocumentResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteCaseTaskDocumentResponse deleteTaskDocument(String caseId, String taskId,
      String documentId, String siteId) throws ApiException {
    ApiResponse<DeleteCaseTaskDocumentResponse> localVarResp =
        deleteTaskDocumentWithHttpInfo(caseId, taskId, documentId, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete Document from Task Delete Document from Task
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteCaseTaskDocumentResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteCaseTaskDocumentResponse> deleteTaskDocumentWithHttpInfo(String caseId,
      String taskId, String documentId, String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        deleteTaskDocumentValidateBeforeCall(caseId, taskId, documentId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteCaseTaskDocumentResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete Document from Task (asynchronously) Delete Document from Task
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteTaskDocumentAsync(String caseId, String taskId, String documentId,
      String siteId, final ApiCallback<DeleteCaseTaskDocumentResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        deleteTaskDocumentValidateBeforeCall(caseId, taskId, documentId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteCaseTaskDocumentResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getCase
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCaseCall(String caseId, String siteId, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}".replace("{" + "caseId" + "}",
        localVarApiClient.escapeString(caseId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getCaseValidateBeforeCall(String caseId, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException("Missing the required parameter 'caseId' when calling getCase(Async)");
    }

    return getCaseCall(caseId, siteId, _callback);

  }

  /**
   * Get Case details Returns a Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return GetCaseResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetCaseResponse getCase(String caseId, String siteId) throws ApiException {
    ApiResponse<GetCaseResponse> localVarResp = getCaseWithHttpInfo(caseId, siteId);
    return localVarResp.getData();
  }

  /**
   * Get Case details Returns a Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;GetCaseResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetCaseResponse> getCaseWithHttpInfo(String caseId, String siteId)
      throws ApiException {
    okhttp3.Call localVarCall = getCaseValidateBeforeCall(caseId, siteId, null);
    Type localVarReturnType = new TypeToken<GetCaseResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Case details (asynchronously) Returns a Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCaseAsync(String caseId, String siteId,
      final ApiCallback<GetCaseResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getCaseValidateBeforeCall(caseId, siteId, _callback);
    Type localVarReturnType = new TypeToken<GetCaseResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getCaseDocuments
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCaseDocumentsCall(String caseId, String siteId, String next, String limit,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/documents".replace("{" + "caseId" + "}",
        localVarApiClient.escapeString(caseId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getCaseDocumentsValidateBeforeCall(String caseId, String siteId, String next,
      String limit, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling getCaseDocuments(Async)");
    }

    return getCaseDocumentsCall(caseId, siteId, next, limit, _callback);

  }

  /**
   * Get list of document in a case Returns documents in a Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return GetCaseDocumentsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetCaseDocumentsResponse getCaseDocuments(String caseId, String siteId, String next,
      String limit) throws ApiException {
    ApiResponse<GetCaseDocumentsResponse> localVarResp =
        getCaseDocumentsWithHttpInfo(caseId, siteId, next, limit);
    return localVarResp.getData();
  }

  /**
   * Get list of document in a case Returns documents in a Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return ApiResponse&lt;GetCaseDocumentsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetCaseDocumentsResponse> getCaseDocumentsWithHttpInfo(String caseId,
      String siteId, String next, String limit) throws ApiException {
    okhttp3.Call localVarCall =
        getCaseDocumentsValidateBeforeCall(caseId, siteId, next, limit, null);
    Type localVarReturnType = new TypeToken<GetCaseDocumentsResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get list of document in a case (asynchronously) Returns documents in a Case; available as an
   * Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCaseDocumentsAsync(String caseId, String siteId, String next, String limit,
      final ApiCallback<GetCaseDocumentsResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getCaseDocumentsValidateBeforeCall(caseId, siteId, next, limit, _callback);
    Type localVarReturnType = new TypeToken<GetCaseDocumentsResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getCaseNigo
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCaseNigoCall(String caseId, String nigoId, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/nigos/{nigoId}"
        .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
        .replace("{" + "nigoId" + "}", localVarApiClient.escapeString(nigoId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getCaseNigoValidateBeforeCall(String caseId, String nigoId, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling getCaseNigo(Async)");
    }

    // verify the required parameter 'nigoId' is set
    if (nigoId == null) {
      throw new ApiException(
          "Missing the required parameter 'nigoId' when calling getCaseNigo(Async)");
    }

    return getCaseNigoCall(caseId, nigoId, siteId, _callback);

  }

  /**
   * Get nigo in a case Returns a Nigo in Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return GetCaseNigoResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetCaseNigoResponse getCaseNigo(String caseId, String nigoId, String siteId)
      throws ApiException {
    ApiResponse<GetCaseNigoResponse> localVarResp = getCaseNigoWithHttpInfo(caseId, nigoId, siteId);
    return localVarResp.getData();
  }

  /**
   * Get nigo in a case Returns a Nigo in Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;GetCaseNigoResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetCaseNigoResponse> getCaseNigoWithHttpInfo(String caseId, String nigoId,
      String siteId) throws ApiException {
    okhttp3.Call localVarCall = getCaseNigoValidateBeforeCall(caseId, nigoId, siteId, null);
    Type localVarReturnType = new TypeToken<GetCaseNigoResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get nigo in a case (asynchronously) Returns a Nigo in Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCaseNigoAsync(String caseId, String nigoId, String siteId,
      final ApiCallback<GetCaseNigoResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getCaseNigoValidateBeforeCall(caseId, nigoId, siteId, _callback);
    Type localVarReturnType = new TypeToken<GetCaseNigoResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getCaseNigos
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCaseNigosCall(String caseId, String siteId, String next, String limit,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/nigos".replace("{" + "caseId" + "}",
        localVarApiClient.escapeString(caseId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getCaseNigosValidateBeforeCall(String caseId, String siteId, String next,
      String limit, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling getCaseNigos(Async)");
    }

    return getCaseNigosCall(caseId, siteId, next, limit, _callback);

  }

  /**
   * Get list of Nigos in a case Returns a Nigos of Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return GetCaseNigosResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetCaseNigosResponse getCaseNigos(String caseId, String siteId, String next, String limit)
      throws ApiException {
    ApiResponse<GetCaseNigosResponse> localVarResp =
        getCaseNigosWithHttpInfo(caseId, siteId, next, limit);
    return localVarResp.getData();
  }

  /**
   * Get list of Nigos in a case Returns a Nigos of Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return ApiResponse&lt;GetCaseNigosResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetCaseNigosResponse> getCaseNigosWithHttpInfo(String caseId, String siteId,
      String next, String limit) throws ApiException {
    okhttp3.Call localVarCall = getCaseNigosValidateBeforeCall(caseId, siteId, next, limit, null);
    Type localVarReturnType = new TypeToken<GetCaseNigosResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get list of Nigos in a case (asynchronously) Returns a Nigos of Case; available as an Add-On
   * Module
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCaseNigosAsync(String caseId, String siteId, String next, String limit,
      final ApiCallback<GetCaseNigosResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getCaseNigosValidateBeforeCall(caseId, siteId, next, limit, _callback);
    Type localVarReturnType = new TypeToken<GetCaseNigosResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getCaseTask
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCaseTaskCall(String caseId, String taskId, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/tasks/{taskId}"
        .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
        .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getCaseTaskValidateBeforeCall(String caseId, String taskId, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling getCaseTask(Async)");
    }

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          "Missing the required parameter 'taskId' when calling getCaseTask(Async)");
    }

    return getCaseTaskCall(caseId, taskId, siteId, _callback);

  }

  /**
   * Get task in a case Returns a Task in Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return GetCaseTaskResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetCaseTaskResponse getCaseTask(String caseId, String taskId, String siteId)
      throws ApiException {
    ApiResponse<GetCaseTaskResponse> localVarResp = getCaseTaskWithHttpInfo(caseId, taskId, siteId);
    return localVarResp.getData();
  }

  /**
   * Get task in a case Returns a Task in Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;GetCaseTaskResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetCaseTaskResponse> getCaseTaskWithHttpInfo(String caseId, String taskId,
      String siteId) throws ApiException {
    okhttp3.Call localVarCall = getCaseTaskValidateBeforeCall(caseId, taskId, siteId, null);
    Type localVarReturnType = new TypeToken<GetCaseTaskResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get task in a case (asynchronously) Returns a Task in Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCaseTaskAsync(String caseId, String taskId, String siteId,
      final ApiCallback<GetCaseTaskResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getCaseTaskValidateBeforeCall(caseId, taskId, siteId, _callback);
    Type localVarReturnType = new TypeToken<GetCaseTaskResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getCaseTasks
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCaseTasksCall(String caseId, String siteId, String next, String limit,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/tasks".replace("{" + "caseId" + "}",
        localVarApiClient.escapeString(caseId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getCaseTasksValidateBeforeCall(String caseId, String siteId, String next,
      String limit, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling getCaseTasks(Async)");
    }

    return getCaseTasksCall(caseId, siteId, next, limit, _callback);

  }

  /**
   * Get list of tasks in a case Returns a Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return GetCaseTasksResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetCaseTasksResponse getCaseTasks(String caseId, String siteId, String next, String limit)
      throws ApiException {
    ApiResponse<GetCaseTasksResponse> localVarResp =
        getCaseTasksWithHttpInfo(caseId, siteId, next, limit);
    return localVarResp.getData();
  }

  /**
   * Get list of tasks in a case Returns a Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return ApiResponse&lt;GetCaseTasksResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetCaseTasksResponse> getCaseTasksWithHttpInfo(String caseId, String siteId,
      String next, String limit) throws ApiException {
    okhttp3.Call localVarCall = getCaseTasksValidateBeforeCall(caseId, siteId, next, limit, null);
    Type localVarReturnType = new TypeToken<GetCaseTasksResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get list of tasks in a case (asynchronously) Returns a Case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCaseTasksAsync(String caseId, String siteId, String next, String limit,
      final ApiCallback<GetCaseTasksResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getCaseTasksValidateBeforeCall(caseId, siteId, next, limit, _callback);
    Type localVarReturnType = new TypeToken<GetCaseTasksResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getCases
   * 
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCasesCall(String siteId, String next, String limit,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getCasesValidateBeforeCall(String siteId, String next, String limit,
      final ApiCallback _callback) throws ApiException {
    return getCasesCall(siteId, next, limit, _callback);

  }

  /**
   * Get Case listing Returns a list of the Cases; available as an Add-On Module
   * 
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return GetCasesResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetCasesResponse getCases(String siteId, String next, String limit) throws ApiException {
    ApiResponse<GetCasesResponse> localVarResp = getCasesWithHttpInfo(siteId, next, limit);
    return localVarResp.getData();
  }

  /**
   * Get Case listing Returns a list of the Cases; available as an Add-On Module
   * 
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return ApiResponse&lt;GetCasesResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetCasesResponse> getCasesWithHttpInfo(String siteId, String next,
      String limit) throws ApiException {
    okhttp3.Call localVarCall = getCasesValidateBeforeCall(siteId, next, limit, null);
    Type localVarReturnType = new TypeToken<GetCasesResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Case listing (asynchronously) Returns a list of the Cases; available as an Add-On Module
   * 
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getCasesAsync(String siteId, String next, String limit,
      final ApiCallback<GetCasesResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getCasesValidateBeforeCall(siteId, next, limit, _callback);
    Type localVarReturnType = new TypeToken<GetCasesResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getNigoDocuments
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getNigoDocumentsCall(String caseId, String nigoId, String siteId, String next,
      String limit, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/nigos/{nigoId}/documents"
        .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
        .replace("{" + "nigoId" + "}", localVarApiClient.escapeString(nigoId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getNigoDocumentsValidateBeforeCall(String caseId, String nigoId,
      String siteId, String next, String limit, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling getNigoDocuments(Async)");
    }

    // verify the required parameter 'nigoId' is set
    if (nigoId == null) {
      throw new ApiException(
          "Missing the required parameter 'nigoId' when calling getNigoDocuments(Async)");
    }

    return getNigoDocumentsCall(caseId, nigoId, siteId, next, limit, _callback);

  }

  /**
   * Get list of document in a task Returns a list documents in a Case; available as an Add-On
   * Module
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return GetCaseDocumentsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetCaseDocumentsResponse getNigoDocuments(String caseId, String nigoId, String siteId,
      String next, String limit) throws ApiException {
    ApiResponse<GetCaseDocumentsResponse> localVarResp =
        getNigoDocumentsWithHttpInfo(caseId, nigoId, siteId, next, limit);
    return localVarResp.getData();
  }

  /**
   * Get list of document in a task Returns a list documents in a Case; available as an Add-On
   * Module
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return ApiResponse&lt;GetCaseDocumentsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetCaseDocumentsResponse> getNigoDocumentsWithHttpInfo(String caseId,
      String nigoId, String siteId, String next, String limit) throws ApiException {
    okhttp3.Call localVarCall =
        getNigoDocumentsValidateBeforeCall(caseId, nigoId, siteId, next, limit, null);
    Type localVarReturnType = new TypeToken<GetCaseDocumentsResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get list of document in a task (asynchronously) Returns a list documents in a Case; available
   * as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getNigoDocumentsAsync(String caseId, String nigoId, String siteId,
      String next, String limit, final ApiCallback<GetCaseDocumentsResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        getNigoDocumentsValidateBeforeCall(caseId, nigoId, siteId, next, limit, _callback);
    Type localVarReturnType = new TypeToken<GetCaseDocumentsResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getTaskDocuments
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getTaskDocumentsCall(String caseId, String taskId, String siteId, String next,
      String limit, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/tasks/{taskId}/documents"
        .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
        .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getTaskDocumentsValidateBeforeCall(String caseId, String taskId,
      String siteId, String next, String limit, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling getTaskDocuments(Async)");
    }

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          "Missing the required parameter 'taskId' when calling getTaskDocuments(Async)");
    }

    return getTaskDocumentsCall(caseId, taskId, siteId, next, limit, _callback);

  }

  /**
   * Get list of document in a task Returns a list documents in a Case; available as an Add-On
   * Module
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return GetCaseDocumentsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetCaseDocumentsResponse getTaskDocuments(String caseId, String taskId, String siteId,
      String next, String limit) throws ApiException {
    ApiResponse<GetCaseDocumentsResponse> localVarResp =
        getTaskDocumentsWithHttpInfo(caseId, taskId, siteId, next, limit);
    return localVarResp.getData();
  }

  /**
   * Get list of document in a task Returns a list documents in a Case; available as an Add-On
   * Module
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return ApiResponse&lt;GetCaseDocumentsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetCaseDocumentsResponse> getTaskDocumentsWithHttpInfo(String caseId,
      String taskId, String siteId, String next, String limit) throws ApiException {
    okhttp3.Call localVarCall =
        getTaskDocumentsValidateBeforeCall(caseId, taskId, siteId, next, limit, null);
    Type localVarReturnType = new TypeToken<GetCaseDocumentsResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get list of document in a task (asynchronously) Returns a list documents in a Case; available
   * as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getTaskDocumentsAsync(String caseId, String taskId, String siteId,
      String next, String limit, final ApiCallback<GetCaseDocumentsResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        getTaskDocumentsValidateBeforeCall(caseId, taskId, siteId, next, limit, _callback);
    Type localVarReturnType = new TypeToken<GetCaseDocumentsResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for updateCase
   * 
   * @param caseId Case Identifier (required)
   * @param updateCaseRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateCaseCall(String caseId, UpdateCaseRequest updateCaseRequest,
      String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = updateCaseRequest;

    // create path and map variables
    String localVarPath = "/cases/{caseId}".replace("{" + "caseId" + "}",
        localVarApiClient.escapeString(caseId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateCaseValidateBeforeCall(String caseId,
      UpdateCaseRequest updateCaseRequest, String siteId, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling updateCase(Async)");
    }

    // verify the required parameter 'updateCaseRequest' is set
    if (updateCaseRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'updateCaseRequest' when calling updateCase(Async)");
    }

    return updateCaseCall(caseId, updateCaseRequest, siteId, _callback);

  }

  /**
   * Update existing Case Updates existing case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param updateCaseRequest (required)
   * @param siteId Site Identifier (optional)
   * @return UpdateCaseResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public UpdateCaseResponse updateCase(String caseId, UpdateCaseRequest updateCaseRequest,
      String siteId) throws ApiException {
    ApiResponse<UpdateCaseResponse> localVarResp =
        updateCaseWithHttpInfo(caseId, updateCaseRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Update existing Case Updates existing case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param updateCaseRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;UpdateCaseResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<UpdateCaseResponse> updateCaseWithHttpInfo(String caseId,
      UpdateCaseRequest updateCaseRequest, String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        updateCaseValidateBeforeCall(caseId, updateCaseRequest, siteId, null);
    Type localVarReturnType = new TypeToken<UpdateCaseResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Update existing Case (asynchronously) Updates existing case; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param updateCaseRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateCaseAsync(String caseId, UpdateCaseRequest updateCaseRequest,
      String siteId, final ApiCallback<UpdateCaseResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        updateCaseValidateBeforeCall(caseId, updateCaseRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<UpdateCaseResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for updateNigo
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param updateNigoRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateNigoCall(String caseId, String nigoId,
      UpdateNigoRequest updateNigoRequest, String siteId, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = updateNigoRequest;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/nigos/{nigoId}"
        .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
        .replace("{" + "nigoId" + "}", localVarApiClient.escapeString(nigoId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateNigoValidateBeforeCall(String caseId, String nigoId,
      UpdateNigoRequest updateNigoRequest, String siteId, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling updateNigo(Async)");
    }

    // verify the required parameter 'nigoId' is set
    if (nigoId == null) {
      throw new ApiException(
          "Missing the required parameter 'nigoId' when calling updateNigo(Async)");
    }

    // verify the required parameter 'updateNigoRequest' is set
    if (updateNigoRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'updateNigoRequest' when calling updateNigo(Async)");
    }

    return updateNigoCall(caseId, nigoId, updateNigoRequest, siteId, _callback);

  }

  /**
   * Update existing Nigo Updates existing nigo; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param updateNigoRequest (required)
   * @param siteId Site Identifier (optional)
   * @return UpdateNigoResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public UpdateNigoResponse updateNigo(String caseId, String nigoId,
      UpdateNigoRequest updateNigoRequest, String siteId) throws ApiException {
    ApiResponse<UpdateNigoResponse> localVarResp =
        updateNigoWithHttpInfo(caseId, nigoId, updateNigoRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Update existing Nigo Updates existing nigo; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param updateNigoRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;UpdateNigoResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<UpdateNigoResponse> updateNigoWithHttpInfo(String caseId, String nigoId,
      UpdateNigoRequest updateNigoRequest, String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        updateNigoValidateBeforeCall(caseId, nigoId, updateNigoRequest, siteId, null);
    Type localVarReturnType = new TypeToken<UpdateNigoResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Update existing Nigo (asynchronously) Updates existing nigo; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param nigoId Nigo Identifier (required)
   * @param updateNigoRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateNigoAsync(String caseId, String nigoId,
      UpdateNigoRequest updateNigoRequest, String siteId,
      final ApiCallback<UpdateNigoResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        updateNigoValidateBeforeCall(caseId, nigoId, updateNigoRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<UpdateNigoResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for updateTask
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param updateTaskRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateTaskCall(String caseId, String taskId,
      UpdateTaskRequest updateTaskRequest, String siteId, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = updateTaskRequest;

    // create path and map variables
    String localVarPath = "/cases/{caseId}/tasks/{taskId}"
        .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()))
        .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateTaskValidateBeforeCall(String caseId, String taskId,
      UpdateTaskRequest updateTaskRequest, String siteId, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'caseId' is set
    if (caseId == null) {
      throw new ApiException(
          "Missing the required parameter 'caseId' when calling updateTask(Async)");
    }

    // verify the required parameter 'taskId' is set
    if (taskId == null) {
      throw new ApiException(
          "Missing the required parameter 'taskId' when calling updateTask(Async)");
    }

    // verify the required parameter 'updateTaskRequest' is set
    if (updateTaskRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'updateTaskRequest' when calling updateTask(Async)");
    }

    return updateTaskCall(caseId, taskId, updateTaskRequest, siteId, _callback);

  }

  /**
   * Update existing Task Updates existing task; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param updateTaskRequest (required)
   * @param siteId Site Identifier (optional)
   * @return UpdateTaskResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public UpdateTaskResponse updateTask(String caseId, String taskId,
      UpdateTaskRequest updateTaskRequest, String siteId) throws ApiException {
    ApiResponse<UpdateTaskResponse> localVarResp =
        updateTaskWithHttpInfo(caseId, taskId, updateTaskRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Update existing Task Updates existing task; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param updateTaskRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;UpdateTaskResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<UpdateTaskResponse> updateTaskWithHttpInfo(String caseId, String taskId,
      UpdateTaskRequest updateTaskRequest, String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        updateTaskValidateBeforeCall(caseId, taskId, updateTaskRequest, siteId, null);
    Type localVarReturnType = new TypeToken<UpdateTaskResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Update existing Task (asynchronously) Updates existing task; available as an Add-On Module
   * 
   * @param caseId Case Identifier (required)
   * @param taskId Task Identifier (required)
   * @param updateTaskRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateTaskAsync(String caseId, String taskId,
      UpdateTaskRequest updateTaskRequest, String siteId,
      final ApiCallback<UpdateTaskResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        updateTaskValidateBeforeCall(caseId, taskId, updateTaskRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<UpdateTaskResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}

/*
 * FormKiQ API Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You can
 * find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction FormKiQ
 * is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all
 * the API endpoints to build your Perfect Document Management Platform. FormKiQ API was built on
 * top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file
 * with any application that supports the OpenAPI specification. Open API OAuth Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.14.0 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.api;

import com.formkiq.client.invoker.ApiCallback;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.invoker.ApiResponse;
import com.formkiq.client.invoker.Configuration;
import com.formkiq.client.invoker.Pair;
import com.formkiq.client.invoker.ProgressRequestBody;
import com.formkiq.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.formkiq.client.model.AddRuleRequest;
import com.formkiq.client.model.AddRuleResponse;
import com.formkiq.client.model.AddRulesetRequest;
import com.formkiq.client.model.AddRulesetResponse;
import com.formkiq.client.model.DeleteRuleResponse;
import com.formkiq.client.model.DeleteRulesetResponse;
import com.formkiq.client.model.GetRuleResponse;
import com.formkiq.client.model.GetRulesResponse;
import com.formkiq.client.model.GetRulesetResponse;
import com.formkiq.client.model.GetRulesetsResponse;
import com.formkiq.client.model.UpdateRuleRequest;
import com.formkiq.client.model.UpdateRuleResponse;
import com.formkiq.client.model.UpdateRulesetRequest;
import com.formkiq.client.model.UpdateRulesetResponse;
import com.formkiq.client.model.ValidationErrorsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RulesetsApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public RulesetsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public RulesetsApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for addRule
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param addRuleRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addRuleCall(String rulesetId, AddRuleRequest addRuleRequest, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addRuleRequest;

    // create path and map variables
    String localVarPath = "/rulesets/{rulesetId}/rules".replace("{" + "rulesetId" + "}",
        localVarApiClient.escapeString(rulesetId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addRuleValidateBeforeCall(String rulesetId, AddRuleRequest addRuleRequest,
      String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'rulesetId' is set
    if (rulesetId == null) {
      throw new ApiException(
          "Missing the required parameter 'rulesetId' when calling addRule(Async)");
    }

    // verify the required parameter 'addRuleRequest' is set
    if (addRuleRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addRuleRequest' when calling addRule(Async)");
    }

    return addRuleCall(rulesetId, addRuleRequest, siteId, _callback);

  }

  /**
   * Add New Rule Creates a new rule; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param addRuleRequest (required)
   * @param siteId Site Identifier (optional)
   * @return AddRuleResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public AddRuleResponse addRule(String rulesetId, AddRuleRequest addRuleRequest, String siteId)
      throws ApiException {
    ApiResponse<AddRuleResponse> localVarResp =
        addRuleWithHttpInfo(rulesetId, addRuleRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Add New Rule Creates a new rule; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param addRuleRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;AddRuleResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddRuleResponse> addRuleWithHttpInfo(String rulesetId,
      AddRuleRequest addRuleRequest, String siteId) throws ApiException {
    okhttp3.Call localVarCall = addRuleValidateBeforeCall(rulesetId, addRuleRequest, siteId, null);
    Type localVarReturnType = new TypeToken<AddRuleResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add New Rule (asynchronously) Creates a new rule; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param addRuleRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addRuleAsync(String rulesetId, AddRuleRequest addRuleRequest, String siteId,
      final ApiCallback<AddRuleResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        addRuleValidateBeforeCall(rulesetId, addRuleRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<AddRuleResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for addRuleset
   * 
   * @param addRulesetRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addRulesetCall(AddRulesetRequest addRulesetRequest, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addRulesetRequest;

    // create path and map variables
    String localVarPath = "/rulesets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addRulesetValidateBeforeCall(AddRulesetRequest addRulesetRequest,
      String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'addRulesetRequest' is set
    if (addRulesetRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addRulesetRequest' when calling addRuleset(Async)");
    }

    return addRulesetCall(addRulesetRequest, siteId, _callback);

  }

  /**
   * Add New Ruleset Creates a new ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param addRulesetRequest (required)
   * @param siteId Site Identifier (optional)
   * @return AddRulesetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public AddRulesetResponse addRuleset(AddRulesetRequest addRulesetRequest, String siteId)
      throws ApiException {
    ApiResponse<AddRulesetResponse> localVarResp =
        addRulesetWithHttpInfo(addRulesetRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Add New Ruleset Creates a new ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param addRulesetRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;AddRulesetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddRulesetResponse> addRulesetWithHttpInfo(AddRulesetRequest addRulesetRequest,
      String siteId) throws ApiException {
    okhttp3.Call localVarCall = addRulesetValidateBeforeCall(addRulesetRequest, siteId, null);
    Type localVarReturnType = new TypeToken<AddRulesetResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add New Ruleset (asynchronously) Creates a new ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param addRulesetRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addRulesetAsync(AddRulesetRequest addRulesetRequest, String siteId,
      final ApiCallback<AddRulesetResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = addRulesetValidateBeforeCall(addRulesetRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<AddRulesetResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteRule
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param ruleId Rule Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteRuleCall(String rulesetId, String ruleId, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/rulesets/{rulesetId}/rules/{ruleId}"
        .replace("{" + "rulesetId" + "}", localVarApiClient.escapeString(rulesetId.toString()))
        .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteRuleValidateBeforeCall(String rulesetId, String ruleId, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'rulesetId' is set
    if (rulesetId == null) {
      throw new ApiException(
          "Missing the required parameter 'rulesetId' when calling deleteRule(Async)");
    }

    // verify the required parameter 'ruleId' is set
    if (ruleId == null) {
      throw new ApiException(
          "Missing the required parameter 'ruleId' when calling deleteRule(Async)");
    }

    return deleteRuleCall(rulesetId, ruleId, siteId, _callback);

  }

  /**
   * Delete Rule Delete Rule; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param ruleId Rule Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteRuleResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteRuleResponse deleteRule(String rulesetId, String ruleId, String siteId)
      throws ApiException {
    ApiResponse<DeleteRuleResponse> localVarResp =
        deleteRuleWithHttpInfo(rulesetId, ruleId, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete Rule Delete Rule; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param ruleId Rule Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteRuleResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteRuleResponse> deleteRuleWithHttpInfo(String rulesetId, String ruleId,
      String siteId) throws ApiException {
    okhttp3.Call localVarCall = deleteRuleValidateBeforeCall(rulesetId, ruleId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteRuleResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete Rule (asynchronously) Delete Rule; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param ruleId Rule Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteRuleAsync(String rulesetId, String ruleId, String siteId,
      final ApiCallback<DeleteRuleResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = deleteRuleValidateBeforeCall(rulesetId, ruleId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteRuleResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteRuleset
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteRulesetCall(String rulesetId, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/rulesets/{rulesetId}".replace("{" + "rulesetId" + "}",
        localVarApiClient.escapeString(rulesetId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteRulesetValidateBeforeCall(String rulesetId, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'rulesetId' is set
    if (rulesetId == null) {
      throw new ApiException(
          "Missing the required parameter 'rulesetId' when calling deleteRuleset(Async)");
    }

    return deleteRulesetCall(rulesetId, siteId, _callback);

  }

  /**
   * Delete Ruleset Delete Ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteRulesetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteRulesetResponse deleteRuleset(String rulesetId, String siteId) throws ApiException {
    ApiResponse<DeleteRulesetResponse> localVarResp = deleteRulesetWithHttpInfo(rulesetId, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete Ruleset Delete Ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteRulesetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteRulesetResponse> deleteRulesetWithHttpInfo(String rulesetId,
      String siteId) throws ApiException {
    okhttp3.Call localVarCall = deleteRulesetValidateBeforeCall(rulesetId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteRulesetResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete Ruleset (asynchronously) Delete Ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteRulesetAsync(String rulesetId, String siteId,
      final ApiCallback<DeleteRulesetResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = deleteRulesetValidateBeforeCall(rulesetId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteRulesetResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getRule
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param ruleId Rule Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getRuleCall(String rulesetId, String ruleId, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/rulesets/{rulesetId}/rules/{ruleId}"
        .replace("{" + "rulesetId" + "}", localVarApiClient.escapeString(rulesetId.toString()))
        .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getRuleValidateBeforeCall(String rulesetId, String ruleId, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'rulesetId' is set
    if (rulesetId == null) {
      throw new ApiException(
          "Missing the required parameter 'rulesetId' when calling getRule(Async)");
    }

    // verify the required parameter 'ruleId' is set
    if (ruleId == null) {
      throw new ApiException("Missing the required parameter 'ruleId' when calling getRule(Async)");
    }

    return getRuleCall(rulesetId, ruleId, siteId, _callback);

  }

  /**
   * Get Rule Returns a rule in a ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param ruleId Rule Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return GetRuleResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetRuleResponse getRule(String rulesetId, String ruleId, String siteId)
      throws ApiException {
    ApiResponse<GetRuleResponse> localVarResp = getRuleWithHttpInfo(rulesetId, ruleId, siteId);
    return localVarResp.getData();
  }

  /**
   * Get Rule Returns a rule in a ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param ruleId Rule Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;GetRuleResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetRuleResponse> getRuleWithHttpInfo(String rulesetId, String ruleId,
      String siteId) throws ApiException {
    okhttp3.Call localVarCall = getRuleValidateBeforeCall(rulesetId, ruleId, siteId, null);
    Type localVarReturnType = new TypeToken<GetRuleResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Rule (asynchronously) Returns a rule in a ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param ruleId Rule Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getRuleAsync(String rulesetId, String ruleId, String siteId,
      final ApiCallback<GetRuleResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getRuleValidateBeforeCall(rulesetId, ruleId, siteId, _callback);
    Type localVarReturnType = new TypeToken<GetRuleResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getRules
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getRulesCall(String rulesetId, String siteId, String next, String limit,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/rulesets/{rulesetId}/rules".replace("{" + "rulesetId" + "}",
        localVarApiClient.escapeString(rulesetId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getRulesValidateBeforeCall(String rulesetId, String siteId, String next,
      String limit, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'rulesetId' is set
    if (rulesetId == null) {
      throw new ApiException(
          "Missing the required parameter 'rulesetId' when calling getRules(Async)");
    }

    return getRulesCall(rulesetId, siteId, next, limit, _callback);

  }

  /**
   * Get Rules Returns a list of rules in a ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return GetRulesResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetRulesResponse getRules(String rulesetId, String siteId, String next, String limit)
      throws ApiException {
    ApiResponse<GetRulesResponse> localVarResp =
        getRulesWithHttpInfo(rulesetId, siteId, next, limit);
    return localVarResp.getData();
  }

  /**
   * Get Rules Returns a list of rules in a ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return ApiResponse&lt;GetRulesResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetRulesResponse> getRulesWithHttpInfo(String rulesetId, String siteId,
      String next, String limit) throws ApiException {
    okhttp3.Call localVarCall = getRulesValidateBeforeCall(rulesetId, siteId, next, limit, null);
    Type localVarReturnType = new TypeToken<GetRulesResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Rules (asynchronously) Returns a list of rules in a ruleset; ONLY available with FormKiQ
   * Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getRulesAsync(String rulesetId, String siteId, String next, String limit,
      final ApiCallback<GetRulesResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getRulesValidateBeforeCall(rulesetId, siteId, next, limit, _callback);
    Type localVarReturnType = new TypeToken<GetRulesResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getRuleset
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getRulesetCall(String rulesetId, String siteId, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/rulesets/{rulesetId}".replace("{" + "rulesetId" + "}",
        localVarApiClient.escapeString(rulesetId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getRulesetValidateBeforeCall(String rulesetId, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'rulesetId' is set
    if (rulesetId == null) {
      throw new ApiException(
          "Missing the required parameter 'rulesetId' when calling getRuleset(Async)");
    }

    return getRulesetCall(rulesetId, siteId, _callback);

  }

  /**
   * Get Ruleset Get a rule sets; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return GetRulesetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetRulesetResponse getRuleset(String rulesetId, String siteId) throws ApiException {
    ApiResponse<GetRulesetResponse> localVarResp = getRulesetWithHttpInfo(rulesetId, siteId);
    return localVarResp.getData();
  }

  /**
   * Get Ruleset Get a rule sets; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;GetRulesetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetRulesetResponse> getRulesetWithHttpInfo(String rulesetId, String siteId)
      throws ApiException {
    okhttp3.Call localVarCall = getRulesetValidateBeforeCall(rulesetId, siteId, null);
    Type localVarReturnType = new TypeToken<GetRulesetResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Ruleset (asynchronously) Get a rule sets; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getRulesetAsync(String rulesetId, String siteId,
      final ApiCallback<GetRulesetResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getRulesetValidateBeforeCall(rulesetId, siteId, _callback);
    Type localVarReturnType = new TypeToken<GetRulesetResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getRulesets
   * 
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getRulesetsCall(String siteId, String next, String limit,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/rulesets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getRulesetsValidateBeforeCall(String siteId, String next, String limit,
      final ApiCallback _callback) throws ApiException {
    return getRulesetsCall(siteId, next, limit, _callback);

  }

  /**
   * Get Rulesets Returns a list of rule sets; ONLY available with FormKiQ Enterprise
   * 
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return GetRulesetsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetRulesetsResponse getRulesets(String siteId, String next, String limit)
      throws ApiException {
    ApiResponse<GetRulesetsResponse> localVarResp = getRulesetsWithHttpInfo(siteId, next, limit);
    return localVarResp.getData();
  }

  /**
   * Get Rulesets Returns a list of rule sets; ONLY available with FormKiQ Enterprise
   * 
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return ApiResponse&lt;GetRulesetsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetRulesetsResponse> getRulesetsWithHttpInfo(String siteId, String next,
      String limit) throws ApiException {
    okhttp3.Call localVarCall = getRulesetsValidateBeforeCall(siteId, next, limit, null);
    Type localVarReturnType = new TypeToken<GetRulesetsResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Rulesets (asynchronously) Returns a list of rule sets; ONLY available with FormKiQ
   * Enterprise
   * 
   * @param siteId Site Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getRulesetsAsync(String siteId, String next, String limit,
      final ApiCallback<GetRulesetsResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getRulesetsValidateBeforeCall(siteId, next, limit, _callback);
    Type localVarReturnType = new TypeToken<GetRulesetsResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for updateRule
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param ruleId Rule Identifier (required)
   * @param updateRuleRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateRuleCall(String rulesetId, String ruleId,
      UpdateRuleRequest updateRuleRequest, String siteId, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = updateRuleRequest;

    // create path and map variables
    String localVarPath = "/rulesets/{rulesetId}/rules/{ruleId}"
        .replace("{" + "rulesetId" + "}", localVarApiClient.escapeString(rulesetId.toString()))
        .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateRuleValidateBeforeCall(String rulesetId, String ruleId,
      UpdateRuleRequest updateRuleRequest, String siteId, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'rulesetId' is set
    if (rulesetId == null) {
      throw new ApiException(
          "Missing the required parameter 'rulesetId' when calling updateRule(Async)");
    }

    // verify the required parameter 'ruleId' is set
    if (ruleId == null) {
      throw new ApiException(
          "Missing the required parameter 'ruleId' when calling updateRule(Async)");
    }

    // verify the required parameter 'updateRuleRequest' is set
    if (updateRuleRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'updateRuleRequest' when calling updateRule(Async)");
    }

    return updateRuleCall(rulesetId, ruleId, updateRuleRequest, siteId, _callback);

  }

  /**
   * Update Rule Update Rule; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param ruleId Rule Identifier (required)
   * @param updateRuleRequest (required)
   * @param siteId Site Identifier (optional)
   * @return UpdateRuleResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public UpdateRuleResponse updateRule(String rulesetId, String ruleId,
      UpdateRuleRequest updateRuleRequest, String siteId) throws ApiException {
    ApiResponse<UpdateRuleResponse> localVarResp =
        updateRuleWithHttpInfo(rulesetId, ruleId, updateRuleRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Update Rule Update Rule; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param ruleId Rule Identifier (required)
   * @param updateRuleRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;UpdateRuleResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<UpdateRuleResponse> updateRuleWithHttpInfo(String rulesetId, String ruleId,
      UpdateRuleRequest updateRuleRequest, String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        updateRuleValidateBeforeCall(rulesetId, ruleId, updateRuleRequest, siteId, null);
    Type localVarReturnType = new TypeToken<UpdateRuleResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Update Rule (asynchronously) Update Rule; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param ruleId Rule Identifier (required)
   * @param updateRuleRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateRuleAsync(String rulesetId, String ruleId,
      UpdateRuleRequest updateRuleRequest, String siteId,
      final ApiCallback<UpdateRuleResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        updateRuleValidateBeforeCall(rulesetId, ruleId, updateRuleRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<UpdateRuleResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for updateRuleset
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param updateRulesetRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateRulesetCall(String rulesetId, UpdateRulesetRequest updateRulesetRequest,
      String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = updateRulesetRequest;

    // create path and map variables
    String localVarPath = "/rulesets/{rulesetId}".replace("{" + "rulesetId" + "}",
        localVarApiClient.escapeString(rulesetId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateRulesetValidateBeforeCall(String rulesetId,
      UpdateRulesetRequest updateRulesetRequest, String siteId, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'rulesetId' is set
    if (rulesetId == null) {
      throw new ApiException(
          "Missing the required parameter 'rulesetId' when calling updateRuleset(Async)");
    }

    // verify the required parameter 'updateRulesetRequest' is set
    if (updateRulesetRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'updateRulesetRequest' when calling updateRuleset(Async)");
    }

    return updateRulesetCall(rulesetId, updateRulesetRequest, siteId, _callback);

  }

  /**
   * Update Ruleset Updates an existing ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param updateRulesetRequest (required)
   * @param siteId Site Identifier (optional)
   * @return UpdateRulesetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public UpdateRulesetResponse updateRuleset(String rulesetId,
      UpdateRulesetRequest updateRulesetRequest, String siteId) throws ApiException {
    ApiResponse<UpdateRulesetResponse> localVarResp =
        updateRulesetWithHttpInfo(rulesetId, updateRulesetRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Update Ruleset Updates an existing ruleset; ONLY available with FormKiQ Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param updateRulesetRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;UpdateRulesetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<UpdateRulesetResponse> updateRulesetWithHttpInfo(String rulesetId,
      UpdateRulesetRequest updateRulesetRequest, String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        updateRulesetValidateBeforeCall(rulesetId, updateRulesetRequest, siteId, null);
    Type localVarReturnType = new TypeToken<UpdateRulesetResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Update Ruleset (asynchronously) Updates an existing ruleset; ONLY available with FormKiQ
   * Enterprise
   * 
   * @param rulesetId Ruleset Identifier (required)
   * @param updateRulesetRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateRulesetAsync(String rulesetId,
      UpdateRulesetRequest updateRulesetRequest, String siteId,
      final ApiCallback<UpdateRulesetResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        updateRulesetValidateBeforeCall(rulesetId, updateRulesetRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<UpdateRulesetResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}

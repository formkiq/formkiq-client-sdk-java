/*
 * FormKiQ API JWT Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You
 * can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction
 * FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API
 * provides all the API endpoints to build your Perfect Document Management Platform. FormKiQ API
 * was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the
 * API spec file with any application that supports the OpenAPI specification. Open API OAuth
 * Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.17.1 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.api;

import com.formkiq.client.invoker.ApiCallback;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.invoker.ApiResponse;
import com.formkiq.client.invoker.Configuration;
import com.formkiq.client.invoker.Pair;
import com.formkiq.client.invoker.ProgressRequestBody;
import com.formkiq.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.formkiq.client.model.AddDocumentAttributesRequest;
import com.formkiq.client.model.AddResponse;
import com.formkiq.client.model.DeleteResponse;
import com.formkiq.client.model.GetDocumentAttributeResponse;
import com.formkiq.client.model.GetDocumentAttributeVersionsResponse;
import com.formkiq.client.model.GetDocumentAttributesResponse;
import com.formkiq.client.model.SetDocumentAttributeRequest;
import com.formkiq.client.model.SetDocumentAttributesRequest;
import com.formkiq.client.model.SetResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentAttributesApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public DocumentAttributesApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DocumentAttributesApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for addDocumentAttributes
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentAttributesCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentAttributesRequest addDocumentAttributesRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addDocumentAttributesRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/attributes".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addDocumentAttributesValidateBeforeCall(
      @javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentAttributesRequest addDocumentAttributesRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling addDocumentAttributes(Async)");
    }

    // verify the required parameter 'addDocumentAttributesRequest' is set
    if (addDocumentAttributesRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addDocumentAttributesRequest' when calling addDocumentAttributes(Async)");
    }

    return addDocumentAttributesCall(documentId, addDocumentAttributesRequest, siteId, _callback);

  }

  /**
   * Add attribute to document Add multiple attributes to a document; this endpoint also accepts a
   * different body parameter for adding a single attribute
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @return AddResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public AddResponse addDocumentAttributes(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentAttributesRequest addDocumentAttributesRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    ApiResponse<AddResponse> localVarResp =
        addDocumentAttributesWithHttpInfo(documentId, addDocumentAttributesRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Add attribute to document Add multiple attributes to a document; this endpoint also accepts a
   * different body parameter for adding a single attribute
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;AddResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddResponse> addDocumentAttributesWithHttpInfo(
      @javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentAttributesRequest addDocumentAttributesRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall = addDocumentAttributesValidateBeforeCall(documentId,
        addDocumentAttributesRequest, siteId, null);
    Type localVarReturnType = new TypeToken<AddResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add attribute to document (asynchronously) Add multiple attributes to a document; this endpoint
   * also accepts a different body parameter for adding a single attribute
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentAttributesAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull AddDocumentAttributesRequest addDocumentAttributesRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback<AddResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = addDocumentAttributesValidateBeforeCall(documentId,
        addDocumentAttributesRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<AddResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteDocumentAttribute
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentAttributeCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String attributeKey, @javax.annotation.Nullable String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/attributes/{attributeKey}"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
        .replace("{" + "attributeKey" + "}",
            localVarApiClient.escapeString(attributeKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteDocumentAttributeValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteDocumentAttribute(Async)");
    }

    // verify the required parameter 'attributeKey' is set
    if (attributeKey == null) {
      throw new ApiException(
          "Missing the required parameter 'attributeKey' when calling deleteDocumentAttribute(Async)");
    }

    return deleteDocumentAttributeCall(documentId, attributeKey, siteId, _callback);

  }

  /**
   * Delete document attribute Delete a document attribute by using its key
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteResponse deleteDocumentAttribute(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String attributeKey, @javax.annotation.Nullable String siteId)
      throws ApiException {
    ApiResponse<DeleteResponse> localVarResp =
        deleteDocumentAttributeWithHttpInfo(documentId, attributeKey, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete document attribute Delete a document attribute by using its key
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteResponse> deleteDocumentAttributeWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        deleteDocumentAttributeValidateBeforeCall(documentId, attributeKey, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete document attribute (asynchronously) Delete a document attribute by using its key
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentAttributeAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String attributeKey, @javax.annotation.Nullable String siteId,
      final ApiCallback<DeleteResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        deleteDocumentAttributeValidateBeforeCall(documentId, attributeKey, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteDocumentAttributeAndValue
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param attributeValue Attribute Value (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentAttributeAndValueCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nonnull String attributeValue, @javax.annotation.Nullable String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/attributes/{attributeKey}/{attributeValue}"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
        .replace("{" + "attributeKey" + "}",
            localVarApiClient.escapeString(attributeKey.toString()))
        .replace("{" + "attributeValue" + "}",
            localVarApiClient.escapeString(attributeValue.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteDocumentAttributeAndValueValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nonnull String attributeValue, @javax.annotation.Nullable String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteDocumentAttributeAndValue(Async)");
    }

    // verify the required parameter 'attributeKey' is set
    if (attributeKey == null) {
      throw new ApiException(
          "Missing the required parameter 'attributeKey' when calling deleteDocumentAttributeAndValue(Async)");
    }

    // verify the required parameter 'attributeValue' is set
    if (attributeValue == null) {
      throw new ApiException(
          "Missing the required parameter 'attributeValue' when calling deleteDocumentAttributeAndValue(Async)");
    }

    return deleteDocumentAttributeAndValueCall(documentId, attributeKey, attributeValue, siteId,
        _callback);

  }

  /**
   * Delete document&#39;s attribute value Delete a specific document attribute key/value
   * combination; the request will be ignored if there is no valid key/value combination found
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param attributeValue Attribute Value (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteResponse deleteDocumentAttributeAndValue(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nonnull String attributeValue, @javax.annotation.Nullable String siteId)
      throws ApiException {
    ApiResponse<DeleteResponse> localVarResp = deleteDocumentAttributeAndValueWithHttpInfo(
        documentId, attributeKey, attributeValue, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete document&#39;s attribute value Delete a specific document attribute key/value
   * combination; the request will be ignored if there is no valid key/value combination found
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param attributeValue Attribute Value (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteResponse> deleteDocumentAttributeAndValueWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nonnull String attributeValue, @javax.annotation.Nullable String siteId)
      throws ApiException {
    okhttp3.Call localVarCall = deleteDocumentAttributeAndValueValidateBeforeCall(documentId,
        attributeKey, attributeValue, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete document&#39;s attribute value (asynchronously) Delete a specific document attribute
   * key/value combination; the request will be ignored if there is no valid key/value combination
   * found
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param attributeValue Attribute Value (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentAttributeAndValueAsync(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nonnull String attributeValue, @javax.annotation.Nullable String siteId,
      final ApiCallback<DeleteResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = deleteDocumentAttributeAndValueValidateBeforeCall(documentId,
        attributeKey, attributeValue, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentAttribute
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentAttributeCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String attributeKey, @javax.annotation.Nullable String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/attributes/{attributeKey}"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
        .replace("{" + "attributeKey" + "}",
            localVarApiClient.escapeString(attributeKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentAttributeValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocumentAttribute(Async)");
    }

    // verify the required parameter 'attributeKey' is set
    if (attributeKey == null) {
      throw new ApiException(
          "Missing the required parameter 'attributeKey' when calling getDocumentAttribute(Async)");
    }

    return getDocumentAttributeCall(documentId, attributeKey, siteId, _callback);

  }

  /**
   * Get document attribute by key Get a document attribute by using its key
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param siteId Site Identifier (optional)
   * @return GetDocumentAttributeResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentAttributeResponse getDocumentAttribute(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nullable String siteId) throws ApiException {
    ApiResponse<GetDocumentAttributeResponse> localVarResp =
        getDocumentAttributeWithHttpInfo(documentId, attributeKey, siteId);
    return localVarResp.getData();
  }

  /**
   * Get document attribute by key Get a document attribute by using its key
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;GetDocumentAttributeResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentAttributeResponse> getDocumentAttributeWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        getDocumentAttributeValidateBeforeCall(documentId, attributeKey, siteId, null);
    Type localVarReturnType = new TypeToken<GetDocumentAttributeResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get document attribute by key (asynchronously) Get a document attribute by using its key
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentAttributeAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String attributeKey, @javax.annotation.Nullable String siteId,
      final ApiCallback<GetDocumentAttributeResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getDocumentAttributeValidateBeforeCall(documentId, attributeKey, siteId, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentAttributeResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentAttributeVersions
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param next Next page of results token (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentAttributeVersionsCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String attributeKey, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String limit, @javax.annotation.Nullable String next,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/attributes/{attributeKey}/versions"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
        .replace("{" + "attributeKey" + "}",
            localVarApiClient.escapeString(attributeKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentAttributeVersionsValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit,
      @javax.annotation.Nullable String next, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocumentAttributeVersions(Async)");
    }

    // verify the required parameter 'attributeKey' is set
    if (attributeKey == null) {
      throw new ApiException(
          "Missing the required parameter 'attributeKey' when calling getDocumentAttributeVersions(Async)");
    }

    return getDocumentAttributeVersionsCall(documentId, attributeKey, siteId, limit, next,
        _callback);

  }

  /**
   * Get document attribute&#39;s versions Get a listing of a document&#39;s attribute versions;
   * available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param next Next page of results token (optional)
   * @return GetDocumentAttributeVersionsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentAttributeVersionsResponse getDocumentAttributeVersions(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit,
      @javax.annotation.Nullable String next) throws ApiException {
    ApiResponse<GetDocumentAttributeVersionsResponse> localVarResp =
        getDocumentAttributeVersionsWithHttpInfo(documentId, attributeKey, siteId, limit, next);
    return localVarResp.getData();
  }

  /**
   * Get document attribute&#39;s versions Get a listing of a document&#39;s attribute versions;
   * available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param next Next page of results token (optional)
   * @return ApiResponse&lt;GetDocumentAttributeVersionsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentAttributeVersionsResponse> getDocumentAttributeVersionsWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit,
      @javax.annotation.Nullable String next) throws ApiException {
    okhttp3.Call localVarCall = getDocumentAttributeVersionsValidateBeforeCall(documentId,
        attributeKey, siteId, limit, next, null);
    Type localVarReturnType = new TypeToken<GetDocumentAttributeVersionsResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get document attribute&#39;s versions (asynchronously) Get a listing of a document&#39;s
   * attribute versions; available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param next Next page of results token (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentAttributeVersionsAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String attributeKey, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String limit, @javax.annotation.Nullable String next,
      final ApiCallback<GetDocumentAttributeVersionsResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getDocumentAttributeVersionsValidateBeforeCall(documentId,
        attributeKey, siteId, limit, next, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentAttributeVersionsResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentAttributes
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param next Next page of results token (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentAttributesCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit,
      @javax.annotation.Nullable String next, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/attributes".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentAttributesValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String limit, @javax.annotation.Nullable String next,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocumentAttributes(Async)");
    }

    return getDocumentAttributesCall(documentId, siteId, limit, next, _callback);

  }

  /**
   * Get document&#39;s attributes Get a listing of a document&#39;s attributes
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param next Next page of results token (optional)
   * @return GetDocumentAttributesResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentAttributesResponse getDocumentAttributes(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String limit, @javax.annotation.Nullable String next)
      throws ApiException {
    ApiResponse<GetDocumentAttributesResponse> localVarResp =
        getDocumentAttributesWithHttpInfo(documentId, siteId, limit, next);
    return localVarResp.getData();
  }

  /**
   * Get document&#39;s attributes Get a listing of a document&#39;s attributes
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param next Next page of results token (optional)
   * @return ApiResponse&lt;GetDocumentAttributesResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentAttributesResponse> getDocumentAttributesWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String limit, @javax.annotation.Nullable String next)
      throws ApiException {
    okhttp3.Call localVarCall =
        getDocumentAttributesValidateBeforeCall(documentId, siteId, limit, next, null);
    Type localVarReturnType = new TypeToken<GetDocumentAttributesResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get document&#39;s attributes (asynchronously) Get a listing of a document&#39;s attributes
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param next Next page of results token (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentAttributesAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit,
      @javax.annotation.Nullable String next,
      final ApiCallback<GetDocumentAttributesResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getDocumentAttributesValidateBeforeCall(documentId, siteId, limit, next, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentAttributesResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for setDocumentAttributeValue
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param setDocumentAttributeRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentAttributeValueCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nonnull SetDocumentAttributeRequest setDocumentAttributeRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = setDocumentAttributeRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/attributes/{attributeKey}"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
        .replace("{" + "attributeKey" + "}",
            localVarApiClient.escapeString(attributeKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call setDocumentAttributeValueValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nonnull SetDocumentAttributeRequest setDocumentAttributeRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling setDocumentAttributeValue(Async)");
    }

    // verify the required parameter 'attributeKey' is set
    if (attributeKey == null) {
      throw new ApiException(
          "Missing the required parameter 'attributeKey' when calling setDocumentAttributeValue(Async)");
    }

    // verify the required parameter 'setDocumentAttributeRequest' is set
    if (setDocumentAttributeRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'setDocumentAttributeRequest' when calling setDocumentAttributeValue(Async)");
    }

    return setDocumentAttributeValueCall(documentId, attributeKey, setDocumentAttributeRequest,
        siteId, _callback);

  }

  /**
   * Set document&#39;s attributes value Set attributes value to a document
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param setDocumentAttributeRequest (required)
   * @param siteId Site Identifier (optional)
   * @return SetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public SetResponse setDocumentAttributeValue(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nonnull SetDocumentAttributeRequest setDocumentAttributeRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    ApiResponse<SetResponse> localVarResp = setDocumentAttributeValueWithHttpInfo(documentId,
        attributeKey, setDocumentAttributeRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Set document&#39;s attributes value Set attributes value to a document
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param setDocumentAttributeRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;SetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<SetResponse> setDocumentAttributeValueWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nonnull SetDocumentAttributeRequest setDocumentAttributeRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall = setDocumentAttributeValueValidateBeforeCall(documentId,
        attributeKey, setDocumentAttributeRequest, siteId, null);
    Type localVarReturnType = new TypeToken<SetResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Set document&#39;s attributes value (asynchronously) Set attributes value to a document
   * 
   * @param documentId Document Identifier (required)
   * @param attributeKey Attribute Key (required)
   * @param setDocumentAttributeRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentAttributeValueAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String attributeKey,
      @javax.annotation.Nonnull SetDocumentAttributeRequest setDocumentAttributeRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback<SetResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = setDocumentAttributeValueValidateBeforeCall(documentId,
        attributeKey, setDocumentAttributeRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<SetResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for setDocumentAttributes
   * 
   * @param documentId Document Identifier (required)
   * @param setDocumentAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentAttributesCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull SetDocumentAttributesRequest setDocumentAttributesRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = setDocumentAttributesRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/attributes".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call setDocumentAttributesValidateBeforeCall(
      @javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull SetDocumentAttributesRequest setDocumentAttributesRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling setDocumentAttributes(Async)");
    }

    // verify the required parameter 'setDocumentAttributesRequest' is set
    if (setDocumentAttributesRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'setDocumentAttributesRequest' when calling setDocumentAttributes(Async)");
    }

    return setDocumentAttributesCall(documentId, setDocumentAttributesRequest, siteId, _callback);

  }

  /**
   * Set document&#39;s attributes Set multiple attributes to a document; this endpoint also accepts
   * a different body parameter for setting a single attribute Note: - attributes in the request
   * will overwrite existing attributes.
   * 
   * @param documentId Document Identifier (required)
   * @param setDocumentAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @return SetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public SetResponse setDocumentAttributes(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull SetDocumentAttributesRequest setDocumentAttributesRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    ApiResponse<SetResponse> localVarResp =
        setDocumentAttributesWithHttpInfo(documentId, setDocumentAttributesRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Set document&#39;s attributes Set multiple attributes to a document; this endpoint also accepts
   * a different body parameter for setting a single attribute Note: - attributes in the request
   * will overwrite existing attributes.
   * 
   * @param documentId Document Identifier (required)
   * @param setDocumentAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;SetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<SetResponse> setDocumentAttributesWithHttpInfo(
      @javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull SetDocumentAttributesRequest setDocumentAttributesRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall = setDocumentAttributesValidateBeforeCall(documentId,
        setDocumentAttributesRequest, siteId, null);
    Type localVarReturnType = new TypeToken<SetResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Set document&#39;s attributes (asynchronously) Set multiple attributes to a document; this
   * endpoint also accepts a different body parameter for setting a single attribute Note: -
   * attributes in the request will overwrite existing attributes.
   * 
   * @param documentId Document Identifier (required)
   * @param setDocumentAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentAttributesAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull SetDocumentAttributesRequest setDocumentAttributesRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback<SetResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = setDocumentAttributesValidateBeforeCall(documentId,
        setDocumentAttributesRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<SetResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}

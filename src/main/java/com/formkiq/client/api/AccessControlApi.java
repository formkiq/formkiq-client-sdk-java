/*
 * FormKiQ API Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You can
 * find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction FormKiQ
 * is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all
 * the API endpoints to build your Perfect Document Management Platform. FormKiQ API was built on
 * top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file
 * with any application that supports the OpenAPI specification. Open API OAuth Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.15.0 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.api;

import com.formkiq.client.invoker.ApiCallback;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.invoker.ApiResponse;
import com.formkiq.client.invoker.Configuration;
import com.formkiq.client.invoker.Pair;
import com.formkiq.client.invoker.ProgressRequestBody;
import com.formkiq.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.formkiq.client.model.AddDocumentAccessAttributesRequest;
import com.formkiq.client.model.AddDocumentAccessAttributesResponse;
import com.formkiq.client.model.DeleteDocumentAccessAttributesResponse;
import com.formkiq.client.model.DeleteResponse;
import com.formkiq.client.model.GetDocumentAccessAttributesResponse;
import com.formkiq.client.model.GetOpaAccessPolicyItemsResponse;
import com.formkiq.client.model.GetOpaAccessPolicyResponse;
import com.formkiq.client.model.GetOpaConfigurationsResponse;
import com.formkiq.client.model.SetDocumentAccessAttributesRequest;
import com.formkiq.client.model.SetDocumentAccessAttributesResponse;
import com.formkiq.client.model.SetOpaAccessPolicyItemsRequest;
import com.formkiq.client.model.SetResponse;
import com.formkiq.client.model.ValidationErrorsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessControlApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public AccessControlApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AccessControlApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for addDocumentAccessAttributes
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentAccessAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentAccessAttributesCall(String documentId,
      AddDocumentAccessAttributesRequest addDocumentAccessAttributesRequest, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addDocumentAccessAttributesRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/accessAttributes"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addDocumentAccessAttributesValidateBeforeCall(String documentId,
      AddDocumentAccessAttributesRequest addDocumentAccessAttributesRequest, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling addDocumentAccessAttributes(Async)");
    }

    // verify the required parameter 'addDocumentAccessAttributesRequest' is set
    if (addDocumentAccessAttributesRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addDocumentAccessAttributesRequest' when calling addDocumentAccessAttributes(Async)");
    }

    return addDocumentAccessAttributesCall(documentId, addDocumentAccessAttributesRequest, siteId,
        _callback);

  }

  /**
   * Add document access attributes Add a document&#39;s access attributes (only \&quot;admin\&quot;
   * role can call API)
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentAccessAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @return AddDocumentAccessAttributesResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public AddDocumentAccessAttributesResponse addDocumentAccessAttributes(String documentId,
      AddDocumentAccessAttributesRequest addDocumentAccessAttributesRequest, String siteId)
      throws ApiException {
    ApiResponse<AddDocumentAccessAttributesResponse> localVarResp =
        addDocumentAccessAttributesWithHttpInfo(documentId, addDocumentAccessAttributesRequest,
            siteId);
    return localVarResp.getData();
  }

  /**
   * Add document access attributes Add a document&#39;s access attributes (only \&quot;admin\&quot;
   * role can call API)
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentAccessAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;AddDocumentAccessAttributesResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddDocumentAccessAttributesResponse> addDocumentAccessAttributesWithHttpInfo(
      String documentId, AddDocumentAccessAttributesRequest addDocumentAccessAttributesRequest,
      String siteId) throws ApiException {
    okhttp3.Call localVarCall = addDocumentAccessAttributesValidateBeforeCall(documentId,
        addDocumentAccessAttributesRequest, siteId, null);
    Type localVarReturnType = new TypeToken<AddDocumentAccessAttributesResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add document access attributes (asynchronously) Add a document&#39;s access attributes (only
   * \&quot;admin\&quot; role can call API)
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentAccessAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentAccessAttributesAsync(String documentId,
      AddDocumentAccessAttributesRequest addDocumentAccessAttributesRequest, String siteId,
      final ApiCallback<AddDocumentAccessAttributesResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = addDocumentAccessAttributesValidateBeforeCall(documentId,
        addDocumentAccessAttributesRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<AddDocumentAccessAttributesResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteDocumentAccessAttributes
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentAccessAttributesCall(String documentId, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/accessAttributes"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteDocumentAccessAttributesValidateBeforeCall(String documentId,
      String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteDocumentAccessAttributes(Async)");
    }

    return deleteDocumentAccessAttributesCall(documentId, siteId, _callback);

  }

  /**
   * Delete document&#39;s access attributes Delete a document&#39;s access attributes
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteDocumentAccessAttributesResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteDocumentAccessAttributesResponse deleteDocumentAccessAttributes(String documentId,
      String siteId) throws ApiException {
    ApiResponse<DeleteDocumentAccessAttributesResponse> localVarResp =
        deleteDocumentAccessAttributesWithHttpInfo(documentId, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete document&#39;s access attributes Delete a document&#39;s access attributes
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteDocumentAccessAttributesResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteDocumentAccessAttributesResponse> deleteDocumentAccessAttributesWithHttpInfo(
      String documentId, String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        deleteDocumentAccessAttributesValidateBeforeCall(documentId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteDocumentAccessAttributesResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete document&#39;s access attributes (asynchronously) Delete a document&#39;s access
   * attributes
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentAccessAttributesAsync(String documentId, String siteId,
      final ApiCallback<DeleteDocumentAccessAttributesResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        deleteDocumentAccessAttributesValidateBeforeCall(documentId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteDocumentAccessAttributesResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteOpaAccessPolicyItem
   * 
   * @param siteId Site Identifier (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteOpaAccessPolicyItemCall(String siteId, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/sites/{siteId}/opa/accessPolicy/policyItems"
        .replace("{" + "siteId" + "}", localVarApiClient.escapeString(siteId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteOpaAccessPolicyItemValidateBeforeCall(String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'siteId' is set
    if (siteId == null) {
      throw new ApiException(
          "Missing the required parameter 'siteId' when calling deleteOpaAccessPolicyItem(Async)");
    }

    return deleteOpaAccessPolicyItemCall(siteId, _callback);

  }

  /**
   * Delete OPA Access Policy Items Delete OPA Access Policy Items
   * 
   * @param siteId Site Identifier (required)
   * @return DeleteResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteResponse deleteOpaAccessPolicyItem(String siteId) throws ApiException {
    ApiResponse<DeleteResponse> localVarResp = deleteOpaAccessPolicyItemWithHttpInfo(siteId);
    return localVarResp.getData();
  }

  /**
   * Delete OPA Access Policy Items Delete OPA Access Policy Items
   * 
   * @param siteId Site Identifier (required)
   * @return ApiResponse&lt;DeleteResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteResponse> deleteOpaAccessPolicyItemWithHttpInfo(String siteId)
      throws ApiException {
    okhttp3.Call localVarCall = deleteOpaAccessPolicyItemValidateBeforeCall(siteId, null);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete OPA Access Policy Items (asynchronously) Delete OPA Access Policy Items
   * 
   * @param siteId Site Identifier (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteOpaAccessPolicyItemAsync(String siteId,
      final ApiCallback<DeleteResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = deleteOpaAccessPolicyItemValidateBeforeCall(siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentAccessAttributes
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentAccessAttributesCall(String documentId, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/accessAttributes"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentAccessAttributesValidateBeforeCall(String documentId,
      String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocumentAccessAttributes(Async)");
    }

    return getDocumentAccessAttributesCall(documentId, siteId, _callback);

  }

  /**
   * Get document access attributes Retrieves a document&#39;s access attributes (only
   * \&quot;admin\&quot; role can call API)
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return GetDocumentAccessAttributesResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentAccessAttributesResponse getDocumentAccessAttributes(String documentId,
      String siteId) throws ApiException {
    ApiResponse<GetDocumentAccessAttributesResponse> localVarResp =
        getDocumentAccessAttributesWithHttpInfo(documentId, siteId);
    return localVarResp.getData();
  }

  /**
   * Get document access attributes Retrieves a document&#39;s access attributes (only
   * \&quot;admin\&quot; role can call API)
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;GetDocumentAccessAttributesResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentAccessAttributesResponse> getDocumentAccessAttributesWithHttpInfo(
      String documentId, String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        getDocumentAccessAttributesValidateBeforeCall(documentId, siteId, null);
    Type localVarReturnType = new TypeToken<GetDocumentAccessAttributesResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get document access attributes (asynchronously) Retrieves a document&#39;s access attributes
   * (only \&quot;admin\&quot; role can call API)
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentAccessAttributesAsync(String documentId, String siteId,
      final ApiCallback<GetDocumentAccessAttributesResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getDocumentAccessAttributesValidateBeforeCall(documentId, siteId, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentAccessAttributesResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getOpaAccessPolicy
   * 
   * @param siteId Site Identifier (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getOpaAccessPolicyCall(String siteId, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/sites/{siteId}/opa/accessPolicy".replace("{" + "siteId" + "}",
        localVarApiClient.escapeString(siteId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getOpaAccessPolicyValidateBeforeCall(String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'siteId' is set
    if (siteId == null) {
      throw new ApiException(
          "Missing the required parameter 'siteId' when calling getOpaAccessPolicy(Async)");
    }

    return getOpaAccessPolicyCall(siteId, _callback);

  }

  /**
   * Get OPA Access Policy Returns OPA Access Policy, can only be requested with ADMIN privileges
   * 
   * @param siteId Site Identifier (required)
   * @return GetOpaAccessPolicyResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetOpaAccessPolicyResponse getOpaAccessPolicy(String siteId) throws ApiException {
    ApiResponse<GetOpaAccessPolicyResponse> localVarResp = getOpaAccessPolicyWithHttpInfo(siteId);
    return localVarResp.getData();
  }

  /**
   * Get OPA Access Policy Returns OPA Access Policy, can only be requested with ADMIN privileges
   * 
   * @param siteId Site Identifier (required)
   * @return ApiResponse&lt;GetOpaAccessPolicyResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetOpaAccessPolicyResponse> getOpaAccessPolicyWithHttpInfo(String siteId)
      throws ApiException {
    okhttp3.Call localVarCall = getOpaAccessPolicyValidateBeforeCall(siteId, null);
    Type localVarReturnType = new TypeToken<GetOpaAccessPolicyResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get OPA Access Policy (asynchronously) Returns OPA Access Policy, can only be requested with
   * ADMIN privileges
   * 
   * @param siteId Site Identifier (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getOpaAccessPolicyAsync(String siteId,
      final ApiCallback<GetOpaAccessPolicyResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getOpaAccessPolicyValidateBeforeCall(siteId, _callback);
    Type localVarReturnType = new TypeToken<GetOpaAccessPolicyResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getOpaAccessPolicyItems
   * 
   * @param siteId Site Identifier (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getOpaAccessPolicyItemsCall(String siteId, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/sites/{siteId}/opa/accessPolicy/policyItems"
        .replace("{" + "siteId" + "}", localVarApiClient.escapeString(siteId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getOpaAccessPolicyItemsValidateBeforeCall(String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'siteId' is set
    if (siteId == null) {
      throw new ApiException(
          "Missing the required parameter 'siteId' when calling getOpaAccessPolicyItems(Async)");
    }

    return getOpaAccessPolicyItemsCall(siteId, _callback);

  }

  /**
   * Get OPA Access Policy Items Returns OPA Access Policy Items, can only be requested with ADMIN
   * privileges
   * 
   * @param siteId Site Identifier (required)
   * @return GetOpaAccessPolicyItemsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetOpaAccessPolicyItemsResponse getOpaAccessPolicyItems(String siteId)
      throws ApiException {
    ApiResponse<GetOpaAccessPolicyItemsResponse> localVarResp =
        getOpaAccessPolicyItemsWithHttpInfo(siteId);
    return localVarResp.getData();
  }

  /**
   * Get OPA Access Policy Items Returns OPA Access Policy Items, can only be requested with ADMIN
   * privileges
   * 
   * @param siteId Site Identifier (required)
   * @return ApiResponse&lt;GetOpaAccessPolicyItemsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetOpaAccessPolicyItemsResponse> getOpaAccessPolicyItemsWithHttpInfo(
      String siteId) throws ApiException {
    okhttp3.Call localVarCall = getOpaAccessPolicyItemsValidateBeforeCall(siteId, null);
    Type localVarReturnType = new TypeToken<GetOpaAccessPolicyItemsResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get OPA Access Policy Items (asynchronously) Returns OPA Access Policy Items, can only be
   * requested with ADMIN privileges
   * 
   * @param siteId Site Identifier (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getOpaAccessPolicyItemsAsync(String siteId,
      final ApiCallback<GetOpaAccessPolicyItemsResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getOpaAccessPolicyItemsValidateBeforeCall(siteId, _callback);
    Type localVarReturnType = new TypeToken<GetOpaAccessPolicyItemsResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getOpaConfigurations
   * 
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getOpaConfigurationsCall(final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/sites/opa/accessPolicies";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getOpaConfigurationsValidateBeforeCall(final ApiCallback _callback)
      throws ApiException {
    return getOpaConfigurationsCall(_callback);

  }

  /**
   * Get OPAs Configuration Returns a list of OPA Configuration, can only be requested with ADMIN
   * privileges
   * 
   * @return GetOpaConfigurationsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetOpaConfigurationsResponse getOpaConfigurations() throws ApiException {
    ApiResponse<GetOpaConfigurationsResponse> localVarResp = getOpaConfigurationsWithHttpInfo();
    return localVarResp.getData();
  }

  /**
   * Get OPAs Configuration Returns a list of OPA Configuration, can only be requested with ADMIN
   * privileges
   * 
   * @return ApiResponse&lt;GetOpaConfigurationsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetOpaConfigurationsResponse> getOpaConfigurationsWithHttpInfo()
      throws ApiException {
    okhttp3.Call localVarCall = getOpaConfigurationsValidateBeforeCall(null);
    Type localVarReturnType = new TypeToken<GetOpaConfigurationsResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get OPAs Configuration (asynchronously) Returns a list of OPA Configuration, can only be
   * requested with ADMIN privileges
   * 
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getOpaConfigurationsAsync(
      final ApiCallback<GetOpaConfigurationsResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getOpaConfigurationsValidateBeforeCall(_callback);
    Type localVarReturnType = new TypeToken<GetOpaConfigurationsResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for setDocumentAccessAttributes
   * 
   * @param documentId Document Identifier (required)
   * @param setDocumentAccessAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentAccessAttributesCall(String documentId,
      SetDocumentAccessAttributesRequest setDocumentAccessAttributesRequest, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = setDocumentAccessAttributesRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/accessAttributes"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call setDocumentAccessAttributesValidateBeforeCall(String documentId,
      SetDocumentAccessAttributesRequest setDocumentAccessAttributesRequest, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling setDocumentAccessAttributes(Async)");
    }

    // verify the required parameter 'setDocumentAccessAttributesRequest' is set
    if (setDocumentAccessAttributesRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'setDocumentAccessAttributesRequest' when calling setDocumentAccessAttributes(Async)");
    }

    return setDocumentAccessAttributesCall(documentId, setDocumentAccessAttributesRequest, siteId,
        _callback);

  }

  /**
   * Set document access attributes Set a document&#39;s access attributes (only \&quot;admin\&quot;
   * role can call API)
   * 
   * @param documentId Document Identifier (required)
   * @param setDocumentAccessAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @return SetDocumentAccessAttributesResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public SetDocumentAccessAttributesResponse setDocumentAccessAttributes(String documentId,
      SetDocumentAccessAttributesRequest setDocumentAccessAttributesRequest, String siteId)
      throws ApiException {
    ApiResponse<SetDocumentAccessAttributesResponse> localVarResp =
        setDocumentAccessAttributesWithHttpInfo(documentId, setDocumentAccessAttributesRequest,
            siteId);
    return localVarResp.getData();
  }

  /**
   * Set document access attributes Set a document&#39;s access attributes (only \&quot;admin\&quot;
   * role can call API)
   * 
   * @param documentId Document Identifier (required)
   * @param setDocumentAccessAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;SetDocumentAccessAttributesResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<SetDocumentAccessAttributesResponse> setDocumentAccessAttributesWithHttpInfo(
      String documentId, SetDocumentAccessAttributesRequest setDocumentAccessAttributesRequest,
      String siteId) throws ApiException {
    okhttp3.Call localVarCall = setDocumentAccessAttributesValidateBeforeCall(documentId,
        setDocumentAccessAttributesRequest, siteId, null);
    Type localVarReturnType = new TypeToken<SetDocumentAccessAttributesResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Set document access attributes (asynchronously) Set a document&#39;s access attributes (only
   * \&quot;admin\&quot; role can call API)
   * 
   * @param documentId Document Identifier (required)
   * @param setDocumentAccessAttributesRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentAccessAttributesAsync(String documentId,
      SetDocumentAccessAttributesRequest setDocumentAccessAttributesRequest, String siteId,
      final ApiCallback<SetDocumentAccessAttributesResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = setDocumentAccessAttributesValidateBeforeCall(documentId,
        setDocumentAccessAttributesRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<SetDocumentAccessAttributesResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for setOpaAccessPolicyItems
   * 
   * @param siteId Site Identifier (required)
   * @param setOpaAccessPolicyItemsRequest (required)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setOpaAccessPolicyItemsCall(String siteId,
      SetOpaAccessPolicyItemsRequest setOpaAccessPolicyItemsRequest, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = setOpaAccessPolicyItemsRequest;

    // create path and map variables
    String localVarPath = "/sites/{siteId}/opa/accessPolicy/policyItems"
        .replace("{" + "siteId" + "}", localVarApiClient.escapeString(siteId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call setOpaAccessPolicyItemsValidateBeforeCall(String siteId,
      SetOpaAccessPolicyItemsRequest setOpaAccessPolicyItemsRequest, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'siteId' is set
    if (siteId == null) {
      throw new ApiException(
          "Missing the required parameter 'siteId' when calling setOpaAccessPolicyItems(Async)");
    }

    // verify the required parameter 'setOpaAccessPolicyItemsRequest' is set
    if (setOpaAccessPolicyItemsRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'setOpaAccessPolicyItemsRequest' when calling setOpaAccessPolicyItems(Async)");
    }

    return setOpaAccessPolicyItemsCall(siteId, setOpaAccessPolicyItemsRequest, _callback);

  }

  /**
   * Set opa access policy items, can only be requested with ADMIN privileges Sets opa access policy
   * items
   * 
   * @param siteId Site Identifier (required)
   * @param setOpaAccessPolicyItemsRequest (required)
   * @return SetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public SetResponse setOpaAccessPolicyItems(String siteId,
      SetOpaAccessPolicyItemsRequest setOpaAccessPolicyItemsRequest) throws ApiException {
    ApiResponse<SetResponse> localVarResp =
        setOpaAccessPolicyItemsWithHttpInfo(siteId, setOpaAccessPolicyItemsRequest);
    return localVarResp.getData();
  }

  /**
   * Set opa access policy items, can only be requested with ADMIN privileges Sets opa access policy
   * items
   * 
   * @param siteId Site Identifier (required)
   * @param setOpaAccessPolicyItemsRequest (required)
   * @return ApiResponse&lt;SetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<SetResponse> setOpaAccessPolicyItemsWithHttpInfo(String siteId,
      SetOpaAccessPolicyItemsRequest setOpaAccessPolicyItemsRequest) throws ApiException {
    okhttp3.Call localVarCall =
        setOpaAccessPolicyItemsValidateBeforeCall(siteId, setOpaAccessPolicyItemsRequest, null);
    Type localVarReturnType = new TypeToken<SetResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Set opa access policy items, can only be requested with ADMIN privileges (asynchronously) Sets
   * opa access policy items
   * 
   * @param siteId Site Identifier (required)
   * @param setOpaAccessPolicyItemsRequest (required)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setOpaAccessPolicyItemsAsync(String siteId,
      SetOpaAccessPolicyItemsRequest setOpaAccessPolicyItemsRequest,
      final ApiCallback<SetResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = setOpaAccessPolicyItemsValidateBeforeCall(siteId,
        setOpaAccessPolicyItemsRequest, _callback);
    Type localVarReturnType = new TypeToken<SetResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}

/*
 * FormKiQ API JWT Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You
 * can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction
 * FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API
 * provides all the API endpoints to build your Perfect Document Management Platform. FormKiQ API
 * was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the
 * API spec file with any application that supports the OpenAPI specification. Open API OAuth
 * Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.18.0 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.api;

import com.formkiq.client.invoker.ApiCallback;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.invoker.ApiResponse;
import com.formkiq.client.invoker.Configuration;
import com.formkiq.client.invoker.Pair;
import com.formkiq.client.invoker.ProgressRequestBody;
import com.formkiq.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.formkiq.client.model.AddEntityRequest;
import com.formkiq.client.model.AddEntityResponse;
import com.formkiq.client.model.AddEntityTypeRequest;
import com.formkiq.client.model.AddEntityTypeResponse;
import com.formkiq.client.model.DeleteResponse;
import com.formkiq.client.model.GetEntitiesResponse;
import com.formkiq.client.model.GetEntityResponse;
import com.formkiq.client.model.GetEntityTypeResponse;
import com.formkiq.client.model.GetEntityTypesResponse;
import com.formkiq.client.model.UpdateEntityRequest;
import com.formkiq.client.model.UpdateResponse;
import com.formkiq.client.model.ValidationErrorsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntityApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public EntityApi() {
    this(Configuration.getDefaultApiClient());
  }

  public EntityApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for addEntity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param addEntityRequest (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addEntityCall(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull AddEntityRequest addEntityRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addEntityRequest;

    // create path and map variables
    String localVarPath = "/entities/{entityTypeId}".replace("{" + "entityTypeId" + "}",
        localVarApiClient.escapeString(entityTypeId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (namespace != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addEntityValidateBeforeCall(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull AddEntityRequest addEntityRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      throw new ApiException(
          "Missing the required parameter 'entityTypeId' when calling addEntity(Async)");
    }

    // verify the required parameter 'addEntityRequest' is set
    if (addEntityRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addEntityRequest' when calling addEntity(Async)");
    }

    return addEntityCall(entityTypeId, addEntityRequest, siteId, namespace, _callback);

  }

  /**
   * Add New Entity Creates a Entity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param addEntityRequest (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @return AddEntityResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public AddEntityResponse addEntity(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull AddEntityRequest addEntityRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace)
      throws ApiException {
    ApiResponse<AddEntityResponse> localVarResp =
        addEntityWithHttpInfo(entityTypeId, addEntityRequest, siteId, namespace);
    return localVarResp.getData();
  }

  /**
   * Add New Entity Creates a Entity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param addEntityRequest (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @return ApiResponse&lt;AddEntityResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddEntityResponse> addEntityWithHttpInfo(
      @javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull AddEntityRequest addEntityRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace)
      throws ApiException {
    okhttp3.Call localVarCall =
        addEntityValidateBeforeCall(entityTypeId, addEntityRequest, siteId, namespace, null);
    Type localVarReturnType = new TypeToken<AddEntityResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add New Entity (asynchronously) Creates a Entity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param addEntityRequest (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addEntityAsync(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull AddEntityRequest addEntityRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      final ApiCallback<AddEntityResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        addEntityValidateBeforeCall(entityTypeId, addEntityRequest, siteId, namespace, _callback);
    Type localVarReturnType = new TypeToken<AddEntityResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for addEntityType
   * 
   * @param addEntityTypeRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addEntityTypeCall(
      @javax.annotation.Nonnull AddEntityTypeRequest addEntityTypeRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addEntityTypeRequest;

    // create path and map variables
    String localVarPath = "/entityTypes";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addEntityTypeValidateBeforeCall(
      @javax.annotation.Nonnull AddEntityTypeRequest addEntityTypeRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'addEntityTypeRequest' is set
    if (addEntityTypeRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addEntityTypeRequest' when calling addEntityType(Async)");
    }

    return addEntityTypeCall(addEntityTypeRequest, siteId, _callback);

  }

  /**
   * Add New EntityType Creates a Entity Type
   * 
   * @param addEntityTypeRequest (required)
   * @param siteId Site Identifier (optional)
   * @return AddEntityTypeResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public AddEntityTypeResponse addEntityType(
      @javax.annotation.Nonnull AddEntityTypeRequest addEntityTypeRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    ApiResponse<AddEntityTypeResponse> localVarResp =
        addEntityTypeWithHttpInfo(addEntityTypeRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Add New EntityType Creates a Entity Type
   * 
   * @param addEntityTypeRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;AddEntityTypeResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddEntityTypeResponse> addEntityTypeWithHttpInfo(
      @javax.annotation.Nonnull AddEntityTypeRequest addEntityTypeRequest,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall = addEntityTypeValidateBeforeCall(addEntityTypeRequest, siteId, null);
    Type localVarReturnType = new TypeToken<AddEntityTypeResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add New EntityType (asynchronously) Creates a Entity Type
   * 
   * @param addEntityTypeRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addEntityTypeAsync(
      @javax.annotation.Nonnull AddEntityTypeRequest addEntityTypeRequest,
      @javax.annotation.Nullable String siteId, final ApiCallback<AddEntityTypeResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        addEntityTypeValidateBeforeCall(addEntityTypeRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<AddEntityTypeResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteEntity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param entityId Entity Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteEntityCall(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull String entityId, @javax.annotation.Nullable String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/entities/{entityTypeId}/{entityId}"
        .replace("{" + "entityTypeId" + "}",
            localVarApiClient.escapeString(entityTypeId.toString()))
        .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteEntityValidateBeforeCall(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull String entityId, @javax.annotation.Nullable String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      throw new ApiException(
          "Missing the required parameter 'entityTypeId' when calling deleteEntity(Async)");
    }

    // verify the required parameter 'entityId' is set
    if (entityId == null) {
      throw new ApiException(
          "Missing the required parameter 'entityId' when calling deleteEntity(Async)");
    }

    return deleteEntityCall(entityTypeId, entityId, siteId, _callback);

  }

  /**
   * Deletes Entity Deletes Entity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param entityId Entity Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteResponse deleteEntity(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull String entityId, @javax.annotation.Nullable String siteId)
      throws ApiException {
    ApiResponse<DeleteResponse> localVarResp =
        deleteEntityWithHttpInfo(entityTypeId, entityId, siteId);
    return localVarResp.getData();
  }

  /**
   * Deletes Entity Deletes Entity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param entityId Entity Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteResponse> deleteEntityWithHttpInfo(
      @javax.annotation.Nonnull String entityTypeId, @javax.annotation.Nonnull String entityId,
      @javax.annotation.Nullable String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        deleteEntityValidateBeforeCall(entityTypeId, entityId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Deletes Entity (asynchronously) Deletes Entity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param entityId Entity Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteEntityAsync(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull String entityId, @javax.annotation.Nullable String siteId,
      final ApiCallback<DeleteResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        deleteEntityValidateBeforeCall(entityTypeId, entityId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteEntityType
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteEntityTypeCall(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/entityTypes/{entityTypeId}".replace("{" + "entityTypeId" + "}",
        localVarApiClient.escapeString(entityTypeId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteEntityTypeValidateBeforeCall(
      @javax.annotation.Nonnull String entityTypeId, @javax.annotation.Nullable String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      throw new ApiException(
          "Missing the required parameter 'entityTypeId' when calling deleteEntityType(Async)");
    }

    return deleteEntityTypeCall(entityTypeId, siteId, _callback);

  }

  /**
   * Deletes Entity Type Deletes Entity Type
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteResponse deleteEntityType(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nullable String siteId) throws ApiException {
    ApiResponse<DeleteResponse> localVarResp = deleteEntityTypeWithHttpInfo(entityTypeId, siteId);
    return localVarResp.getData();
  }

  /**
   * Deletes Entity Type Deletes Entity Type
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteResponse> deleteEntityTypeWithHttpInfo(
      @javax.annotation.Nonnull String entityTypeId, @javax.annotation.Nullable String siteId)
      throws ApiException {
    okhttp3.Call localVarCall = deleteEntityTypeValidateBeforeCall(entityTypeId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Deletes Entity Type (asynchronously) Deletes Entity Type
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteEntityTypeAsync(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nullable String siteId, final ApiCallback<DeleteResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = deleteEntityTypeValidateBeforeCall(entityTypeId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getEntities
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getEntitiesCall(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      @javax.annotation.Nullable String next, @javax.annotation.Nullable String limit,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/entities/{entityTypeId}".replace("{" + "entityTypeId" + "}",
        localVarApiClient.escapeString(entityTypeId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (namespace != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getEntitiesValidateBeforeCall(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      @javax.annotation.Nullable String next, @javax.annotation.Nullable String limit,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      throw new ApiException(
          "Missing the required parameter 'entityTypeId' when calling getEntities(Async)");
    }

    return getEntitiesCall(entityTypeId, siteId, namespace, next, limit, _callback);

  }

  /**
   * Get Entities Returns a list of entities
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return GetEntitiesResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetEntitiesResponse getEntities(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      @javax.annotation.Nullable String next, @javax.annotation.Nullable String limit)
      throws ApiException {
    ApiResponse<GetEntitiesResponse> localVarResp =
        getEntitiesWithHttpInfo(entityTypeId, siteId, namespace, next, limit);
    return localVarResp.getData();
  }

  /**
   * Get Entities Returns a list of entities
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return ApiResponse&lt;GetEntitiesResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetEntitiesResponse> getEntitiesWithHttpInfo(
      @javax.annotation.Nonnull String entityTypeId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String namespace, @javax.annotation.Nullable String next,
      @javax.annotation.Nullable String limit) throws ApiException {
    okhttp3.Call localVarCall =
        getEntitiesValidateBeforeCall(entityTypeId, siteId, namespace, next, limit, null);
    Type localVarReturnType = new TypeToken<GetEntitiesResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Entities (asynchronously) Returns a list of entities
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getEntitiesAsync(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      @javax.annotation.Nullable String next, @javax.annotation.Nullable String limit,
      final ApiCallback<GetEntitiesResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getEntitiesValidateBeforeCall(entityTypeId, siteId, namespace, next, limit, _callback);
    Type localVarReturnType = new TypeToken<GetEntitiesResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getEntity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param entityId Entity Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getEntityCall(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull String entityId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String namespace, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/entities/{entityTypeId}/{entityId}"
        .replace("{" + "entityTypeId" + "}",
            localVarApiClient.escapeString(entityTypeId.toString()))
        .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (namespace != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getEntityValidateBeforeCall(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull String entityId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String namespace, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      throw new ApiException(
          "Missing the required parameter 'entityTypeId' when calling getEntity(Async)");
    }

    // verify the required parameter 'entityId' is set
    if (entityId == null) {
      throw new ApiException(
          "Missing the required parameter 'entityId' when calling getEntity(Async)");
    }

    return getEntityCall(entityTypeId, entityId, siteId, namespace, _callback);

  }

  /**
   * Get Entity Returns a entity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param entityId Entity Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @return GetEntityResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetEntityResponse getEntity(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull String entityId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String namespace) throws ApiException {
    ApiResponse<GetEntityResponse> localVarResp =
        getEntityWithHttpInfo(entityTypeId, entityId, siteId, namespace);
    return localVarResp.getData();
  }

  /**
   * Get Entity Returns a entity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param entityId Entity Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @return ApiResponse&lt;GetEntityResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetEntityResponse> getEntityWithHttpInfo(
      @javax.annotation.Nonnull String entityTypeId, @javax.annotation.Nonnull String entityId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace)
      throws ApiException {
    okhttp3.Call localVarCall =
        getEntityValidateBeforeCall(entityTypeId, entityId, siteId, namespace, null);
    Type localVarReturnType = new TypeToken<GetEntityResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Entity (asynchronously) Returns a entity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param entityId Entity Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getEntityAsync(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull String entityId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String namespace, final ApiCallback<GetEntityResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        getEntityValidateBeforeCall(entityTypeId, entityId, siteId, namespace, _callback);
    Type localVarReturnType = new TypeToken<GetEntityResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getEntityType
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getEntityTypeCall(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/entityTypes/{entityTypeId}".replace("{" + "entityTypeId" + "}",
        localVarApiClient.escapeString(entityTypeId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (namespace != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getEntityTypeValidateBeforeCall(
      @javax.annotation.Nonnull String entityTypeId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String namespace, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      throw new ApiException(
          "Missing the required parameter 'entityTypeId' when calling getEntityType(Async)");
    }

    return getEntityTypeCall(entityTypeId, siteId, namespace, _callback);

  }

  /**
   * Get EntityType Returns a entity type
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @return GetEntityTypeResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetEntityTypeResponse getEntityType(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace)
      throws ApiException {
    ApiResponse<GetEntityTypeResponse> localVarResp =
        getEntityTypeWithHttpInfo(entityTypeId, siteId, namespace);
    return localVarResp.getData();
  }

  /**
   * Get EntityType Returns a entity type
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @return ApiResponse&lt;GetEntityTypeResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetEntityTypeResponse> getEntityTypeWithHttpInfo(
      @javax.annotation.Nonnull String entityTypeId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String namespace) throws ApiException {
    okhttp3.Call localVarCall =
        getEntityTypeValidateBeforeCall(entityTypeId, siteId, namespace, null);
    Type localVarReturnType = new TypeToken<GetEntityTypeResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get EntityType (asynchronously) Returns a entity type
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getEntityTypeAsync(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      final ApiCallback<GetEntityTypeResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getEntityTypeValidateBeforeCall(entityTypeId, siteId, namespace, _callback);
    Type localVarReturnType = new TypeToken<GetEntityTypeResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getEntityTypes
   * 
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getEntityTypesCall(@javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String namespace, @javax.annotation.Nullable String next,
      @javax.annotation.Nullable String limit, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/entityTypes";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (namespace != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getEntityTypesValidateBeforeCall(@javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String namespace, @javax.annotation.Nullable String next,
      @javax.annotation.Nullable String limit, final ApiCallback _callback) throws ApiException {
    return getEntityTypesCall(siteId, namespace, next, limit, _callback);

  }

  /**
   * Get EntityTypes Returns a list of entity types
   * 
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return GetEntityTypesResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetEntityTypesResponse getEntityTypes(@javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String namespace, @javax.annotation.Nullable String next,
      @javax.annotation.Nullable String limit) throws ApiException {
    ApiResponse<GetEntityTypesResponse> localVarResp =
        getEntityTypesWithHttpInfo(siteId, namespace, next, limit);
    return localVarResp.getData();
  }

  /**
   * Get EntityTypes Returns a list of entity types
   * 
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return ApiResponse&lt;GetEntityTypesResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetEntityTypesResponse> getEntityTypesWithHttpInfo(
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      @javax.annotation.Nullable String next, @javax.annotation.Nullable String limit)
      throws ApiException {
    okhttp3.Call localVarCall =
        getEntityTypesValidateBeforeCall(siteId, namespace, next, limit, null);
    Type localVarReturnType = new TypeToken<GetEntityTypesResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get EntityTypes (asynchronously) Returns a list of entity types
   * 
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param next Next page of results token (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getEntityTypesAsync(@javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String namespace, @javax.annotation.Nullable String next,
      @javax.annotation.Nullable String limit, final ApiCallback<GetEntityTypesResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        getEntityTypesValidateBeforeCall(siteId, namespace, next, limit, _callback);
    Type localVarReturnType = new TypeToken<GetEntityTypesResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for updateEntity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param entityId Entity Identifier (required)
   * @param updateEntityRequest (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateEntityCall(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull String entityId,
      @javax.annotation.Nonnull UpdateEntityRequest updateEntityRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = updateEntityRequest;

    // create path and map variables
    String localVarPath = "/entities/{entityTypeId}/{entityId}"
        .replace("{" + "entityTypeId" + "}",
            localVarApiClient.escapeString(entityTypeId.toString()))
        .replace("{" + "entityId" + "}", localVarApiClient.escapeString(entityId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (namespace != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("namespace", namespace));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateEntityValidateBeforeCall(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull String entityId,
      @javax.annotation.Nonnull UpdateEntityRequest updateEntityRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'entityTypeId' is set
    if (entityTypeId == null) {
      throw new ApiException(
          "Missing the required parameter 'entityTypeId' when calling updateEntity(Async)");
    }

    // verify the required parameter 'entityId' is set
    if (entityId == null) {
      throw new ApiException(
          "Missing the required parameter 'entityId' when calling updateEntity(Async)");
    }

    // verify the required parameter 'updateEntityRequest' is set
    if (updateEntityRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'updateEntityRequest' when calling updateEntity(Async)");
    }

    return updateEntityCall(entityTypeId, entityId, updateEntityRequest, siteId, namespace,
        _callback);

  }

  /**
   * Update Entity Updates a Entity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param entityId Entity Identifier (required)
   * @param updateEntityRequest (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @return UpdateResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public UpdateResponse updateEntity(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull String entityId,
      @javax.annotation.Nonnull UpdateEntityRequest updateEntityRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace)
      throws ApiException {
    ApiResponse<UpdateResponse> localVarResp =
        updateEntityWithHttpInfo(entityTypeId, entityId, updateEntityRequest, siteId, namespace);
    return localVarResp.getData();
  }

  /**
   * Update Entity Updates a Entity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param entityId Entity Identifier (required)
   * @param updateEntityRequest (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @return ApiResponse&lt;UpdateResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<UpdateResponse> updateEntityWithHttpInfo(
      @javax.annotation.Nonnull String entityTypeId, @javax.annotation.Nonnull String entityId,
      @javax.annotation.Nonnull UpdateEntityRequest updateEntityRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace)
      throws ApiException {
    okhttp3.Call localVarCall = updateEntityValidateBeforeCall(entityTypeId, entityId,
        updateEntityRequest, siteId, namespace, null);
    Type localVarReturnType = new TypeToken<UpdateResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Update Entity (asynchronously) Updates a Entity
   * 
   * @param entityTypeId EntityType Identifier (required)
   * @param entityId Entity Identifier (required)
   * @param updateEntityRequest (required)
   * @param siteId Site Identifier (optional)
   * @param namespace Namespace Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateEntityAsync(@javax.annotation.Nonnull String entityTypeId,
      @javax.annotation.Nonnull String entityId,
      @javax.annotation.Nonnull UpdateEntityRequest updateEntityRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String namespace,
      final ApiCallback<UpdateResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = updateEntityValidateBeforeCall(entityTypeId, entityId,
        updateEntityRequest, siteId, namespace, _callback);
    Type localVarReturnType = new TypeToken<UpdateResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}

/*
 * FormKiQ API Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You can
 * find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction FormKiQ
 * is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all
 * the API endpoints to build your Perfect Document Management Platform. FormKiQ API was built on
 * top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file
 * with any application that supports the OpenAPI specification. Open API OAuth Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.15.0 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.api;

import com.formkiq.client.invoker.ApiCallback;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.invoker.ApiResponse;
import com.formkiq.client.invoker.Configuration;
import com.formkiq.client.invoker.Pair;
import com.formkiq.client.invoker.ProgressRequestBody;
import com.formkiq.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.formkiq.client.model.AddDocumentOcrRequest;
import com.formkiq.client.model.AddDocumentOcrResponse;
import com.formkiq.client.model.DeleteResponse;
import com.formkiq.client.model.GetDocumentOcrResponse;
import com.formkiq.client.model.SetDocumentOcrRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentOcrApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public DocumentOcrApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DocumentOcrApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for addDocumentOcr
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param addDocumentOcrRequest (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentOcrCall(String documentId, String siteId,
      AddDocumentOcrRequest addDocumentOcrRequest, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addDocumentOcrRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/ocr".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addDocumentOcrValidateBeforeCall(String documentId, String siteId,
      AddDocumentOcrRequest addDocumentOcrRequest, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling addDocumentOcr(Async)");
    }

    return addDocumentOcrCall(documentId, siteId, addDocumentOcrRequest, _callback);

  }

  /**
   * Perform document ocr Document optical character recognition (OCR) request; extract text and
   * data from a document; Tesseract available for all editions, but Textract engine and tables and
   * forms options ONLY available with FormKiQ Pro and Enterprise
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param addDocumentOcrRequest (optional)
   * @return AddDocumentOcrResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public AddDocumentOcrResponse addDocumentOcr(String documentId, String siteId,
      AddDocumentOcrRequest addDocumentOcrRequest) throws ApiException {
    ApiResponse<AddDocumentOcrResponse> localVarResp =
        addDocumentOcrWithHttpInfo(documentId, siteId, addDocumentOcrRequest);
    return localVarResp.getData();
  }

  /**
   * Perform document ocr Document optical character recognition (OCR) request; extract text and
   * data from a document; Tesseract available for all editions, but Textract engine and tables and
   * forms options ONLY available with FormKiQ Pro and Enterprise
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param addDocumentOcrRequest (optional)
   * @return ApiResponse&lt;AddDocumentOcrResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddDocumentOcrResponse> addDocumentOcrWithHttpInfo(String documentId,
      String siteId, AddDocumentOcrRequest addDocumentOcrRequest) throws ApiException {
    okhttp3.Call localVarCall =
        addDocumentOcrValidateBeforeCall(documentId, siteId, addDocumentOcrRequest, null);
    Type localVarReturnType = new TypeToken<AddDocumentOcrResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Perform document ocr (asynchronously) Document optical character recognition (OCR) request;
   * extract text and data from a document; Tesseract available for all editions, but Textract
   * engine and tables and forms options ONLY available with FormKiQ Pro and Enterprise
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param addDocumentOcrRequest (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentOcrAsync(String documentId, String siteId,
      AddDocumentOcrRequest addDocumentOcrRequest,
      final ApiCallback<AddDocumentOcrResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        addDocumentOcrValidateBeforeCall(documentId, siteId, addDocumentOcrRequest, _callback);
    Type localVarReturnType = new TypeToken<AddDocumentOcrResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteDocumentOcr
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentOcrCall(String documentId, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/ocr".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteDocumentOcrValidateBeforeCall(String documentId, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteDocumentOcr(Async)");
    }

    return deleteDocumentOcrCall(documentId, siteId, _callback);

  }

  /**
   * Delete document ocr Delete a document&#39;s optical character recognition (OCR) result, if
   * exists; Tesseract available for all editions, but Textract engine and tables and forms options
   * ONLY available with FormKiQ Pro and Enterprise
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteResponse deleteDocumentOcr(String documentId, String siteId) throws ApiException {
    ApiResponse<DeleteResponse> localVarResp = deleteDocumentOcrWithHttpInfo(documentId, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete document ocr Delete a document&#39;s optical character recognition (OCR) result, if
   * exists; Tesseract available for all editions, but Textract engine and tables and forms options
   * ONLY available with FormKiQ Pro and Enterprise
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteResponse> deleteDocumentOcrWithHttpInfo(String documentId, String siteId)
      throws ApiException {
    okhttp3.Call localVarCall = deleteDocumentOcrValidateBeforeCall(documentId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete document ocr (asynchronously) Delete a document&#39;s optical character recognition
   * (OCR) result, if exists; Tesseract available for all editions, but Textract engine and tables
   * and forms options ONLY available with FormKiQ Pro and Enterprise
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentOcrAsync(String documentId, String siteId,
      final ApiCallback<DeleteResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = deleteDocumentOcrValidateBeforeCall(documentId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentOcr
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param contentUrl Whether to return a \&quot;contentUrl\&quot;, set value to &#39;true&#39;
   *        (optional)
   * @param text Returns raw &#39;text&#39; of OCR content. e.g. AWS Textract returns JSON, setting
   *        parameter to &#39;true&#39; converts JSON to Text (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentOcrCall(String documentId, String siteId, String contentUrl,
      String text, String shareKey, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/ocr".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (contentUrl != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentUrl", contentUrl));
    }

    if (text != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentOcrValidateBeforeCall(String documentId, String siteId,
      String contentUrl, String text, String shareKey, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocumentOcr(Async)");
    }

    return getDocumentOcrCall(documentId, siteId, contentUrl, text, shareKey, _callback);

  }

  /**
   * Get document ocr content Get a document&#39;s optical character recognition (OCR) result, if
   * exists; Tesseract available for all editions, but Textract engine and tables and forms options
   * ONLY available with FormKiQ Pro and Enterprise
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param contentUrl Whether to return a \&quot;contentUrl\&quot;, set value to &#39;true&#39;
   *        (optional)
   * @param text Returns raw &#39;text&#39; of OCR content. e.g. AWS Textract returns JSON, setting
   *        parameter to &#39;true&#39; converts JSON to Text (optional)
   * @param shareKey Share Identifier (optional)
   * @return GetDocumentOcrResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentOcrResponse getDocumentOcr(String documentId, String siteId, String contentUrl,
      String text, String shareKey) throws ApiException {
    ApiResponse<GetDocumentOcrResponse> localVarResp =
        getDocumentOcrWithHttpInfo(documentId, siteId, contentUrl, text, shareKey);
    return localVarResp.getData();
  }

  /**
   * Get document ocr content Get a document&#39;s optical character recognition (OCR) result, if
   * exists; Tesseract available for all editions, but Textract engine and tables and forms options
   * ONLY available with FormKiQ Pro and Enterprise
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param contentUrl Whether to return a \&quot;contentUrl\&quot;, set value to &#39;true&#39;
   *        (optional)
   * @param text Returns raw &#39;text&#39; of OCR content. e.g. AWS Textract returns JSON, setting
   *        parameter to &#39;true&#39; converts JSON to Text (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;GetDocumentOcrResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentOcrResponse> getDocumentOcrWithHttpInfo(String documentId,
      String siteId, String contentUrl, String text, String shareKey) throws ApiException {
    okhttp3.Call localVarCall =
        getDocumentOcrValidateBeforeCall(documentId, siteId, contentUrl, text, shareKey, null);
    Type localVarReturnType = new TypeToken<GetDocumentOcrResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get document ocr content (asynchronously) Get a document&#39;s optical character recognition
   * (OCR) result, if exists; Tesseract available for all editions, but Textract engine and tables
   * and forms options ONLY available with FormKiQ Pro and Enterprise
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param contentUrl Whether to return a \&quot;contentUrl\&quot;, set value to &#39;true&#39;
   *        (optional)
   * @param text Returns raw &#39;text&#39; of OCR content. e.g. AWS Textract returns JSON, setting
   *        parameter to &#39;true&#39; converts JSON to Text (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentOcrAsync(String documentId, String siteId, String contentUrl,
      String text, String shareKey, final ApiCallback<GetDocumentOcrResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        getDocumentOcrValidateBeforeCall(documentId, siteId, contentUrl, text, shareKey, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentOcrResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for setDocumentOcr
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param setDocumentOcrRequest (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentOcrCall(String documentId, String siteId,
      SetDocumentOcrRequest setDocumentOcrRequest, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = setDocumentOcrRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/ocr".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call setDocumentOcrValidateBeforeCall(String documentId, String siteId,
      SetDocumentOcrRequest setDocumentOcrRequest, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling setDocumentOcr(Async)");
    }

    return setDocumentOcrCall(documentId, siteId, setDocumentOcrRequest, _callback);

  }

  /**
   * Set document ocr result Set a document&#39;s optical character recognition (OCR) result for a
   * document; Tesseract available for all editions, but Textract engine and tables and forms
   * options ONLY available with FormKiQ Pro and Enterprise
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param setDocumentOcrRequest (optional)
   * @return AddDocumentOcrResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public AddDocumentOcrResponse setDocumentOcr(String documentId, String siteId,
      SetDocumentOcrRequest setDocumentOcrRequest) throws ApiException {
    ApiResponse<AddDocumentOcrResponse> localVarResp =
        setDocumentOcrWithHttpInfo(documentId, siteId, setDocumentOcrRequest);
    return localVarResp.getData();
  }

  /**
   * Set document ocr result Set a document&#39;s optical character recognition (OCR) result for a
   * document; Tesseract available for all editions, but Textract engine and tables and forms
   * options ONLY available with FormKiQ Pro and Enterprise
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param setDocumentOcrRequest (optional)
   * @return ApiResponse&lt;AddDocumentOcrResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddDocumentOcrResponse> setDocumentOcrWithHttpInfo(String documentId,
      String siteId, SetDocumentOcrRequest setDocumentOcrRequest) throws ApiException {
    okhttp3.Call localVarCall =
        setDocumentOcrValidateBeforeCall(documentId, siteId, setDocumentOcrRequest, null);
    Type localVarReturnType = new TypeToken<AddDocumentOcrResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Set document ocr result (asynchronously) Set a document&#39;s optical character recognition
   * (OCR) result for a document; Tesseract available for all editions, but Textract engine and
   * tables and forms options ONLY available with FormKiQ Pro and Enterprise
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param setDocumentOcrRequest (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentOcrAsync(String documentId, String siteId,
      SetDocumentOcrRequest setDocumentOcrRequest,
      final ApiCallback<AddDocumentOcrResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        setDocumentOcrValidateBeforeCall(documentId, siteId, setDocumentOcrRequest, _callback);
    Type localVarReturnType = new TypeToken<AddDocumentOcrResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}

/*
 * FormKiQ HTTP API Formkiq API: Document Management Platform API using OAuth(JWT) Authentication
 * You can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction
 * FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API
 * provides all the API endpoints to build your Perfect Document Management Platform. FormKiQ API
 * was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the
 * API spec file with any application that supports the OpenAPI specification. Open API OAuth
 * Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.12.1 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.api;

import com.formkiq.client.invoker.ApiCallback;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.invoker.ApiResponse;
import com.formkiq.client.invoker.Configuration;
import com.formkiq.client.invoker.Pair;
import com.formkiq.client.invoker.ProgressRequestBody;
import com.formkiq.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.formkiq.client.model.AddDocumentRequest;
import com.formkiq.client.model.AddDocumentResponse;
import com.formkiq.client.model.AddDocumentUploadRequest;
import com.formkiq.client.model.DocumentsCompressRequest;
import com.formkiq.client.model.DocumentsCompressResponse;
import com.formkiq.client.model.GetDocumentContentResponse;
import com.formkiq.client.model.GetDocumentResponse;
import com.formkiq.client.model.GetDocumentSyncResponse;
import com.formkiq.client.model.GetDocumentUrlResponse;
import com.formkiq.client.model.GetDocumentsResponse;
import com.formkiq.client.model.ValidationErrorsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumentsApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public DocumentsApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DocumentsApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for addDocument
   * 
   * @param addDocumentRequest (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentCall(AddDocumentRequest addDocumentRequest, String siteId,
      String shareKey, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addDocumentRequest;

    // create path and map variables
    String localVarPath = "/documents";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addDocumentValidateBeforeCall(AddDocumentRequest addDocumentRequest,
      String siteId, String shareKey, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'addDocumentRequest' is set
    if (addDocumentRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addDocumentRequest' when calling addDocument(Async)");
    }

    return addDocumentCall(addDocumentRequest, siteId, shareKey, _callback);

  }

  /**
   * Add new document Creates a new document; body may include document content if less than 5 MB
   * 
   * @param addDocumentRequest (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return AddDocumentResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public AddDocumentResponse addDocument(AddDocumentRequest addDocumentRequest, String siteId,
      String shareKey) throws ApiException {
    ApiResponse<AddDocumentResponse> localVarResp =
        addDocumentWithHttpInfo(addDocumentRequest, siteId, shareKey);
    return localVarResp.getData();
  }

  /**
   * Add new document Creates a new document; body may include document content if less than 5 MB
   * 
   * @param addDocumentRequest (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;AddDocumentResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddDocumentResponse> addDocumentWithHttpInfo(
      AddDocumentRequest addDocumentRequest, String siteId, String shareKey) throws ApiException {
    okhttp3.Call localVarCall =
        addDocumentValidateBeforeCall(addDocumentRequest, siteId, shareKey, null);
    Type localVarReturnType = new TypeToken<AddDocumentResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add new document (asynchronously) Creates a new document; body may include document content if
   * less than 5 MB
   * 
   * @param addDocumentRequest (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentAsync(AddDocumentRequest addDocumentRequest, String siteId,
      String shareKey, final ApiCallback<AddDocumentResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        addDocumentValidateBeforeCall(addDocumentRequest, siteId, shareKey, _callback);
    Type localVarReturnType = new TypeToken<AddDocumentResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for addDocumentUpload
   * 
   * @param addDocumentUploadRequest (required)
   * @param siteId Site Identifier (optional)
   * @param contentLength Indicates the size of the entity-body (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentUploadCall(AddDocumentUploadRequest addDocumentUploadRequest,
      String siteId, Integer contentLength, Integer duration, String shareKey,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addDocumentUploadRequest;

    // create path and map variables
    String localVarPath = "/documents/upload";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (contentLength != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentLength", contentLength));
    }

    if (duration != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addDocumentUploadValidateBeforeCall(
      AddDocumentUploadRequest addDocumentUploadRequest, String siteId, Integer contentLength,
      Integer duration, String shareKey, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'addDocumentUploadRequest' is set
    if (addDocumentUploadRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addDocumentUploadRequest' when calling addDocumentUpload(Async)");
    }

    return addDocumentUploadCall(addDocumentUploadRequest, siteId, contentLength, duration,
        shareKey, _callback);

  }

  /**
   * Add large document Returns a URL that can be used to upload document content and create a new
   * document, while allowing metadata to also be sent; this endpoint (whether GET or POST) is
   * required in order to add content that is larger than 5 MB
   * 
   * @param addDocumentUploadRequest (required)
   * @param siteId Site Identifier (optional)
   * @param contentLength Indicates the size of the entity-body (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @return GetDocumentUrlResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentUrlResponse addDocumentUpload(AddDocumentUploadRequest addDocumentUploadRequest,
      String siteId, Integer contentLength, Integer duration, String shareKey) throws ApiException {
    ApiResponse<GetDocumentUrlResponse> localVarResp = addDocumentUploadWithHttpInfo(
        addDocumentUploadRequest, siteId, contentLength, duration, shareKey);
    return localVarResp.getData();
  }

  /**
   * Add large document Returns a URL that can be used to upload document content and create a new
   * document, while allowing metadata to also be sent; this endpoint (whether GET or POST) is
   * required in order to add content that is larger than 5 MB
   * 
   * @param addDocumentUploadRequest (required)
   * @param siteId Site Identifier (optional)
   * @param contentLength Indicates the size of the entity-body (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;GetDocumentUrlResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentUrlResponse> addDocumentUploadWithHttpInfo(
      AddDocumentUploadRequest addDocumentUploadRequest, String siteId, Integer contentLength,
      Integer duration, String shareKey) throws ApiException {
    okhttp3.Call localVarCall = addDocumentUploadValidateBeforeCall(addDocumentUploadRequest,
        siteId, contentLength, duration, shareKey, null);
    Type localVarReturnType = new TypeToken<GetDocumentUrlResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add large document (asynchronously) Returns a URL that can be used to upload document content
   * and create a new document, while allowing metadata to also be sent; this endpoint (whether GET
   * or POST) is required in order to add content that is larger than 5 MB
   * 
   * @param addDocumentUploadRequest (required)
   * @param siteId Site Identifier (optional)
   * @param contentLength Indicates the size of the entity-body (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentUploadAsync(AddDocumentUploadRequest addDocumentUploadRequest,
      String siteId, Integer contentLength, Integer duration, String shareKey,
      final ApiCallback<GetDocumentUrlResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = addDocumentUploadValidateBeforeCall(addDocumentUploadRequest,
        siteId, contentLength, duration, shareKey, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentUrlResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for compressDocuments
   * 
   * @param documentsCompressRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call compressDocumentsCall(DocumentsCompressRequest documentsCompressRequest,
      String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = documentsCompressRequest;

    // create path and map variables
    String localVarPath = "/documents/compress";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call compressDocumentsValidateBeforeCall(
      DocumentsCompressRequest documentsCompressRequest, String siteId, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'documentsCompressRequest' is set
    if (documentsCompressRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'documentsCompressRequest' when calling compressDocuments(Async)");
    }

    return compressDocumentsCall(documentsCompressRequest, siteId, _callback);

  }

  /**
   * Compress multiple documents into a .zip file Compress documents into an .ZIP archive file, and
   * returns a S3 presigned url for the location of the archive file. The operation is async and
   * processing time depends on the number and size of documents included; a 404 status code is
   * returned until the file is ready.
   * 
   * @param documentsCompressRequest (required)
   * @param siteId Site Identifier (optional)
   * @return DocumentsCompressResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DocumentsCompressResponse compressDocuments(
      DocumentsCompressRequest documentsCompressRequest, String siteId) throws ApiException {
    ApiResponse<DocumentsCompressResponse> localVarResp =
        compressDocumentsWithHttpInfo(documentsCompressRequest, siteId);
    return localVarResp.getData();
  }

  /**
   * Compress multiple documents into a .zip file Compress documents into an .ZIP archive file, and
   * returns a S3 presigned url for the location of the archive file. The operation is async and
   * processing time depends on the number and size of documents included; a 404 status code is
   * returned until the file is ready.
   * 
   * @param documentsCompressRequest (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DocumentsCompressResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DocumentsCompressResponse> compressDocumentsWithHttpInfo(
      DocumentsCompressRequest documentsCompressRequest, String siteId) throws ApiException {
    okhttp3.Call localVarCall =
        compressDocumentsValidateBeforeCall(documentsCompressRequest, siteId, null);
    Type localVarReturnType = new TypeToken<DocumentsCompressResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Compress multiple documents into a .zip file (asynchronously) Compress documents into an .ZIP
   * archive file, and returns a S3 presigned url for the location of the archive file. The
   * operation is async and processing time depends on the number and size of documents included; a
   * 404 status code is returned until the file is ready.
   * 
   * @param documentsCompressRequest (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>201</td>
   *                        <td>201 CREATED</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call compressDocumentsAsync(DocumentsCompressRequest documentsCompressRequest,
      String siteId, final ApiCallback<DocumentsCompressResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        compressDocumentsValidateBeforeCall(documentsCompressRequest, siteId, _callback);
    Type localVarReturnType = new TypeToken<DocumentsCompressResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteDocument
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentCall(String documentId, String siteId,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteDocumentValidateBeforeCall(String documentId, String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteDocument(Async)");
    }

    return deleteDocumentCall(documentId, siteId, _callback);

  }

  /**
   * Delete document Delete a document
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public void deleteDocument(String documentId, String siteId) throws ApiException {
    deleteDocumentWithHttpInfo(documentId, siteId);
  }

  /**
   * Delete document Delete a document
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<Void> deleteDocumentWithHttpInfo(String documentId, String siteId)
      throws ApiException {
    okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(documentId, siteId, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Delete document (asynchronously) Delete a document
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentAsync(String documentId, String siteId,
      final ApiCallback<Void> _callback) throws ApiException {

    okhttp3.Call localVarCall = deleteDocumentValidateBeforeCall(documentId, siteId, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocument
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentCall(String documentId, String siteId, String shareKey,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentValidateBeforeCall(String documentId, String siteId,
      String shareKey, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocument(Async)");
    }

    return getDocumentCall(documentId, siteId, shareKey, _callback);

  }

  /**
   * Get document Retrieves a document&#39;s details, i.e., metadata
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return GetDocumentResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentResponse getDocument(String documentId, String siteId, String shareKey)
      throws ApiException {
    ApiResponse<GetDocumentResponse> localVarResp =
        getDocumentWithHttpInfo(documentId, siteId, shareKey);
    return localVarResp.getData();
  }

  /**
   * Get document Retrieves a document&#39;s details, i.e., metadata
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;GetDocumentResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentResponse> getDocumentWithHttpInfo(String documentId, String siteId,
      String shareKey) throws ApiException {
    okhttp3.Call localVarCall = getDocumentValidateBeforeCall(documentId, siteId, shareKey, null);
    Type localVarReturnType = new TypeToken<GetDocumentResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get document (asynchronously) Retrieves a document&#39;s details, i.e., metadata
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentAsync(String documentId, String siteId, String shareKey,
      final ApiCallback<GetDocumentResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getDocumentValidateBeforeCall(documentId, siteId, shareKey, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentContent
   * 
   * @param documentId Document Identifier (required)
   * @param versionKey Version Key (optional)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        * Location - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentContentCall(String documentId, String versionKey, String siteId,
      String shareKey, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/content".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (versionKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionKey", versionKey));
    }

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentContentValidateBeforeCall(String documentId, String versionKey,
      String siteId, String shareKey, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocumentContent(Async)");
    }

    return getDocumentContentCall(documentId, versionKey, siteId, shareKey, _callback);

  }

  /**
   * Get document&#39;s contents Get a document&#39;s contents. Certain content types, text/_*,
   * application/json, and application/x-www-form-urlencoded. return the \&quot;content\&quot;
   * field, while all other content types return a &#39;contentUrl&#39; for retrieving the content.
   * 
   * @param documentId Document Identifier (required)
   * @param versionKey Version Key (optional)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return GetDocumentContentResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        * Location - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentContentResponse getDocumentContent(String documentId, String versionKey,
      String siteId, String shareKey) throws ApiException {
    ApiResponse<GetDocumentContentResponse> localVarResp =
        getDocumentContentWithHttpInfo(documentId, versionKey, siteId, shareKey);
    return localVarResp.getData();
  }

  /**
   * Get document&#39;s contents Get a document&#39;s contents. Certain content types, text/_*,
   * application/json, and application/x-www-form-urlencoded. return the \&quot;content\&quot;
   * field, while all other content types return a &#39;contentUrl&#39; for retrieving the content.
   * 
   * @param documentId Document Identifier (required)
   * @param versionKey Version Key (optional)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;GetDocumentContentResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        * Location - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentContentResponse> getDocumentContentWithHttpInfo(String documentId,
      String versionKey, String siteId, String shareKey) throws ApiException {
    okhttp3.Call localVarCall =
        getDocumentContentValidateBeforeCall(documentId, versionKey, siteId, shareKey, null);
    Type localVarReturnType = new TypeToken<GetDocumentContentResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get document&#39;s contents (asynchronously) Get a document&#39;s contents. Certain content
   * types, text/_*, application/json, and application/x-www-form-urlencoded. return the
   * \&quot;content\&quot; field, while all other content types return a &#39;contentUrl&#39; for
   * retrieving the content.
   * 
   * @param documentId Document Identifier (required)
   * @param versionKey Version Key (optional)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        * Location - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentContentAsync(String documentId, String versionKey, String siteId,
      String shareKey, final ApiCallback<GetDocumentContentResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        getDocumentContentValidateBeforeCall(documentId, versionKey, siteId, shareKey, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentContentResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentIdUpload
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param contentLength Indicates the size of the entity-body (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentIdUploadCall(String documentId, String siteId,
      Integer contentLength, Integer duration, String shareKey, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/upload".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (contentLength != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentLength", contentLength));
    }

    if (duration != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentIdUploadValidateBeforeCall(String documentId, String siteId,
      Integer contentLength, Integer duration, String shareKey, final ApiCallback _callback)
      throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocumentIdUpload(Async)");
    }

    return getDocumentIdUploadCall(documentId, siteId, contentLength, duration, shareKey,
        _callback);

  }

  /**
   * Get url to update large document Returns a URL that can be used to upload documents for a
   * specific documentId; this endpoint is required in order to add content that is larger than 5
   * MB. If versions are enabled, this will create a new version of the document.
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param contentLength Indicates the size of the entity-body (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @return GetDocumentUrlResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentUrlResponse getDocumentIdUpload(String documentId, String siteId,
      Integer contentLength, Integer duration, String shareKey) throws ApiException {
    ApiResponse<GetDocumentUrlResponse> localVarResp =
        getDocumentIdUploadWithHttpInfo(documentId, siteId, contentLength, duration, shareKey);
    return localVarResp.getData();
  }

  /**
   * Get url to update large document Returns a URL that can be used to upload documents for a
   * specific documentId; this endpoint is required in order to add content that is larger than 5
   * MB. If versions are enabled, this will create a new version of the document.
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param contentLength Indicates the size of the entity-body (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;GetDocumentUrlResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentUrlResponse> getDocumentIdUploadWithHttpInfo(String documentId,
      String siteId, Integer contentLength, Integer duration, String shareKey) throws ApiException {
    okhttp3.Call localVarCall = getDocumentIdUploadValidateBeforeCall(documentId, siteId,
        contentLength, duration, shareKey, null);
    Type localVarReturnType = new TypeToken<GetDocumentUrlResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get url to update large document (asynchronously) Returns a URL that can be used to upload
   * documents for a specific documentId; this endpoint is required in order to add content that is
   * larger than 5 MB. If versions are enabled, this will create a new version of the document.
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param contentLength Indicates the size of the entity-body (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentIdUploadAsync(String documentId, String siteId,
      Integer contentLength, Integer duration, String shareKey,
      final ApiCallback<GetDocumentUrlResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getDocumentIdUploadValidateBeforeCall(documentId, siteId,
        contentLength, duration, shareKey, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentUrlResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentSyncs
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentSyncsCall(String documentId, String siteId, String limit,
      String shareKey, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/syncs".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentSyncsValidateBeforeCall(String documentId, String siteId,
      String limit, String shareKey, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocumentSyncs(Async)");
    }

    return getDocumentSyncsCall(documentId, siteId, limit, shareKey, _callback);

  }

  /**
   * Get document syncs Retrieve the document syncs with external services status
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param shareKey Share Identifier (optional)
   * @return GetDocumentSyncResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentSyncResponse getDocumentSyncs(String documentId, String siteId, String limit,
      String shareKey) throws ApiException {
    ApiResponse<GetDocumentSyncResponse> localVarResp =
        getDocumentSyncsWithHttpInfo(documentId, siteId, limit, shareKey);
    return localVarResp.getData();
  }

  /**
   * Get document syncs Retrieve the document syncs with external services status
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;GetDocumentSyncResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentSyncResponse> getDocumentSyncsWithHttpInfo(String documentId,
      String siteId, String limit, String shareKey) throws ApiException {
    okhttp3.Call localVarCall =
        getDocumentSyncsValidateBeforeCall(documentId, siteId, limit, shareKey, null);
    Type localVarReturnType = new TypeToken<GetDocumentSyncResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get document syncs (asynchronously) Retrieve the document syncs with external services status
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentSyncsAsync(String documentId, String siteId, String limit,
      String shareKey, final ApiCallback<GetDocumentSyncResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getDocumentSyncsValidateBeforeCall(documentId, siteId, limit, shareKey, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentSyncResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentUpload
   * 
   * @param path The upload file&#39;s path (optional)
   * @param siteId Site Identifier (optional)
   * @param contentLength Indicates the size of the entity-body (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentUploadCall(String path, String siteId, Integer contentLength,
      Integer duration, String shareKey, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/upload";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (path != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("path", path));
    }

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (contentLength != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentLength", contentLength));
    }

    if (duration != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentUploadValidateBeforeCall(String path, String siteId,
      Integer contentLength, Integer duration, String shareKey, final ApiCallback _callback)
      throws ApiException {
    return getDocumentUploadCall(path, siteId, contentLength, duration, shareKey, _callback);

  }

  /**
   * Get url to add large document Returns a URL that can be used to upload document content and
   * create a new document; this endpoint (whether GET or POST) is required in order to add content
   * that is larger than 5 MB
   * 
   * @param path The upload file&#39;s path (optional)
   * @param siteId Site Identifier (optional)
   * @param contentLength Indicates the size of the entity-body (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @return GetDocumentUrlResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentUrlResponse getDocumentUpload(String path, String siteId, Integer contentLength,
      Integer duration, String shareKey) throws ApiException {
    ApiResponse<GetDocumentUrlResponse> localVarResp =
        getDocumentUploadWithHttpInfo(path, siteId, contentLength, duration, shareKey);
    return localVarResp.getData();
  }

  /**
   * Get url to add large document Returns a URL that can be used to upload document content and
   * create a new document; this endpoint (whether GET or POST) is required in order to add content
   * that is larger than 5 MB
   * 
   * @param path The upload file&#39;s path (optional)
   * @param siteId Site Identifier (optional)
   * @param contentLength Indicates the size of the entity-body (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;GetDocumentUrlResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentUrlResponse> getDocumentUploadWithHttpInfo(String path,
      String siteId, Integer contentLength, Integer duration, String shareKey) throws ApiException {
    okhttp3.Call localVarCall =
        getDocumentUploadValidateBeforeCall(path, siteId, contentLength, duration, shareKey, null);
    Type localVarReturnType = new TypeToken<GetDocumentUrlResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get url to add large document (asynchronously) Returns a URL that can be used to upload
   * document content and create a new document; this endpoint (whether GET or POST) is required in
   * order to add content that is larger than 5 MB
   * 
   * @param path The upload file&#39;s path (optional)
   * @param siteId Site Identifier (optional)
   * @param contentLength Indicates the size of the entity-body (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentUploadAsync(String path, String siteId, Integer contentLength,
      Integer duration, String shareKey, final ApiCallback<GetDocumentUrlResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = getDocumentUploadValidateBeforeCall(path, siteId, contentLength,
        duration, shareKey, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentUrlResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentUrl
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param versionKey Version Key (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @param inline Set the Content-Disposition to inline (optional, default to false)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentUrlCall(String documentId, String siteId, String versionKey,
      Integer duration, String shareKey, Boolean inline, final ApiCallback _callback)
      throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/url".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (versionKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("versionKey", versionKey));
    }

    if (duration != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    if (inline != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("inline", inline));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentUrlValidateBeforeCall(String documentId, String siteId,
      String versionKey, Integer duration, String shareKey, Boolean inline,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocumentUrl(Async)");
    }

    return getDocumentUrlCall(documentId, siteId, versionKey, duration, shareKey, inline,
        _callback);

  }

  /**
   * Get document content url Returns a URL for the document&#39;s contents; this URL will expire
   * (the default is 48 hours)
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param versionKey Version Key (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @param inline Set the Content-Disposition to inline (optional, default to false)
   * @return GetDocumentUrlResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentUrlResponse getDocumentUrl(String documentId, String siteId, String versionKey,
      Integer duration, String shareKey, Boolean inline) throws ApiException {
    ApiResponse<GetDocumentUrlResponse> localVarResp =
        getDocumentUrlWithHttpInfo(documentId, siteId, versionKey, duration, shareKey, inline);
    return localVarResp.getData();
  }

  /**
   * Get document content url Returns a URL for the document&#39;s contents; this URL will expire
   * (the default is 48 hours)
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param versionKey Version Key (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @param inline Set the Content-Disposition to inline (optional, default to false)
   * @return ApiResponse&lt;GetDocumentUrlResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentUrlResponse> getDocumentUrlWithHttpInfo(String documentId,
      String siteId, String versionKey, Integer duration, String shareKey, Boolean inline)
      throws ApiException {
    okhttp3.Call localVarCall = getDocumentUrlValidateBeforeCall(documentId, siteId, versionKey,
        duration, shareKey, inline, null);
    Type localVarReturnType = new TypeToken<GetDocumentUrlResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get document content url (asynchronously) Returns a URL for the document&#39;s contents; this
   * URL will expire (the default is 48 hours)
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param versionKey Version Key (optional)
   * @param duration Indicates the number of hours request is valid for (optional)
   * @param shareKey Share Identifier (optional)
   * @param inline Set the Content-Disposition to inline (optional, default to false)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentUrlAsync(String documentId, String siteId, String versionKey,
      Integer duration, String shareKey, Boolean inline,
      final ApiCallback<GetDocumentUrlResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = getDocumentUrlValidateBeforeCall(documentId, siteId, versionKey,
        duration, shareKey, inline, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentUrlResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocuments
   * 
   * @param date Fetch documents inserted on a certain date (yyyy-MM-dd) (optional)
   * @param tz UTC offset to apply to date parameter (IE: -0600) (optional)
   * @param next Next page of results token (optional)
   * @param previous Previous page of results token (optional)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentsCall(String date, String tz, String next, String previous,
      String siteId, String limit, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (date != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
    }

    if (tz != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("tz", tz));
    }

    if (next != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("next", next));
    }

    if (previous != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("previous", previous));
    }

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentsValidateBeforeCall(String date, String tz, String next,
      String previous, String siteId, String limit, final ApiCallback _callback)
      throws ApiException {
    return getDocumentsCall(date, tz, next, previous, siteId, limit, _callback);

  }

  /**
   * Get Documents listing Returns a list of the most recent documents added, ordered by inserted,
   * descending
   * 
   * @param date Fetch documents inserted on a certain date (yyyy-MM-dd) (optional)
   * @param tz UTC offset to apply to date parameter (IE: -0600) (optional)
   * @param next Next page of results token (optional)
   * @param previous Previous page of results token (optional)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return GetDocumentsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentsResponse getDocuments(String date, String tz, String next, String previous,
      String siteId, String limit) throws ApiException {
    ApiResponse<GetDocumentsResponse> localVarResp =
        getDocumentsWithHttpInfo(date, tz, next, previous, siteId, limit);
    return localVarResp.getData();
  }

  /**
   * Get Documents listing Returns a list of the most recent documents added, ordered by inserted,
   * descending
   * 
   * @param date Fetch documents inserted on a certain date (yyyy-MM-dd) (optional)
   * @param tz UTC offset to apply to date parameter (IE: -0600) (optional)
   * @param next Next page of results token (optional)
   * @param previous Previous page of results token (optional)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return ApiResponse&lt;GetDocumentsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentsResponse> getDocumentsWithHttpInfo(String date, String tz,
      String next, String previous, String siteId, String limit) throws ApiException {
    okhttp3.Call localVarCall =
        getDocumentsValidateBeforeCall(date, tz, next, previous, siteId, limit, null);
    Type localVarReturnType = new TypeToken<GetDocumentsResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get Documents listing (asynchronously) Returns a list of the most recent documents added,
   * ordered by inserted, descending
   * 
   * @param date Fetch documents inserted on a certain date (yyyy-MM-dd) (optional)
   * @param tz UTC offset to apply to date parameter (IE: -0600) (optional)
   * @param next Next page of results token (optional)
   * @param previous Previous page of results token (optional)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentsAsync(String date, String tz, String next, String previous,
      String siteId, String limit, final ApiCallback<GetDocumentsResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        getDocumentsValidateBeforeCall(date, tz, next, previous, siteId, limit, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentsResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for updateDocument
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentRequest (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateDocumentCall(String documentId, AddDocumentRequest addDocumentRequest,
      String siteId, String shareKey, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addDocumentRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateDocumentValidateBeforeCall(String documentId,
      AddDocumentRequest addDocumentRequest, String siteId, String shareKey,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling updateDocument(Async)");
    }

    // verify the required parameter 'addDocumentRequest' is set
    if (addDocumentRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'addDocumentRequest' when calling updateDocument(Async)");
    }

    return updateDocumentCall(documentId, addDocumentRequest, siteId, shareKey, _callback);

  }

  /**
   * Update document Update a document&#39;s details, i.e., metadata
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentRequest (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return AddDocumentResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public AddDocumentResponse updateDocument(String documentId,
      AddDocumentRequest addDocumentRequest, String siteId, String shareKey) throws ApiException {
    ApiResponse<AddDocumentResponse> localVarResp =
        updateDocumentWithHttpInfo(documentId, addDocumentRequest, siteId, shareKey);
    return localVarResp.getData();
  }

  /**
   * Update document Update a document&#39;s details, i.e., metadata
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentRequest (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;AddDocumentResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddDocumentResponse> updateDocumentWithHttpInfo(String documentId,
      AddDocumentRequest addDocumentRequest, String siteId, String shareKey) throws ApiException {
    okhttp3.Call localVarCall =
        updateDocumentValidateBeforeCall(documentId, addDocumentRequest, siteId, shareKey, null);
    Type localVarReturnType = new TypeToken<AddDocumentResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Update document (asynchronously) Update a document&#39;s details, i.e., metadata
   * 
   * @param documentId Document Identifier (required)
   * @param addDocumentRequest (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table summary="Response Details" border="1">
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateDocumentAsync(String documentId, AddDocumentRequest addDocumentRequest,
      String siteId, String shareKey, final ApiCallback<AddDocumentResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = updateDocumentValidateBeforeCall(documentId, addDocumentRequest,
        siteId, shareKey, _callback);
    Type localVarReturnType = new TypeToken<AddDocumentResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}

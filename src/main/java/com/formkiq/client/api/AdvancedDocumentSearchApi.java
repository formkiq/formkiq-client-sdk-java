/*
 * FormKiQ API JWT Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You
 * can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction
 * FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API
 * provides all the API endpoints to build your Perfect Document Management Platform. FormKiQ API
 * was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the
 * API spec file with any application that supports the OpenAPI specification. Open API OAuth
 * Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.17.1 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.api;

import com.formkiq.client.invoker.ApiCallback;
import com.formkiq.client.invoker.ApiClient;
import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.invoker.ApiResponse;
import com.formkiq.client.invoker.Configuration;
import com.formkiq.client.invoker.Pair;
import com.formkiq.client.invoker.ProgressRequestBody;
import com.formkiq.client.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.formkiq.client.model.AddDocumentFulltextRequest;
import com.formkiq.client.model.AddDocumentFulltextResponse;
import com.formkiq.client.model.DeleteFulltextResponse;
import com.formkiq.client.model.DocumentFulltextRequest;
import com.formkiq.client.model.DocumentFulltextResponse;
import com.formkiq.client.model.GetDocumentFulltextResponse;
import com.formkiq.client.model.QueryFulltextResponse;
import com.formkiq.client.model.SetDocumentFulltextRequest;
import com.formkiq.client.model.SetDocumentFulltextResponse;
import com.formkiq.client.model.UpdateDocumentFulltextRequest;
import com.formkiq.client.model.UpdateDocumentFulltextResponse;
import com.formkiq.client.model.ValidationErrorsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AdvancedDocumentSearchApi {
  private ApiClient localVarApiClient;
  private int localHostIndex;
  private String localCustomBaseUrl;

  public AdvancedDocumentSearchApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AdvancedDocumentSearchApi(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return localVarApiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.localVarApiClient = apiClient;
  }

  public int getHostIndex() {
    return localHostIndex;
  }

  public void setHostIndex(int hostIndex) {
    this.localHostIndex = hostIndex;
  }

  public String getCustomBaseUrl() {
    return localCustomBaseUrl;
  }

  public void setCustomBaseUrl(String customBaseUrl) {
    this.localCustomBaseUrl = customBaseUrl;
  }

  /**
   * Build call for addDocumentFulltext
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param addDocumentFulltextRequest (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentFulltextCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable AddDocumentFulltextRequest addDocumentFulltextRequest,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = addDocumentFulltextRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/fulltext".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call addDocumentFulltextValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable AddDocumentFulltextRequest addDocumentFulltextRequest,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling addDocumentFulltext(Async)");
    }

    return addDocumentFulltextCall(documentId, siteId, addDocumentFulltextRequest, _callback);

  }

  /**
   * Add document&#39;s full-text Add a document to OpenSearch; available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param addDocumentFulltextRequest (optional)
   * @return AddDocumentFulltextResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public AddDocumentFulltextResponse addDocumentFulltext(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable AddDocumentFulltextRequest addDocumentFulltextRequest)
      throws ApiException {
    ApiResponse<AddDocumentFulltextResponse> localVarResp =
        addDocumentFulltextWithHttpInfo(documentId, siteId, addDocumentFulltextRequest);
    return localVarResp.getData();
  }

  /**
   * Add document&#39;s full-text Add a document to OpenSearch; available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param addDocumentFulltextRequest (optional)
   * @return ApiResponse&lt;AddDocumentFulltextResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<AddDocumentFulltextResponse> addDocumentFulltextWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable AddDocumentFulltextRequest addDocumentFulltextRequest)
      throws ApiException {
    okhttp3.Call localVarCall =
        addDocumentFulltextValidateBeforeCall(documentId, siteId, addDocumentFulltextRequest, null);
    Type localVarReturnType = new TypeToken<AddDocumentFulltextResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Add document&#39;s full-text (asynchronously) Add a document to OpenSearch; available as an
   * Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param addDocumentFulltextRequest (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call addDocumentFulltextAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable AddDocumentFulltextRequest addDocumentFulltextRequest,
      final ApiCallback<AddDocumentFulltextResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = addDocumentFulltextValidateBeforeCall(documentId, siteId,
        addDocumentFulltextRequest, _callback);
    Type localVarReturnType = new TypeToken<AddDocumentFulltextResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteDocumentFulltext
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentFulltextCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/fulltext".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteDocumentFulltextValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteDocumentFulltext(Async)");
    }

    return deleteDocumentFulltextCall(documentId, siteId, _callback);

  }

  /**
   * Delete document full-text Remove full text search for a document from OpenSearch; available as
   * an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return DeleteFulltextResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public DeleteFulltextResponse deleteDocumentFulltext(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId) throws ApiException {
    ApiResponse<DeleteFulltextResponse> localVarResp =
        deleteDocumentFulltextWithHttpInfo(documentId, siteId);
    return localVarResp.getData();
  }

  /**
   * Delete document full-text Remove full text search for a document from OpenSearch; available as
   * an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;DeleteFulltextResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DeleteFulltextResponse> deleteDocumentFulltextWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId)
      throws ApiException {
    okhttp3.Call localVarCall = deleteDocumentFulltextValidateBeforeCall(documentId, siteId, null);
    Type localVarReturnType = new TypeToken<DeleteFulltextResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Delete document full-text (asynchronously) Remove full text search for a document from
   * OpenSearch; available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentFulltextAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId, final ApiCallback<DeleteFulltextResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall =
        deleteDocumentFulltextValidateBeforeCall(documentId, siteId, _callback);
    Type localVarReturnType = new TypeToken<DeleteFulltextResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteDocumentFulltextTag
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentFulltextTagCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/fulltext/tags/{tagKey}"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
        .replace("{" + "tagKey" + "}", localVarApiClient.escapeString(tagKey.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteDocumentFulltextTagValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String shareKey,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteDocumentFulltextTag(Async)");
    }

    // verify the required parameter 'tagKey' is set
    if (tagKey == null) {
      throw new ApiException(
          "Missing the required parameter 'tagKey' when calling deleteDocumentFulltextTag(Async)");
    }

    return deleteDocumentFulltextTagCall(documentId, tagKey, siteId, shareKey, _callback);

  }

  /**
   * Delete document full-text tag Remove document tags from OpenSearch; available as an Add-On
   * Module
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public void deleteDocumentFulltextTag(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey) throws ApiException {
    deleteDocumentFulltextTagWithHttpInfo(documentId, tagKey, siteId, shareKey);
  }

  /**
   * Delete document full-text tag Remove document tags from OpenSearch; available as an Add-On
   * Module
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<Void> deleteDocumentFulltextTagWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String shareKey)
      throws ApiException {
    okhttp3.Call localVarCall =
        deleteDocumentFulltextTagValidateBeforeCall(documentId, tagKey, siteId, shareKey, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Delete document full-text tag (asynchronously) Remove document tags from OpenSearch; available
   * as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentFulltextTagAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = deleteDocumentFulltextTagValidateBeforeCall(documentId, tagKey,
        siteId, shareKey, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }

  /**
   * Build call for deleteDocumentFulltextTagAndValue
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param tagValue Tag Key Value (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentFulltextTagAndValueCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nonnull String tagValue, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/fulltext/tags/{tagKey}/{tagValue}"
        .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()))
        .replace("{" + "tagKey" + "}", localVarApiClient.escapeString(tagKey.toString()))
        .replace("{" + "tagValue" + "}", localVarApiClient.escapeString(tagValue.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteDocumentFulltextTagAndValueValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nonnull String tagValue, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling deleteDocumentFulltextTagAndValue(Async)");
    }

    // verify the required parameter 'tagKey' is set
    if (tagKey == null) {
      throw new ApiException(
          "Missing the required parameter 'tagKey' when calling deleteDocumentFulltextTagAndValue(Async)");
    }

    // verify the required parameter 'tagValue' is set
    if (tagValue == null) {
      throw new ApiException(
          "Missing the required parameter 'tagValue' when calling deleteDocumentFulltextTagAndValue(Async)");
    }

    return deleteDocumentFulltextTagAndValueCall(documentId, tagKey, tagValue, siteId, shareKey,
        _callback);

  }

  /**
   * Delete document full-text tag/value Remove document tag/value from OpenSearch; available as an
   * Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param tagValue Tag Key Value (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public void deleteDocumentFulltextTagAndValue(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nonnull String tagKey, @javax.annotation.Nonnull String tagValue,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String shareKey)
      throws ApiException {
    deleteDocumentFulltextTagAndValueWithHttpInfo(documentId, tagKey, tagValue, siteId, shareKey);
  }

  /**
   * Delete document full-text tag/value Remove document tag/value from OpenSearch; available as an
   * Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param tagValue Tag Key Value (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<Void> deleteDocumentFulltextTagAndValueWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nonnull String tagValue, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey) throws ApiException {
    okhttp3.Call localVarCall = deleteDocumentFulltextTagAndValueValidateBeforeCall(documentId,
        tagKey, tagValue, siteId, shareKey, null);
    return localVarApiClient.execute(localVarCall);
  }

  /**
   * Delete document full-text tag/value (asynchronously) Remove document tag/value from OpenSearch;
   * available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param tagKey Tag Key (required)
   * @param tagValue Tag Key Value (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call deleteDocumentFulltextTagAndValueAsync(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nonnull String tagKey,
      @javax.annotation.Nonnull String tagValue, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey, final ApiCallback<Void> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = deleteDocumentFulltextTagAndValueValidateBeforeCall(documentId,
        tagKey, tagValue, siteId, shareKey, _callback);
    localVarApiClient.executeAsync(localVarCall, _callback);
    return localVarCall;
  }

  /**
   * Build call for getDocumentFulltext
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentFulltextCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String shareKey,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/fulltext".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (shareKey != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("shareKey", shareKey));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getDocumentFulltextValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling getDocumentFulltext(Async)");
    }

    return getDocumentFulltextCall(documentId, siteId, shareKey, _callback);

  }

  /**
   * Get document&#39;s full-text Retrieve an OpenSearch document&#39;s details, i.e., metadata
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return GetDocumentFulltextResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public GetDocumentFulltextResponse getDocumentFulltext(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey) throws ApiException {
    ApiResponse<GetDocumentFulltextResponse> localVarResp =
        getDocumentFulltextWithHttpInfo(documentId, siteId, shareKey);
    return localVarResp.getData();
  }

  /**
   * Get document&#39;s full-text Retrieve an OpenSearch document&#39;s details, i.e., metadata
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @return ApiResponse&lt;GetDocumentFulltextResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<GetDocumentFulltextResponse> getDocumentFulltextWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable String shareKey) throws ApiException {
    okhttp3.Call localVarCall =
        getDocumentFulltextValidateBeforeCall(documentId, siteId, shareKey, null);
    Type localVarReturnType = new TypeToken<GetDocumentFulltextResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Get document&#39;s full-text (asynchronously) Retrieve an OpenSearch document&#39;s details,
   * i.e., metadata
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param shareKey Share Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call getDocumentFulltextAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String shareKey,
      final ApiCallback<GetDocumentFulltextResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        getDocumentFulltextValidateBeforeCall(documentId, siteId, shareKey, _callback);
    Type localVarReturnType = new TypeToken<GetDocumentFulltextResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for queryFulltext
   * 
   * @param body (required)
   * @param siteId Site Identifier (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call queryFulltextCall(@javax.annotation.Nonnull Object body,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/queryFulltext";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call queryFulltextValidateBeforeCall(@javax.annotation.Nonnull Object body,
      @javax.annotation.Nullable String siteId, final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(
          "Missing the required parameter 'body' when calling queryFulltext(Async)");
    }

    return queryFulltextCall(body, siteId, _callback);

  }

  /**
   * Direct opensearch search API Endpoint for allowing custom, complex queries using the OpenSearch
   * search API (https://opensearch.org/docs/latest/opensearch/rest-api/search/); available as an
   * Add-On Module Example Request Body: { \&quot;query\&quot;: { \&quot;match_all\&quot;: {} }}
   * 
   * @param body (required)
   * @param siteId Site Identifier (optional)
   * @return QueryFulltextResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public QueryFulltextResponse queryFulltext(@javax.annotation.Nonnull Object body,
      @javax.annotation.Nullable String siteId) throws ApiException {
    ApiResponse<QueryFulltextResponse> localVarResp = queryFulltextWithHttpInfo(body, siteId);
    return localVarResp.getData();
  }

  /**
   * Direct opensearch search API Endpoint for allowing custom, complex queries using the OpenSearch
   * search API (https://opensearch.org/docs/latest/opensearch/rest-api/search/); available as an
   * Add-On Module Example Request Body: { \&quot;query\&quot;: { \&quot;match_all\&quot;: {} }}
   * 
   * @param body (required)
   * @param siteId Site Identifier (optional)
   * @return ApiResponse&lt;QueryFulltextResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<QueryFulltextResponse> queryFulltextWithHttpInfo(
      @javax.annotation.Nonnull Object body, @javax.annotation.Nullable String siteId)
      throws ApiException {
    okhttp3.Call localVarCall = queryFulltextValidateBeforeCall(body, siteId, null);
    Type localVarReturnType = new TypeToken<QueryFulltextResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Direct opensearch search API (asynchronously) Endpoint for allowing custom, complex queries
   * using the OpenSearch search API
   * (https://opensearch.org/docs/latest/opensearch/rest-api/search/); available as an Add-On Module
   * Example Request Body: { \&quot;query\&quot;: { \&quot;match_all\&quot;: {} }}
   * 
   * @param body (required)
   * @param siteId Site Identifier (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call queryFulltextAsync(@javax.annotation.Nonnull Object body,
      @javax.annotation.Nullable String siteId, final ApiCallback<QueryFulltextResponse> _callback)
      throws ApiException {

    okhttp3.Call localVarCall = queryFulltextValidateBeforeCall(body, siteId, _callback);
    Type localVarReturnType = new TypeToken<QueryFulltextResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for searchFulltext
   * 
   * @param documentFulltextRequest (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call searchFulltextCall(
      @javax.annotation.Nonnull DocumentFulltextRequest documentFulltextRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = documentFulltextRequest;

    // create path and map variables
    String localVarPath = "/searchFulltext";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    if (limit != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call searchFulltextValidateBeforeCall(
      @javax.annotation.Nonnull DocumentFulltextRequest documentFulltextRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentFulltextRequest' is set
    if (documentFulltextRequest == null) {
      throw new ApiException(
          "Missing the required parameter 'documentFulltextRequest' when calling searchFulltext(Async)");
    }

    return searchFulltextCall(documentFulltextRequest, siteId, limit, _callback);

  }

  /**
   * Document full-text search Document full-text search (and more robust multi-tag search queries,
   * powered by OpenSearch); available as an Add-On Module
   * 
   * @param documentFulltextRequest (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return DocumentFulltextResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public DocumentFulltextResponse searchFulltext(
      @javax.annotation.Nonnull DocumentFulltextRequest documentFulltextRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit)
      throws ApiException {
    ApiResponse<DocumentFulltextResponse> localVarResp =
        searchFulltextWithHttpInfo(documentFulltextRequest, siteId, limit);
    return localVarResp.getData();
  }

  /**
   * Document full-text search Document full-text search (and more robust multi-tag search queries,
   * powered by OpenSearch); available as an Add-On Module
   * 
   * @param documentFulltextRequest (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @return ApiResponse&lt;DocumentFulltextResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<DocumentFulltextResponse> searchFulltextWithHttpInfo(
      @javax.annotation.Nonnull DocumentFulltextRequest documentFulltextRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit)
      throws ApiException {
    okhttp3.Call localVarCall =
        searchFulltextValidateBeforeCall(documentFulltextRequest, siteId, limit, null);
    Type localVarReturnType = new TypeToken<DocumentFulltextResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Document full-text search (asynchronously) Document full-text search (and more robust multi-tag
   * search queries, powered by OpenSearch); available as an Add-On Module
   * 
   * @param documentFulltextRequest (required)
   * @param siteId Site Identifier (optional)
   * @param limit Limit Results (optional, default to 10)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        <tr>
   *                        <td>400</td>
   *                        <td>400 OK</td>
   *                        <td>-</td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call searchFulltextAsync(
      @javax.annotation.Nonnull DocumentFulltextRequest documentFulltextRequest,
      @javax.annotation.Nullable String siteId, @javax.annotation.Nullable String limit,
      final ApiCallback<DocumentFulltextResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall =
        searchFulltextValidateBeforeCall(documentFulltextRequest, siteId, limit, _callback);
    Type localVarReturnType = new TypeToken<DocumentFulltextResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for setDocumentFulltext
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param setDocumentFulltextRequest (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentFulltextCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable SetDocumentFulltextRequest setDocumentFulltextRequest,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = setDocumentFulltextRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/fulltext".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call setDocumentFulltextValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable SetDocumentFulltextRequest setDocumentFulltextRequest,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling setDocumentFulltext(Async)");
    }

    return setDocumentFulltextCall(documentId, siteId, setDocumentFulltextRequest, _callback);

  }

  /**
   * Set document&#39;s full-text Set all text/tags found within a document to OpenSearch; available
   * as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param setDocumentFulltextRequest (optional)
   * @return SetDocumentFulltextResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public SetDocumentFulltextResponse setDocumentFulltext(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable SetDocumentFulltextRequest setDocumentFulltextRequest)
      throws ApiException {
    ApiResponse<SetDocumentFulltextResponse> localVarResp =
        setDocumentFulltextWithHttpInfo(documentId, siteId, setDocumentFulltextRequest);
    return localVarResp.getData();
  }

  /**
   * Set document&#39;s full-text Set all text/tags found within a document to OpenSearch; available
   * as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param setDocumentFulltextRequest (optional)
   * @return ApiResponse&lt;SetDocumentFulltextResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<SetDocumentFulltextResponse> setDocumentFulltextWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable SetDocumentFulltextRequest setDocumentFulltextRequest)
      throws ApiException {
    okhttp3.Call localVarCall =
        setDocumentFulltextValidateBeforeCall(documentId, siteId, setDocumentFulltextRequest, null);
    Type localVarReturnType = new TypeToken<SetDocumentFulltextResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Set document&#39;s full-text (asynchronously) Set all text/tags found within a document to
   * OpenSearch; available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param setDocumentFulltextRequest (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call setDocumentFulltextAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable SetDocumentFulltextRequest setDocumentFulltextRequest,
      final ApiCallback<SetDocumentFulltextResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = setDocumentFulltextValidateBeforeCall(documentId, siteId,
        setDocumentFulltextRequest, _callback);
    Type localVarReturnType = new TypeToken<SetDocumentFulltextResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }

  /**
   * Build call for updateDocumentFulltext
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param updateDocumentFulltextRequest (optional)
   * @param _callback Callback for upload/download progress
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateDocumentFulltextCall(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable UpdateDocumentFulltextRequest updateDocumentFulltextRequest,
      final ApiCallback _callback) throws ApiException {
    String basePath = null;
    // Operation Servers
    String[] localBasePaths = new String[] {};

    // Determine Base Path to Use
    if (localCustomBaseUrl != null) {
      basePath = localCustomBaseUrl;
    } else if (localBasePaths.length > 0) {
      basePath = localBasePaths[localHostIndex];
    } else {
      basePath = null;
    }

    Object localVarPostBody = updateDocumentFulltextRequest;

    // create path and map variables
    String localVarPath = "/documents/{documentId}/fulltext".replace("{" + "documentId" + "}",
        localVarApiClient.escapeString(documentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    if (siteId != null) {
      localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
    }

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) {
      localVarHeaderParams.put("Accept", localVarAccept);
    }

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType =
        localVarApiClient.selectHeaderContentType(localVarContentTypes);
    if (localVarContentType != null) {
      localVarHeaderParams.put("Content-Type", localVarContentType);
    }

    String[] localVarAuthNames = new String[] {"AWS4Auth"};
    return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams,
        localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams,
        localVarFormParams, localVarAuthNames, _callback);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateDocumentFulltextValidateBeforeCall(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable UpdateDocumentFulltextRequest updateDocumentFulltextRequest,
      final ApiCallback _callback) throws ApiException {
    // verify the required parameter 'documentId' is set
    if (documentId == null) {
      throw new ApiException(
          "Missing the required parameter 'documentId' when calling updateDocumentFulltext(Async)");
    }

    return updateDocumentFulltextCall(documentId, siteId, updateDocumentFulltextRequest, _callback);

  }

  /**
   * Update document&#39;s full-text Update a document in OpenSearch; available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param updateDocumentFulltextRequest (optional)
   * @return UpdateDocumentFulltextResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public UpdateDocumentFulltextResponse updateDocumentFulltext(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable UpdateDocumentFulltextRequest updateDocumentFulltextRequest)
      throws ApiException {
    ApiResponse<UpdateDocumentFulltextResponse> localVarResp =
        updateDocumentFulltextWithHttpInfo(documentId, siteId, updateDocumentFulltextRequest);
    return localVarResp.getData();
  }

  /**
   * Update document&#39;s full-text Update a document in OpenSearch; available as an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param updateDocumentFulltextRequest (optional)
   * @return ApiResponse&lt;UpdateDocumentFulltextResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *         response body
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public ApiResponse<UpdateDocumentFulltextResponse> updateDocumentFulltextWithHttpInfo(
      @javax.annotation.Nonnull String documentId, @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable UpdateDocumentFulltextRequest updateDocumentFulltextRequest)
      throws ApiException {
    okhttp3.Call localVarCall = updateDocumentFulltextValidateBeforeCall(documentId, siteId,
        updateDocumentFulltextRequest, null);
    Type localVarReturnType = new TypeToken<UpdateDocumentFulltextResponse>() {}.getType();
    return localVarApiClient.execute(localVarCall, localVarReturnType);
  }

  /**
   * Update document&#39;s full-text (asynchronously) Update a document in OpenSearch; available as
   * an Add-On Module
   * 
   * @param documentId Document Identifier (required)
   * @param siteId Site Identifier (optional)
   * @param updateDocumentFulltextRequest (optional)
   * @param _callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   * @http.response.details
   *                        <table border="1">
   *                        <caption>Response Details</caption>
   *                        <tr>
   *                        <td>Status Code</td>
   *                        <td>Description</td>
   *                        <td>Response Headers</td>
   *                        </tr>
   *                        <tr>
   *                        <td>200</td>
   *                        <td>200 OK</td>
   *                        <td>* Access-Control-Allow-Origin - <br>
   *                        * Access-Control-Allow-Methods - <br>
   *                        * Access-Control-Allow-Headers - <br>
   *                        </td>
   *                        </tr>
   *                        </table>
   */
  public okhttp3.Call updateDocumentFulltextAsync(@javax.annotation.Nonnull String documentId,
      @javax.annotation.Nullable String siteId,
      @javax.annotation.Nullable UpdateDocumentFulltextRequest updateDocumentFulltextRequest,
      final ApiCallback<UpdateDocumentFulltextResponse> _callback) throws ApiException {

    okhttp3.Call localVarCall = updateDocumentFulltextValidateBeforeCall(documentId, siteId,
        updateDocumentFulltextRequest, _callback);
    Type localVarReturnType = new TypeToken<UpdateDocumentFulltextResponse>() {}.getType();
    localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
    return localVarCall;
  }
}

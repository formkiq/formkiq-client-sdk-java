/*
 * FormKiQ API Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You can
 * find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction FormKiQ
 * is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all
 * the API endpoints to build your Perfect Document Management Platform. FormKiQ API was built on
 * top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file
 * with any application that supports the OpenAPI specification. Open API OAuth Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.16.0 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.model;

import java.util.Objects;
import com.formkiq.client.model.DocusignCarbonCopy;
import com.formkiq.client.model.DocusignRecipientTab;
import com.formkiq.client.model.DocusignRequestStatus;
import com.formkiq.client.model.DocusignSigner;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.formkiq.client.invoker.JSON;

/**
 * AddDocusignRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2024-09-30T12:37:05.696833-05:00[America/Chicago]",
    comments = "Generator version: 7.8.0")
public class AddDocusignRequest {
  public static final String SERIALIZED_NAME_EMAIL_SUBJECT = "emailSubject";
  @SerializedName(SERIALIZED_NAME_EMAIL_SUBJECT)
  private String emailSubject;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private DocusignRequestStatus status;

  public static final String SERIALIZED_NAME_DEVELOPMENT_MODE = "developmentMode";
  @SerializedName(SERIALIZED_NAME_DEVELOPMENT_MODE)
  private Boolean developmentMode;

  public static final String SERIALIZED_NAME_SIGNERS = "signers";
  @SerializedName(SERIALIZED_NAME_SIGNERS)
  private List<DocusignSigner> signers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CARBON_COPIES = "carbonCopies";
  @SerializedName(SERIALIZED_NAME_CARBON_COPIES)
  private List<DocusignCarbonCopy> carbonCopies = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECIPIENT_TABS = "recipientTabs";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_TABS)
  private List<DocusignRecipientTab> recipientTabs = new ArrayList<>();

  public AddDocusignRequest() {}

  public AddDocusignRequest emailSubject(String emailSubject) {
    this.emailSubject = emailSubject;
    return this;
  }

  /**
   * Email Subject
   * 
   * @return emailSubject
   */
  @javax.annotation.Nullable
  public String getEmailSubject() {
    return emailSubject;
  }

  public void setEmailSubject(String emailSubject) {
    this.emailSubject = emailSubject;
  }


  public AddDocusignRequest status(DocusignRequestStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * 
   * @return status
   */
  @javax.annotation.Nullable
  public DocusignRequestStatus getStatus() {
    return status;
  }

  public void setStatus(DocusignRequestStatus status) {
    this.status = status;
  }


  public AddDocusignRequest developmentMode(Boolean developmentMode) {
    this.developmentMode = developmentMode;
    return this;
  }

  /**
   * Whether to enable developer mode
   * 
   * @return developmentMode
   */
  @javax.annotation.Nullable
  public Boolean getDevelopmentMode() {
    return developmentMode;
  }

  public void setDevelopmentMode(Boolean developmentMode) {
    this.developmentMode = developmentMode;
  }


  public AddDocusignRequest signers(List<DocusignSigner> signers) {
    this.signers = signers;
    return this;
  }

  public AddDocusignRequest addSignersItem(DocusignSigner signersItem) {
    if (this.signers == null) {
      this.signers = new ArrayList<>();
    }
    this.signers.add(signersItem);
    return this;
  }

  /**
   * List of DocuSign Signers
   * 
   * @return signers
   */
  @javax.annotation.Nullable
  public List<DocusignSigner> getSigners() {
    return signers;
  }

  public void setSigners(List<DocusignSigner> signers) {
    this.signers = signers;
  }


  public AddDocusignRequest carbonCopies(List<DocusignCarbonCopy> carbonCopies) {
    this.carbonCopies = carbonCopies;
    return this;
  }

  public AddDocusignRequest addCarbonCopiesItem(DocusignCarbonCopy carbonCopiesItem) {
    if (this.carbonCopies == null) {
      this.carbonCopies = new ArrayList<>();
    }
    this.carbonCopies.add(carbonCopiesItem);
    return this;
  }

  /**
   * List of DocuSign Carbon Copies
   * 
   * @return carbonCopies
   */
  @javax.annotation.Nullable
  public List<DocusignCarbonCopy> getCarbonCopies() {
    return carbonCopies;
  }

  public void setCarbonCopies(List<DocusignCarbonCopy> carbonCopies) {
    this.carbonCopies = carbonCopies;
  }


  public AddDocusignRequest recipientTabs(List<DocusignRecipientTab> recipientTabs) {
    this.recipientTabs = recipientTabs;
    return this;
  }

  public AddDocusignRequest addRecipientTabsItem(DocusignRecipientTab recipientTabsItem) {
    if (this.recipientTabs == null) {
      this.recipientTabs = new ArrayList<>();
    }
    this.recipientTabs.add(recipientTabsItem);
    return this;
  }

  /**
   * List of DocuSign Recipient Tabs
   * 
   * @return recipientTabs
   */
  @javax.annotation.Nullable
  public List<DocusignRecipientTab> getRecipientTabs() {
    return recipientTabs;
  }

  public void setRecipientTabs(List<DocusignRecipientTab> recipientTabs) {
    this.recipientTabs = recipientTabs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddDocusignRequest addDocusignRequest = (AddDocusignRequest) o;
    return Objects.equals(this.emailSubject, addDocusignRequest.emailSubject)
        && Objects.equals(this.status, addDocusignRequest.status)
        && Objects.equals(this.developmentMode, addDocusignRequest.developmentMode)
        && Objects.equals(this.signers, addDocusignRequest.signers)
        && Objects.equals(this.carbonCopies, addDocusignRequest.carbonCopies)
        && Objects.equals(this.recipientTabs, addDocusignRequest.recipientTabs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailSubject, status, developmentMode, signers, carbonCopies,
        recipientTabs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddDocusignRequest {\n");
    sb.append("    emailSubject: ").append(toIndentedString(emailSubject)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    developmentMode: ").append(toIndentedString(developmentMode)).append("\n");
    sb.append("    signers: ").append(toIndentedString(signers)).append("\n");
    sb.append("    carbonCopies: ").append(toIndentedString(carbonCopies)).append("\n");
    sb.append("    recipientTabs: ").append(toIndentedString(recipientTabs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("emailSubject");
    openapiFields.add("status");
    openapiFields.add("developmentMode");
    openapiFields.add("signers");
    openapiFields.add("carbonCopies");
    openapiFields.add("recipientTabs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddDocusignRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!AddDocusignRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON
                                                                 // element is null
        throw new IllegalArgumentException(String.format(
            "The required field(s) %s in AddDocusignRequest is not found in the empty JSON string",
            AddDocusignRequest.openapiRequiredFields.toString()));
      }
    }

    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!AddDocusignRequest.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format(
            "The field `%s` in the JSON string is not defined in the `AddDocusignRequest` properties. JSON: %s",
            entry.getKey(), jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if ((jsonObj.get("emailSubject") != null && !jsonObj.get("emailSubject").isJsonNull())
        && !jsonObj.get("emailSubject").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `emailSubject` to be a primitive type in the JSON string but got `%s`",
          jsonObj.get("emailSubject").toString()));
    }
    // validate the optional field `status`
    if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
      DocusignRequestStatus.validateJsonElement(jsonObj.get("status"));
    }
    if (jsonObj.get("signers") != null && !jsonObj.get("signers").isJsonNull()) {
      JsonArray jsonArraysigners = jsonObj.getAsJsonArray("signers");
      if (jsonArraysigners != null) {
        // ensure the json data is an array
        if (!jsonObj.get("signers").isJsonArray()) {
          throw new IllegalArgumentException(String.format(
              "Expected the field `signers` to be an array in the JSON string but got `%s`",
              jsonObj.get("signers").toString()));
        }

        // validate the optional field `signers` (array)
        for (int i = 0; i < jsonArraysigners.size(); i++) {
          DocusignSigner.validateJsonElement(jsonArraysigners.get(i));
        } ;
      }
    }
    if (jsonObj.get("carbonCopies") != null && !jsonObj.get("carbonCopies").isJsonNull()) {
      JsonArray jsonArraycarbonCopies = jsonObj.getAsJsonArray("carbonCopies");
      if (jsonArraycarbonCopies != null) {
        // ensure the json data is an array
        if (!jsonObj.get("carbonCopies").isJsonArray()) {
          throw new IllegalArgumentException(String.format(
              "Expected the field `carbonCopies` to be an array in the JSON string but got `%s`",
              jsonObj.get("carbonCopies").toString()));
        }

        // validate the optional field `carbonCopies` (array)
        for (int i = 0; i < jsonArraycarbonCopies.size(); i++) {
          DocusignCarbonCopy.validateJsonElement(jsonArraycarbonCopies.get(i));
        } ;
      }
    }
    if (jsonObj.get("recipientTabs") != null && !jsonObj.get("recipientTabs").isJsonNull()) {
      JsonArray jsonArrayrecipientTabs = jsonObj.getAsJsonArray("recipientTabs");
      if (jsonArrayrecipientTabs != null) {
        // ensure the json data is an array
        if (!jsonObj.get("recipientTabs").isJsonArray()) {
          throw new IllegalArgumentException(String.format(
              "Expected the field `recipientTabs` to be an array in the JSON string but got `%s`",
              jsonObj.get("recipientTabs").toString()));
        }

        // validate the optional field `recipientTabs` (array)
        for (int i = 0; i < jsonArrayrecipientTabs.size(); i++) {
          DocusignRecipientTab.validateJsonElement(jsonArrayrecipientTabs.get(i));
        } ;
      }
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!AddDocusignRequest.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'AddDocusignRequest' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<AddDocusignRequest> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(AddDocusignRequest.class));

      return (TypeAdapter<T>) new TypeAdapter<AddDocusignRequest>() {
        @Override
        public void write(JsonWriter out, AddDocusignRequest value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }

        @Override
        public AddDocusignRequest read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }

      }.nullSafe();
    }
  }

  /**
   * Create an instance of AddDocusignRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddDocusignRequest
   * @throws IOException if the JSON string is invalid with respect to AddDocusignRequest
   */
  public static AddDocusignRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddDocusignRequest.class);
  }

  /**
   * Convert an instance of AddDocusignRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


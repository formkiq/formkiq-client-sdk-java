/*
 * FormKiQ API JWT Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You
 * can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction
 * FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API
 * provides all the API endpoints to build your Perfect Document Management Platform. FormKiQ API
 * was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the
 * API spec file with any application that supports the OpenAPI specification. Open API OAuth
 * Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.18.0 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.model;

import java.util.Objects;
import com.formkiq.client.model.LocaleResourceType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.formkiq.client.invoker.JSON;

/**
 * ResourceItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2025-05-02T21:05:43.846525-05:00[America/Winnipeg]",
    comments = "Generator version: 7.13.0")
public class ResourceItem {
  public static final String SERIALIZED_NAME_ITEM_TYPE = "itemType";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  @javax.annotation.Nullable
  private LocaleResourceType itemType;

  public static final String SERIALIZED_NAME_LOCALIZED_VALUE = "localizedValue";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_VALUE)
  @javax.annotation.Nullable
  private String localizedValue;

  public static final String SERIALIZED_NAME_INTERFACE_KEY = "interfaceKey";
  @SerializedName(SERIALIZED_NAME_INTERFACE_KEY)
  @javax.annotation.Nullable
  private String interfaceKey;

  public static final String SERIALIZED_NAME_ITEM_KEY = "itemKey";
  @SerializedName(SERIALIZED_NAME_ITEM_KEY)
  @javax.annotation.Nullable
  private String itemKey;

  public static final String SERIALIZED_NAME_ATTRIBUTE_KEY = "attributeKey";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_KEY)
  @javax.annotation.Nullable
  private String attributeKey;

  public static final String SERIALIZED_NAME_ALLOWED_VALUE = "allowedValue";
  @SerializedName(SERIALIZED_NAME_ALLOWED_VALUE)
  @javax.annotation.Nullable
  private String allowedValue;

  public static final String SERIALIZED_NAME_CLASSIFICATION_ID = "classificationId";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_ID)
  @javax.annotation.Nullable
  private String classificationId;

  public ResourceItem() {}

  public ResourceItem itemType(@javax.annotation.Nullable LocaleResourceType itemType) {
    this.itemType = itemType;
    return this;
  }

  /**
   * Get itemType
   * 
   * @return itemType
   */
  @javax.annotation.Nullable
  public LocaleResourceType getItemType() {
    return itemType;
  }

  public void setItemType(@javax.annotation.Nullable LocaleResourceType itemType) {
    this.itemType = itemType;
  }


  public ResourceItem localizedValue(@javax.annotation.Nullable String localizedValue) {
    this.localizedValue = localizedValue;
    return this;
  }

  /**
   * Localized Value
   * 
   * @return localizedValue
   */
  @javax.annotation.Nullable
  public String getLocalizedValue() {
    return localizedValue;
  }

  public void setLocalizedValue(@javax.annotation.Nullable String localizedValue) {
    this.localizedValue = localizedValue;
  }


  public ResourceItem interfaceKey(@javax.annotation.Nullable String interfaceKey) {
    this.interfaceKey = interfaceKey;
    return this;
  }

  /**
   * Interface Key
   * 
   * @return interfaceKey
   */
  @javax.annotation.Nullable
  public String getInterfaceKey() {
    return interfaceKey;
  }

  public void setInterfaceKey(@javax.annotation.Nullable String interfaceKey) {
    this.interfaceKey = interfaceKey;
  }


  public ResourceItem itemKey(@javax.annotation.Nullable String itemKey) {
    this.itemKey = itemKey;
    return this;
  }

  /**
   * Item Key
   * 
   * @return itemKey
   */
  @javax.annotation.Nullable
  public String getItemKey() {
    return itemKey;
  }

  public void setItemKey(@javax.annotation.Nullable String itemKey) {
    this.itemKey = itemKey;
  }


  public ResourceItem attributeKey(@javax.annotation.Nullable String attributeKey) {
    this.attributeKey = attributeKey;
    return this;
  }

  /**
   * Attribute Key
   * 
   * @return attributeKey
   */
  @javax.annotation.Nullable
  public String getAttributeKey() {
    return attributeKey;
  }

  public void setAttributeKey(@javax.annotation.Nullable String attributeKey) {
    this.attributeKey = attributeKey;
  }


  public ResourceItem allowedValue(@javax.annotation.Nullable String allowedValue) {
    this.allowedValue = allowedValue;
    return this;
  }

  /**
   * Resource value
   * 
   * @return allowedValue
   */
  @javax.annotation.Nullable
  public String getAllowedValue() {
    return allowedValue;
  }

  public void setAllowedValue(@javax.annotation.Nullable String allowedValue) {
    this.allowedValue = allowedValue;
  }


  public ResourceItem classificationId(@javax.annotation.Nullable String classificationId) {
    this.classificationId = classificationId;
    return this;
  }

  /**
   * Classification Id
   * 
   * @return classificationId
   */
  @javax.annotation.Nullable
  public String getClassificationId() {
    return classificationId;
  }

  public void setClassificationId(@javax.annotation.Nullable String classificationId) {
    this.classificationId = classificationId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceItem resourceItem = (ResourceItem) o;
    return Objects.equals(this.itemType, resourceItem.itemType)
        && Objects.equals(this.localizedValue, resourceItem.localizedValue)
        && Objects.equals(this.interfaceKey, resourceItem.interfaceKey)
        && Objects.equals(this.itemKey, resourceItem.itemKey)
        && Objects.equals(this.attributeKey, resourceItem.attributeKey)
        && Objects.equals(this.allowedValue, resourceItem.allowedValue)
        && Objects.equals(this.classificationId, resourceItem.classificationId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(itemType, localizedValue, interfaceKey, itemKey, attributeKey, allowedValue,
        classificationId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceItem {\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    localizedValue: ").append(toIndentedString(localizedValue)).append("\n");
    sb.append("    interfaceKey: ").append(toIndentedString(interfaceKey)).append("\n");
    sb.append("    itemKey: ").append(toIndentedString(itemKey)).append("\n");
    sb.append("    attributeKey: ").append(toIndentedString(attributeKey)).append("\n");
    sb.append("    allowedValue: ").append(toIndentedString(allowedValue)).append("\n");
    sb.append("    classificationId: ").append(toIndentedString(classificationId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("itemType");
    openapiFields.add("localizedValue");
    openapiFields.add("interfaceKey");
    openapiFields.add("itemKey");
    openapiFields.add("attributeKey");
    openapiFields.add("allowedValue");
    openapiFields.add("classificationId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!ResourceItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element
                                                           // is null
        throw new IllegalArgumentException(String.format(
            "The required field(s) %s in ResourceItem is not found in the empty JSON string",
            ResourceItem.openapiRequiredFields.toString()));
      }
    }

    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!ResourceItem.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format(
            "The field `%s` in the JSON string is not defined in the `ResourceItem` properties. JSON: %s",
            entry.getKey(), jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    // validate the optional field `itemType`
    if (jsonObj.get("itemType") != null && !jsonObj.get("itemType").isJsonNull()) {
      LocaleResourceType.validateJsonElement(jsonObj.get("itemType"));
    }
    if ((jsonObj.get("localizedValue") != null && !jsonObj.get("localizedValue").isJsonNull())
        && !jsonObj.get("localizedValue").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `localizedValue` to be a primitive type in the JSON string but got `%s`",
          jsonObj.get("localizedValue").toString()));
    }
    if ((jsonObj.get("interfaceKey") != null && !jsonObj.get("interfaceKey").isJsonNull())
        && !jsonObj.get("interfaceKey").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `interfaceKey` to be a primitive type in the JSON string but got `%s`",
          jsonObj.get("interfaceKey").toString()));
    }
    if ((jsonObj.get("itemKey") != null && !jsonObj.get("itemKey").isJsonNull())
        && !jsonObj.get("itemKey").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `itemKey` to be a primitive type in the JSON string but got `%s`",
          jsonObj.get("itemKey").toString()));
    }
    if ((jsonObj.get("attributeKey") != null && !jsonObj.get("attributeKey").isJsonNull())
        && !jsonObj.get("attributeKey").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `attributeKey` to be a primitive type in the JSON string but got `%s`",
          jsonObj.get("attributeKey").toString()));
    }
    if ((jsonObj.get("allowedValue") != null && !jsonObj.get("allowedValue").isJsonNull())
        && !jsonObj.get("allowedValue").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `allowedValue` to be a primitive type in the JSON string but got `%s`",
          jsonObj.get("allowedValue").toString()));
    }
    if ((jsonObj.get("classificationId") != null && !jsonObj.get("classificationId").isJsonNull())
        && !jsonObj.get("classificationId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `classificationId` to be a primitive type in the JSON string but got `%s`",
          jsonObj.get("classificationId").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!ResourceItem.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'ResourceItem' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<ResourceItem> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(ResourceItem.class));

      return (TypeAdapter<T>) new TypeAdapter<ResourceItem>() {
        @Override
        public void write(JsonWriter out, ResourceItem value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }

        @Override
        public ResourceItem read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }

      }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceItem
   * @throws IOException if the JSON string is invalid with respect to ResourceItem
   */
  public static ResourceItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceItem.class);
  }

  /**
   * Convert an instance of ResourceItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


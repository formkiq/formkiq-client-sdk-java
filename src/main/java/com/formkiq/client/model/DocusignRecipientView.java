/*
 * FormKiQ API JWT Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You
 * can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction
 * FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API
 * provides all the API endpoints to build your Perfect Document Management Platform. FormKiQ API
 * was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the
 * API spec file with any application that supports the OpenAPI specification. Open API OAuth
 * Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.16.0 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.formkiq.client.invoker.JSON;

/**
 * DocusignRecipientView
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen",
    date = "2024-11-12T21:03:32.853177-06:00[America/Winnipeg]",
    comments = "Generator version: 7.9.0")
public class DocusignRecipientView {
  public static final String SERIALIZED_NAME_RETURN_URL = "returnUrl";
  @SerializedName(SERIALIZED_NAME_RETURN_URL)
  private String returnUrl;

  public static final String SERIALIZED_NAME_RECIPIENT_ID = "recipientId";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_ID)
  private String recipientId;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_CLIENT_USER_ID = "clientUserId";
  @SerializedName(SERIALIZED_NAME_CLIENT_USER_ID)
  private String clientUserId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FRAME_ANCESTORS = "frameAncestors";
  @SerializedName(SERIALIZED_NAME_FRAME_ANCESTORS)
  private List<String> frameAncestors = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_ORIGINS = "messageOrigins";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ORIGINS)
  private List<String> messageOrigins = new ArrayList<>();

  public DocusignRecipientView() {}

  public DocusignRecipientView returnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
    return this;
  }

  /**
   * Identifies the return point after sending the envelope
   * 
   * @return returnUrl
   */
  @javax.annotation.Nullable
  public String getReturnUrl() {
    return returnUrl;
  }

  public void setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
  }


  public DocusignRecipientView recipientId(String recipientId) {
    this.recipientId = recipientId;
    return this;
  }

  /**
   * A reference used to map recipients to other objects, such as specific document tabs.
   * 
   * @return recipientId
   */
  @javax.annotation.Nullable
  public String getRecipientId() {
    return recipientId;
  }

  public void setRecipientId(String recipientId) {
    this.recipientId = recipientId;
  }


  public DocusignRecipientView userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * The username of the recipient. You can use either email and userName.
   * 
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  public DocusignRecipientView clientUserId(String clientUserId) {
    this.clientUserId = clientUserId;
    return this;
  }

  /**
   * Specifies unique identifier for signer
   * 
   * @return clientUserId
   */
  @javax.annotation.Nullable
  public String getClientUserId() {
    return clientUserId;
  }

  public void setClientUserId(String clientUserId) {
    this.clientUserId = clientUserId;
  }


  public DocusignRecipientView email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Specifies the email of the recipient
   * 
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public DocusignRecipientView frameAncestors(List<String> frameAncestors) {
    this.frameAncestors = frameAncestors;
    return this;
  }

  public DocusignRecipientView addFrameAncestorsItem(String frameAncestorsItem) {
    if (this.frameAncestors == null) {
      this.frameAncestors = new ArrayList<>();
    }
    this.frameAncestors.add(frameAncestorsItem);
    return this;
  }

  /**
   * An array of ancestors that can embed the frame. Include the domain where the envelope will be
   * embedded and the same URL as messageOrigins.
   * 
   * @return frameAncestors
   */
  @javax.annotation.Nullable
  public List<String> getFrameAncestors() {
    return frameAncestors;
  }

  public void setFrameAncestors(List<String> frameAncestors) {
    this.frameAncestors = frameAncestors;
  }


  public DocusignRecipientView messageOrigins(List<String> messageOrigins) {
    this.messageOrigins = messageOrigins;
    return this;
  }

  public DocusignRecipientView addMessageOriginsItem(String messageOriginsItem) {
    if (this.messageOrigins == null) {
      this.messageOrigins = new ArrayList<>();
    }
    this.messageOrigins.add(messageOriginsItem);
    return this;
  }

  /**
   * The originating domain for the signature request message
   * 
   * @return messageOrigins
   */
  @javax.annotation.Nullable
  public List<String> getMessageOrigins() {
    return messageOrigins;
  }

  public void setMessageOrigins(List<String> messageOrigins) {
    this.messageOrigins = messageOrigins;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocusignRecipientView docusignRecipientView = (DocusignRecipientView) o;
    return Objects.equals(this.returnUrl, docusignRecipientView.returnUrl)
        && Objects.equals(this.recipientId, docusignRecipientView.recipientId)
        && Objects.equals(this.userName, docusignRecipientView.userName)
        && Objects.equals(this.clientUserId, docusignRecipientView.clientUserId)
        && Objects.equals(this.email, docusignRecipientView.email)
        && Objects.equals(this.frameAncestors, docusignRecipientView.frameAncestors)
        && Objects.equals(this.messageOrigins, docusignRecipientView.messageOrigins);
  }

  @Override
  public int hashCode() {
    return Objects.hash(returnUrl, recipientId, userName, clientUserId, email, frameAncestors,
        messageOrigins);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocusignRecipientView {\n");
    sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
    sb.append("    recipientId: ").append(toIndentedString(recipientId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    clientUserId: ").append(toIndentedString(clientUserId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    frameAncestors: ").append(toIndentedString(frameAncestors)).append("\n");
    sb.append("    messageOrigins: ").append(toIndentedString(messageOrigins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("returnUrl");
    openapiFields.add("recipientId");
    openapiFields.add("userName");
    openapiFields.add("clientUserId");
    openapiFields.add("email");
    openapiFields.add("frameAncestors");
    openapiFields.add("messageOrigins");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocusignRecipientView
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    if (jsonElement == null) {
      if (!DocusignRecipientView.openapiRequiredFields.isEmpty()) { // has required fields but JSON
                                                                    // element is null
        throw new IllegalArgumentException(String.format(
            "The required field(s) %s in DocusignRecipientView is not found in the empty JSON string",
            DocusignRecipientView.openapiRequiredFields.toString()));
      }
    }

    Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
    // check to see if the JSON string contains additional fields
    for (Map.Entry<String, JsonElement> entry : entries) {
      if (!DocusignRecipientView.openapiFields.contains(entry.getKey())) {
        throw new IllegalArgumentException(String.format(
            "The field `%s` in the JSON string is not defined in the `DocusignRecipientView` properties. JSON: %s",
            entry.getKey(), jsonElement.toString()));
      }
    }
    JsonObject jsonObj = jsonElement.getAsJsonObject();
    if ((jsonObj.get("returnUrl") != null && !jsonObj.get("returnUrl").isJsonNull())
        && !jsonObj.get("returnUrl").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `returnUrl` to be a primitive type in the JSON string but got `%s`",
          jsonObj.get("returnUrl").toString()));
    }
    if ((jsonObj.get("recipientId") != null && !jsonObj.get("recipientId").isJsonNull())
        && !jsonObj.get("recipientId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `recipientId` to be a primitive type in the JSON string but got `%s`",
          jsonObj.get("recipientId").toString()));
    }
    if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull())
        && !jsonObj.get("userName").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `userName` to be a primitive type in the JSON string but got `%s`",
          jsonObj.get("userName").toString()));
    }
    if ((jsonObj.get("clientUserId") != null && !jsonObj.get("clientUserId").isJsonNull())
        && !jsonObj.get("clientUserId").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `clientUserId` to be a primitive type in the JSON string but got `%s`",
          jsonObj.get("clientUserId").toString()));
    }
    if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull())
        && !jsonObj.get("email").isJsonPrimitive()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `email` to be a primitive type in the JSON string but got `%s`",
          jsonObj.get("email").toString()));
    }
    // ensure the optional json data is an array if present
    if (jsonObj.get("frameAncestors") != null && !jsonObj.get("frameAncestors").isJsonNull()
        && !jsonObj.get("frameAncestors").isJsonArray()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `frameAncestors` to be an array in the JSON string but got `%s`",
          jsonObj.get("frameAncestors").toString()));
    }
    // ensure the optional json data is an array if present
    if (jsonObj.get("messageOrigins") != null && !jsonObj.get("messageOrigins").isJsonNull()
        && !jsonObj.get("messageOrigins").isJsonArray()) {
      throw new IllegalArgumentException(String.format(
          "Expected the field `messageOrigins` to be an array in the JSON string but got `%s`",
          jsonObj.get("messageOrigins").toString()));
    }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
      if (!DocusignRecipientView.class.isAssignableFrom(type.getRawType())) {
        return null; // this class only serializes 'DocusignRecipientView' and its subtypes
      }
      final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
      final TypeAdapter<DocusignRecipientView> thisAdapter =
          gson.getDelegateAdapter(this, TypeToken.get(DocusignRecipientView.class));

      return (TypeAdapter<T>) new TypeAdapter<DocusignRecipientView>() {
        @Override
        public void write(JsonWriter out, DocusignRecipientView value) throws IOException {
          JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
          elementAdapter.write(out, obj);
        }

        @Override
        public DocusignRecipientView read(JsonReader in) throws IOException {
          JsonElement jsonElement = elementAdapter.read(in);
          validateJsonElement(jsonElement);
          return thisAdapter.fromJsonTree(jsonElement);
        }

      }.nullSafe();
    }
  }

  /**
   * Create an instance of DocusignRecipientView given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocusignRecipientView
   * @throws IOException if the JSON string is invalid with respect to DocusignRecipientView
   */
  public static DocusignRecipientView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocusignRecipientView.class);
  }

  /**
   * Convert an instance of DocusignRecipientView to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * FormKiQ API JWT Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You
 * can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction
 * FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API
 * provides all the API endpoints to build your Perfect Document Management Platform. FormKiQ API
 * was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the
 * API spec file with any application that supports the OpenAPI specification. Open API OAuth
 * Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.17.0 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UserAttributes
 */
public class UserAttributesTest {
  private final UserAttributes model = new UserAttributes();

  /**
   * Model tests for UserAttributes
   */
  @Test
  public void testUserAttributes() {
    // TODO: test UserAttributes
  }

  /**
   * Test the property 'address'
   */
  @Test
  public void addressTest() {
    // TODO: test address
  }

  /**
   * Test the property 'birthdate'
   */
  @Test
  public void birthdateTest() {
    // TODO: test birthdate
  }

  /**
   * Test the property 'familyName'
   */
  @Test
  public void familyNameTest() {
    // TODO: test familyName
  }

  /**
   * Test the property 'gender'
   */
  @Test
  public void genderTest() {
    // TODO: test gender
  }

  /**
   * Test the property 'givenName'
   */
  @Test
  public void givenNameTest() {
    // TODO: test givenName
  }

  /**
   * Test the property 'locale'
   */
  @Test
  public void localeTest() {
    // TODO: test locale
  }

  /**
   * Test the property 'middleName'
   */
  @Test
  public void middleNameTest() {
    // TODO: test middleName
  }

  /**
   * Test the property 'name'
   */
  @Test
  public void nameTest() {
    // TODO: test name
  }

  /**
   * Test the property 'nickname'
   */
  @Test
  public void nicknameTest() {
    // TODO: test nickname
  }

  /**
   * Test the property 'phoneNumber'
   */
  @Test
  public void phoneNumberTest() {
    // TODO: test phoneNumber
  }

  /**
   * Test the property 'picture'
   */
  @Test
  public void pictureTest() {
    // TODO: test picture
  }

  /**
   * Test the property 'preferredUsername'
   */
  @Test
  public void preferredUsernameTest() {
    // TODO: test preferredUsername
  }

  /**
   * Test the property 'profile'
   */
  @Test
  public void profileTest() {
    // TODO: test profile
  }

  /**
   * Test the property 'zoneinfo'
   */
  @Test
  public void zoneinfoTest() {
    // TODO: test zoneinfo
  }

  /**
   * Test the property 'updatedAt'
   */
  @Test
  public void updatedAtTest() {
    // TODO: test updatedAt
  }

  /**
   * Test the property 'website'
   */
  @Test
  public void websiteTest() {
    // TODO: test website
  }

}

/*
 * FormKiQ API Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You can
 * find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction FormKiQ
 * is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all
 * the API endpoints to build your Perfect Document Management Platform. FormKiQ API was built on
 * top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file
 * with any application that supports the OpenAPI specification. Open API OAuth Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.16.0 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.model;

import com.formkiq.client.model.OcrEngine;
import com.formkiq.client.model.OcrOutputType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AddActionParameters
 */
public class AddActionParametersTest {
  private final AddActionParameters model = new AddActionParameters();

  /**
   * Model tests for AddActionParameters
   */
  @Test
  public void testAddActionParameters() {
    // TODO: test AddActionParameters
  }

  /**
   * Test the property 'ocrParseTypes'
   */
  @Test
  public void ocrParseTypesTest() {
    // TODO: test ocrParseTypes
  }

  /**
   * Test the property 'ocrEngine'
   */
  @Test
  public void ocrEngineTest() {
    // TODO: test ocrEngine
  }

  /**
   * Test the property 'ocrOutputType'
   */
  @Test
  public void ocrOutputTypeTest() {
    // TODO: test ocrOutputType
  }

  /**
   * Test the property 'ocrNumberOfPages'
   */
  @Test
  public void ocrNumberOfPagesTest() {
    // TODO: test ocrNumberOfPages
  }

  /**
   * Test the property 'addPdfDetectedCharactersAsText'
   */
  @Test
  public void addPdfDetectedCharactersAsTextTest() {
    // TODO: test addPdfDetectedCharactersAsText
  }

  /**
   * Test the property 'url'
   */
  @Test
  public void urlTest() {
    // TODO: test url
  }

  /**
   * Test the property 'characterMax'
   */
  @Test
  public void characterMaxTest() {
    // TODO: test characterMax
  }

  /**
   * Test the property 'engine'
   */
  @Test
  public void engineTest() {
    // TODO: test engine
  }

  /**
   * Test the property 'notificationType'
   */
  @Test
  public void notificationTypeTest() {
    // TODO: test notificationType
  }

  /**
   * Test the property 'notificationToCc'
   */
  @Test
  public void notificationToCcTest() {
    // TODO: test notificationToCc
  }

  /**
   * Test the property 'notificationToBcc'
   */
  @Test
  public void notificationToBccTest() {
    // TODO: test notificationToBcc
  }

  /**
   * Test the property 'notificationSubject'
   */
  @Test
  public void notificationSubjectTest() {
    // TODO: test notificationSubject
  }

  /**
   * Test the property 'notificationText'
   */
  @Test
  public void notificationTextTest() {
    // TODO: test notificationText
  }

  /**
   * Test the property 'notificationHtml'
   */
  @Test
  public void notificationHtmlTest() {
    // TODO: test notificationHtml
  }

  /**
   * Test the property 'tags'
   */
  @Test
  public void tagsTest() {
    // TODO: test tags
  }

  /**
   * Test the property 'mappingId'
   */
  @Test
  public void mappingIdTest() {
    // TODO: test mappingId
  }

}

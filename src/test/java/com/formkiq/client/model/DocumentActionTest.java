/*
 * FormKiQ HTTP API Formkiq API: Document Management Platform API using OAuth(JWT) Authentication
 * You can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction
 * FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API
 * provides all the API endpoints to build your Perfect Document Management Platform. FormKiQ API
 * was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the
 * API spec file with any application that supports the OpenAPI specification. Open API OAuth
 * Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.14.0 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DocumentAction
 */
public class DocumentActionTest {
  private final DocumentAction model = new DocumentAction();

  /**
   * Model tests for DocumentAction
   */
  @Test
  public void testDocumentAction() {
    // TODO: test DocumentAction
  }

  /**
   * Test the property 'status'
   */
  @Test
  public void statusTest() {
    // TODO: test status
  }

  /**
   * Test the property 'type'
   */
  @Test
  public void typeTest() {
    // TODO: test type
  }

  /**
   * Test the property 'queueId'
   */
  @Test
  public void queueIdTest() {
    // TODO: test queueId
  }

  /**
   * Test the property 'workflowId'
   */
  @Test
  public void workflowIdTest() {
    // TODO: test workflowId
  }

  /**
   * Test the property 'workflowStepId'
   */
  @Test
  public void workflowStepIdTest() {
    // TODO: test workflowStepId
  }

  /**
   * Test the property 'message'
   */
  @Test
  public void messageTest() {
    // TODO: test message
  }

  /**
   * Test the property 'userId'
   */
  @Test
  public void userIdTest() {
    // TODO: test userId
  }

  /**
   * Test the property 'insertedDate'
   */
  @Test
  public void insertedDateTest() {
    // TODO: test insertedDate
  }

  /**
   * Test the property 'startDate'
   */
  @Test
  public void startDateTest() {
    // TODO: test startDate
  }

  /**
   * Test the property 'completedDate'
   */
  @Test
  public void completedDateTest() {
    // TODO: test completedDate
  }

  /**
   * Test the property 'parameters'
   */
  @Test
  public void parametersTest() {
    // TODO: test parameters
  }

  /**
   * Test the property 'metadata'
   */
  @Test
  public void metadataTest() {
    // TODO: test metadata
  }

}

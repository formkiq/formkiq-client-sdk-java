/*
 * FormKiQ API JWT Formkiq API: Document Management Platform API using OAuth(JWT) Authentication You
 * can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com). ## Introduction
 * FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API
 * provides all the API endpoints to build your Perfect Document Management Platform. FormKiQ API
 * was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the
 * API spec file with any application that supports the OpenAPI specification. Open API OAuth
 * Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml Open
 * API IAM Specification -
 * https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml ##
 * Authentication FormKiQ offers three forms of authentication: - OAuth(JWT) - AWS IAM - API Key
 *
 * The version of the OpenAPI document: 1.18.0 Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech Do not edit the class manually.
 */


package com.formkiq.client.api;

import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.model.AddEntityRequest;
import com.formkiq.client.model.AddEntityResponse;
import com.formkiq.client.model.AddEntityTypeRequest;
import com.formkiq.client.model.AddEntityTypeResponse;
import com.formkiq.client.model.DeleteResponse;
import com.formkiq.client.model.GetEntitiesResponse;
import com.formkiq.client.model.GetEntityResponse;
import com.formkiq.client.model.GetEntityTypeResponse;
import com.formkiq.client.model.GetEntityTypesResponse;
import com.formkiq.client.model.UpdateEntityRequest;
import com.formkiq.client.model.UpdateResponse;
import com.formkiq.client.model.ValidationErrorsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EntityApi
 */
@Disabled
public class EntityApiTest {

  private final EntityApi api = new EntityApi();

  /**
   * Add New Entity
   *
   * Creates a Entity
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void addEntityTest() throws ApiException {
    String entityTypeId = null;
    AddEntityRequest addEntityRequest = null;
    String siteId = null;
    String namespace = null;
    AddEntityResponse response = api.addEntity(entityTypeId, addEntityRequest, siteId, namespace);
    // TODO: test validations
  }

  /**
   * Add New EntityType
   *
   * Creates a Entity Type
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void addEntityTypeTest() throws ApiException {
    AddEntityTypeRequest addEntityTypeRequest = null;
    String siteId = null;
    AddEntityTypeResponse response = api.addEntityType(addEntityTypeRequest, siteId);
    // TODO: test validations
  }

  /**
   * Deletes Entity
   *
   * Deletes Entity
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void deleteEntityTest() throws ApiException {
    String entityTypeId = null;
    String entityId = null;
    String siteId = null;
    DeleteResponse response = api.deleteEntity(entityTypeId, entityId, siteId);
    // TODO: test validations
  }

  /**
   * Deletes Entity Type
   *
   * Deletes Entity Type
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void deleteEntityTypeTest() throws ApiException {
    String entityTypeId = null;
    String siteId = null;
    DeleteResponse response = api.deleteEntityType(entityTypeId, siteId);
    // TODO: test validations
  }

  /**
   * Get Entities
   *
   * Returns a list of entities
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getEntitiesTest() throws ApiException {
    String entityTypeId = null;
    String siteId = null;
    String namespace = null;
    String next = null;
    String limit = null;
    GetEntitiesResponse response = api.getEntities(entityTypeId, siteId, namespace, next, limit);
    // TODO: test validations
  }

  /**
   * Get Entity
   *
   * Returns a entity
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getEntityTest() throws ApiException {
    String entityTypeId = null;
    String entityId = null;
    String siteId = null;
    String namespace = null;
    GetEntityResponse response = api.getEntity(entityTypeId, entityId, siteId, namespace);
    // TODO: test validations
  }

  /**
   * Get EntityType
   *
   * Returns a entity type
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getEntityTypeTest() throws ApiException {
    String entityTypeId = null;
    String siteId = null;
    String namespace = null;
    GetEntityTypeResponse response = api.getEntityType(entityTypeId, siteId, namespace);
    // TODO: test validations
  }

  /**
   * Get EntityTypes
   *
   * Returns a list of entity types
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void getEntityTypesTest() throws ApiException {
    String siteId = null;
    String namespace = null;
    String next = null;
    String limit = null;
    GetEntityTypesResponse response = api.getEntityTypes(siteId, namespace, next, limit);
    // TODO: test validations
  }

  /**
   * Update Entity
   *
   * Updates a Entity
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void updateEntityTest() throws ApiException {
    String entityTypeId = null;
    String entityId = null;
    UpdateEntityRequest updateEntityRequest = null;
    String siteId = null;
    String namespace = null;
    UpdateResponse response =
        api.updateEntity(entityTypeId, entityId, updateEntityRequest, siteId, namespace);
    // TODO: test validations
  }

}

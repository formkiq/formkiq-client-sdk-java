/*
 * FormKiQ HTTP API
 * Formkiq API: Document Management Platform API using JWT Authentication
 *
 * The version of the OpenAPI document: 1.12.0
 * Contact: support@formkiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.formkiq.client.api;

import com.formkiq.client.invoker.ApiException;
import com.formkiq.client.model.AddWebhookRequest;
import com.formkiq.client.model.AddWebhookResponse;
import com.formkiq.client.model.DocumentId;
import com.formkiq.client.model.GetDocumentTagResponse;
import com.formkiq.client.model.GetWebhookResponse;
import com.formkiq.client.model.GetWebhookTagsResponse;
import com.formkiq.client.model.GetWebhooksResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Disabled
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    /**
     * Create a new webhook; once created, a webhook&#39;s id can be provided to an external service, allowing data to be sent, received, and processed via that webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addWebhookTest() throws ApiException {
        AddWebhookRequest addWebhookRequest = null;
        String siteId = null;
        AddWebhookResponse response = api.addWebhook(addWebhookRequest, siteId);
        // TODO: test validations
    }

    /**
     * Receive an incoming private webhook and creates a document based on the webhook&#39;s body; requires authentication
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addWebhookDocumentTest() throws ApiException {
        String webhooksPlus = null;
        Object body = null;
        String siteId = null;
        DocumentId response = api.addWebhookDocument(webhooksPlus, body, siteId);
        // TODO: test validations
    }

    /**
     * Add a tag to a webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addWebhookTagTest() throws ApiException {
        String webhookId = null;
        GetDocumentTagResponse getDocumentTagResponse = null;
        String siteId = null;
        api.addWebhookTag(webhookId, getDocumentTagResponse, siteId);
        // TODO: test validations
    }

    /**
     * Delete a webhook; this will disable sending, receiving, or processing of data from external services to this webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        String webhookId = null;
        String siteId = null;
        api.deleteWebhook(webhookId, siteId);
        // TODO: test validations
    }

    /**
     * Return a webhook&#39;s details, i.e., its metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookTest() throws ApiException {
        String webhookId = null;
        String siteId = null;
        GetWebhookResponse response = api.getWebhook(webhookId, siteId);
        // TODO: test validations
    }

    /**
     * Get a webhook&#39;s tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookTagsTest() throws ApiException {
        String webhookId = null;
        String siteId = null;
        GetWebhookTagsResponse response = api.getWebhookTags(webhookId, siteId);
        // TODO: test validations
    }

    /**
     * Return a list of webhooks; each webhook&#39;s id can be provided to an external service, allowing data to be sent, received, and processed via that webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhooksTest() throws ApiException {
        String siteId = null;
        GetWebhooksResponse response = api.getWebhooks(siteId);
        // TODO: test validations
    }

    /**
     * Updates a webhook&#39;s details, i.e., its metadata
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhookTest() throws ApiException {
        String webhookId = null;
        AddWebhookRequest addWebhookRequest = null;
        String siteId = null;
        api.updateWebhook(webhookId, addWebhookRequest, siteId);
        // TODO: test validations
    }

}

openapi: 3.0.1
info:
  contact:
    email: support@formkiq.com
    name: FormKiQ
    url: https://formkiq.com
  description: |-
    Formkiq API: Document Management Platform API using OAuth(JWT) Authentication

    You can find out more about FormKiQ at [https://formkiq.com](http://formkiq.com).

    ## Introduction

    FormKiQ is an API-first (head-less), battle-tested document management API. The FormKiQ API provides all the API endpoints to build your Perfect Document Management Platform.

    FormKiQ API was built on top of [OpenAPI specification](https://www.openapis.org), so it is easy to use the API spec file with any application that supports the OpenAPI specification.

    Open API OAuth Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-jwt.yaml

    Open API IAM Specification - https://raw.githubusercontent.com/formkiq/formkiq-core/master/docs/openapi/openapi-iam.yaml

    ## Authentication
    FormKiQ offers three forms of authentication:
      - OAuth(JWT)
      - AWS IAM
      - API Key
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: FormKiQ HTTP API
  version: 1.14.0
  x-logo:
    url: https://docs.formkiq.com/docs/latest/_images/formkiq-logo.png
    backgroundColor: '#FFFFFF'
    altText: FormKiQ Logo
servers:
- description: Local development server
  url: http://localhost
tags:
- description: "API for the add, updating and fetching of documents"
  name: documents
  x-displayName: Documents
- description: "API for the add, updating and fetching of document tags"
  name: documentTags
  x-displayName: Document Tags
- description: API for searching for documents
  name: documentSearch
  x-displayName: Document Search
- description: System Management API
  name: systemManagement
  x-displayName: System Management
- description: Advanced Document Search API
  name: advancedDocumentSearch
  x-displayName: Advanced Document Search
- description: Document Actions API
  name: documentActions
  x-displayName: Document Actions
- description: Document OCR API
  name: documentOCR
  x-displayName: Document OCR
- description: Document Versions API
  name: documentVersions
  x-displayName: Document Versions
- description: Document Folders API
  name: documentFolders
  x-displayName: Document Folders
- description: Access Control API
  name: accessControl
  x-displayName: Access Control
- description: Document Shares API
  name: documentShares
  x-displayName: Document Shares
- description: Document Workflows API
  name: documentWorkflows
  x-displayName: Document Workflows
- description: Tag Schema API
  name: tagSchema
  x-displayName: Tag Schema
- description: User Activities API
  name: userActivities
  x-displayName: User Activities
- description: Antivirus API
  name: antivirus
  x-displayName: Antivirus
- description: Public API Endpoints
  name: public
  x-displayName: Public Endpoints
- description: Webhooks API
  name: webhooks
  x-displayName: Webhooks
- description: Onlyoffice API
  name: onlyoffice
  x-displayName: Onlyoffice
- description: E-Signature API
  name: e-signature
  x-displayName: E-Signature
- description: Case Management API
  name: caseManagement
  x-displayName: Case Management
- name: Application
  x-amazon-apigateway-tag-value: FormKiQ
- name: AppEnvironment
  x-amazon-apigateway-tag-value:
    Fn::Sub: "${AppEnvironment}"
paths:
  /version:
    get:
      description: Return the version of FormKiQ
      operationId: GetVersion
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVersionResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get FormKiQ version
      tags:
      - System Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /sites:
    get:
      description: Returns the list of sites that the user has access to
      operationId: GetSites
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSitesResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get site(s) access
      tags:
      - System Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /configuration:
    get:
      description: Returns the list of sites that the user has access to
      operationId: GetConfiguration
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConfigurationResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get site configuration
      tags:
      - System Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    patch:
      description: Update the System Management configuration
      operationId: UpdateConfiguration
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              Config:
                value:
                  chatGptApiKey: ABC
                  maxContentLengthBytes: "1000000"
                  maxDocuments: "1000"
                  maxWebhooks: "10"
                  notificationEmail: <email>
            schema:
              $ref: '#/components/schemas/UpdateConfigurationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateConfigurationResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      summary: Update site configuration
      tags:
      - System Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /configuration/apiKeys:
    get:
      description: Returns the list of ApiKeys
      operationId: GetApiKeys
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiKeysResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get API Keys
      tags:
      - System Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    post:
      description: Adds a new API Key
      operationId: AddApiKey
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              AddApiKey:
                value:
                  name: My API Key
            schema:
              $ref: '#/components/schemas/AddApiKeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddApiKeyResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Add API Key
      tags:
      - System Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /configuration/apiKeys/{apiKey}:
    delete:
      description: Adds a new API Key
      operationId: DeleteApiKey
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: API Key
        explode: false
        in: path
        name: apiKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApiKeyResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Delete API Key
      tags:
      - System Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /configuration/opa:
    delete:
      description: Delete OPA Configuration
      operationId: DeleteOpaConfiguration
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteOpaConfigurationResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Delete OPA Configuration
      tags:
      - Access Control
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    get:
      description: "Returns OPA Configuration, can only be requested with ADMIN privileges"
      operationId: GetOpaConfiguration
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOpaConfigurationResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get OPA Configuration
      tags:
      - Access Control
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    put:
      description: "Set OPA Configuration, can only be requested with ADMIN privileges"
      operationId: SetOpaConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetOpaConfigurationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetOpaConfigurationResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Set OPA Configuration
      tags:
      - Access Control
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /documents:
    get:
      description: "Returns a list of the most recent documents added, ordered by\
        \ inserted, descending"
      operationId: GetDocuments
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Fetch documents with an action status
        explode: true
        in: query
        name: actionStatus
        required: false
        schema:
          enum:
          - FAILED
          - IN_QUEUE
          - PENDING
          - RUNNING
          - SKIPPED
          - FAILED_RETRY
          type: string
        style: form
      - description: Fetch soft deleted documents
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          type: boolean
        style: form
      - description: Fetch documents inserted on a certain date (yyyy-MM-dd)
        explode: true
        in: query
        name: date
        required: false
        schema:
          type: string
        style: form
      - description: "UTC offset to apply to date parameter (IE: -0600)"
        explode: true
        in: query
        name: tz
        required: false
        schema:
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Previous page of results token
        explode: true
        in: query
        name: previous
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get Documents listing
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    post:
      description: |-
        Creates a new document; body may include document content if less than 5 MB

        See POST /documents/{documentId}/tags for adding tags to document schema

        See POST /documents/{documentId}/actions for adding actions to document schema
      operationId: AddDocument
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              Simple_File:
                value:
                  path: test.txt
                  contentType: text/plain
                  isBase64: false
                  content: This is sample data file
                  tags:
                  - key: category
                    value: sample
                  - key: players
                    values:
                    - "111"
                    - "222"
                  metadata:
                  - key: info
                    value: "Lorem ipsum dolor sit amet, consectetur adipiscing elit,\
                      \ sed do eiusmod tempor incididunt ut labore et dolore magna\
                      \ aliqua."
              Child_Document:
                value:
                  path: doc1.txt
                  contentType: text/plain
                  content: This is document1 content
                  tags:
                  - key: type
                    value: document1
                  documents:
                    contentType: "text/plain,"
                    content: "This is child document1 content,"
                    tags:
                    - key: type
                      value: childdocument1
              Document_with_Webhook:
                value:
                  path: test.txt
                  contentType: text/plain
                  isBase64: false
                  content: This is sample data file
                  actions:
                  - type: webhook
                    parameters:
                      url: <callback_url>
            schema:
              $ref: '#/components/schemas/AddDocumentRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocumentResponse'
          description: 201 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      summary: Add new document
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}:
    delete:
      description: Delete a document
      operationId: DeleteDocument
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to soft delete document
        explode: true
        in: query
        name: softDelete
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Delete document
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    get:
      description: "Retrieves a document's details, i.e., metadata"
      operationId: GetDocument
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    patch:
      description: "Update a document's details, i.e., metadata"
      operationId: UpdateDocument
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              Simple_File:
                value:
                  path: test.txt
                  contentType: text/plain
                  isBase64: false
                  content: This is sample data file
                  tags:
                  - key: category
                    value: sample
                  - key: players
                    values:
                    - "111"
                    - "222"
                  metadata:
                  - key: info
                    value: "Lorem ipsum dolor sit amet, consectetur adipiscing elit,\
                      \ sed do eiusmod tempor incididunt ut labore et dolore magna\
                      \ aliqua."
            schema:
              $ref: '#/components/schemas/UpdateDocumentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocumentResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      summary: Update document
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/content:
    get:
      description: "Get a document's contents. Certain content types, text/*, application/json,\
        \ and application/x-www-form-urlencoded. return the  \"content\" field, while\
        \ all other content types return a 'contentUrl' for retrieving the content."
      operationId: GetDocumentContent
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Version Key
        explode: true
        in: query
        name: versionKey
        required: false
        schema:
          type: string
        style: form
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentContentResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
            Location:
              $ref: '#/components/headers/Location'
      security:
      - ApiAuthorization: []
      summary: Get document's contents
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /documents/{documentId}/accessAttributes:
    delete:
      description: Delete a document's access attributes
      operationId: DeleteDocumentAccessAttributes
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDocumentAccessAttributesResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Delete document's access attributes
      tags:
      - Access Control
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    get:
      description: Retrieves a document's access attributes (only "admin" role can
        call API)
      operationId: GetDocumentAccessAttributes
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentAccessAttributesResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document access attributes
      tags:
      - Access Control
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    post:
      description: Add a document's access attributes (only "admin" role can call
        API)
      operationId: AddDocumentAccessAttributes
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDocumentAccessAttributesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocumentAccessAttributesResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      summary: Add document access attributes
      tags:
      - Access Control
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: Set a document's access attributes (only "admin" role can call
        API)
      operationId: SetDocumentAccessAttributes
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDocumentAccessAttributesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDocumentAccessAttributesResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      summary: Set document access attributes
      tags:
      - Access Control
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/tags:
    get:
      description: Get a listing of a document's tags
      operationId: GetDocumentTags
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Previous page of results token
        explode: true
        in: query
        name: previous
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentTagsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document's tags
      tags:
      - Document Tags
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    patch:
      description: Updates multiple tags to a document; this endpoint also accepts
        a different body parameter for updating a single tag
      operationId: UpdateDocumentTags
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Add_Key_Only_Tag:
                value:
                  tags:
                  - key: category
              Add_Key_and_Value_Tag:
                value:
                  tags:
                  - key: category
                    value: sample
              Add_Key_and_Values_Tag:
                value:
                  tags:
                  - key: players
                    values:
                    - "111"
                    - "222"
            schema:
              $ref: '#/components/schemas/AddDocumentTagsRequest'
        required: true
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Update document tags
      tags:
      - Document Tags
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
    post:
      description: Add multiple tags to a document; this endpoint also accepts a different
        body parameter for adding a single tag
      operationId: AddDocumentTags
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Whether to enable WebSocket real-time communication with the
          request
        explode: true
        in: query
        name: ws
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              Add_Key_Only_Tag:
                value:
                  key: category
              Add_Key_and_Value_Tag:
                value:
                  key: category
                  value: person
              Add_Key_and_Values_Tag:
                value:
                  key: category
                  values:
                  - person
                  - canadian
            schema:
              $ref: '#/components/schemas/AddDocumentTagsRequest'
        required: true
      responses:
        "201":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Add tag to document
      tags:
      - Document Tags
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: Set multiple tags to a document; this endpoint also accepts a different
        body parameter for setting a single tag
      operationId: SetDocumentTags
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Add_Key_Only_Tag:
                value:
                  tags:
                  - key: category
              Add_Key_and_Value_Tag:
                value:
                  tags:
                  - key: category
                    value: sample
              Add_Key_and_Values_Tag:
                value:
                  tags:
                  - key: players
                    values:
                    - "111"
                    - "222"
            schema:
              $ref: '#/components/schemas/AddDocumentTagsRequest'
        required: true
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Set document's tags
      tags:
      - Document Tags
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/tags/{tagKey}:
    delete:
      description: Delete a document tag by using its key
      operationId: DeleteDocumentTag
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Tag Key
        explode: false
        in: path
        name: tagKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Delete document tag
      tags:
      - Document Tags
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    get:
      description: Get a document tag by using its key
      operationId: GetDocumentTag
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Tag Key
        explode: false
        in: path
        name: tagKey
        required: true
        schema:
          type: string
        style: simple
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentTagResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document tag by key
      tags:
      - Document Tags
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    put:
      description: "Update any and all values of a document tag, by using its key;\
        \ you can supply one tag value or a list of tag values in the request body"
      operationId: SetDocumentTag
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Tag Key
        explode: false
        in: path
        name: tagKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDocumentTagKeyRequest'
        required: true
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Update document tag value(s)
      tags:
      - Document Tags
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/tags/{tagKey}/{tagValue}:
    delete:
      description: Delete a specific document tag's key/value combination; the request
        will be ignored if there is no valid key/value combination found
      operationId: DeleteDocumentTagAndValue
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Tag Key
        explode: false
        in: path
        name: tagKey
        required: true
        schema:
          type: string
        style: simple
      - description: Tag Key Value
        explode: false
        in: path
        name: tagValue
        required: true
        schema:
          type: string
        style: simple
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Delete document's tag value
      tags:
      - Document Tags
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /documents/tags:
    patch:
      description: This API request allows the adding/updating of multiple document
        tag(s) based on document(s) that have the matching tag.
      operationId: UpdateMatchingDocumentTags
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMatchingDocumentTagsRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMatchingDocumentTagsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Mass Update document tag(s)
      tags:
      - Document Tags
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/url:
    get:
      description: Returns a URL for the document's contents; this URL will expire
        (the default is 48 hours)
      operationId: GetDocumentUrl
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Version Key
        explode: true
        in: query
        name: versionKey
        required: false
        schema:
          type: string
        style: form
      - description: Indicates the number of hours request is valid for
        explode: true
        in: query
        name: duration
        required: false
        schema:
          type: integer
        style: form
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      - description: Set the Content-Disposition to inline
        explode: true
        in: query
        name: inline
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentUrlResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document content url
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /documents/upload:
    get:
      description: Returns a URL that can be used to upload document content and create
        a new document; this endpoint (whether GET or POST) is required in order to
        add content that is larger than 5 MB
      operationId: GetDocumentUpload
      parameters:
      - description: The upload file's path
        explode: true
        in: query
        name: path
        required: false
        schema:
          type: string
        style: form
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Indicates the size of the entity-body
        explode: true
        in: query
        name: contentLength
        required: false
        schema:
          type: integer
        style: form
      - description: Indicates the number of hours request is valid for
        explode: true
        in: query
        name: duration
        required: false
        schema:
          type: integer
        style: form
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentUrlResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get url to add large document
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    post:
      description: "Returns a URL that can be used to upload document content and\
        \ create a new document, while allowing metadata to also be sent; this endpoint\
        \ (whether GET or POST) is required in order to add content that is larger\
        \ than 5 MB"
      operationId: AddDocumentUpload
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Indicates the size of the entity-body
        explode: true
        in: query
        name: contentLength
        required: false
        schema:
          type: integer
        style: form
      - description: Indicates the number of hours request is valid for
        explode: true
        in: query
        name: duration
        required: false
        schema:
          type: integer
        style: form
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              Simple_File:
                value:
                  path: test.txt
                  contentType: text/plain
                  isBase64: false
                  content: This is sample data file
                  tags:
                  - key: category
                    value: sample
                  - key: players
                    values:
                    - "111"
                    - "222"
                  metadata:
                  - key: info
                    value: "Lorem ipsum dolor sit amet, consectetur adipiscing elit,\
                      \ sed do eiusmod tempor incididunt ut labore et dolore magna\
                      \ aliqua."
            schema:
              $ref: '#/components/schemas/AddDocumentUploadRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentUrlResponse'
          description: 201 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Add large document
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/upload:
    get:
      description: "Returns a URL that can be used to upload documents for a specific\
        \ documentId; this endpoint is required in order to add content that is larger\
        \ than 5 MB. If versions are enabled, this will create a new version of the\
        \ document."
      operationId: GetDocumentIdUpload
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Indicates the size of the entity-body
        explode: true
        in: query
        name: contentLength
        required: false
        schema:
          type: integer
        style: form
      - description: Indicates the number of hours request is valid for
        explode: true
        in: query
        name: duration
        required: false
        schema:
          type: integer
        style: form
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentUrlResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get url to update large document
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /documents/{documentId}/restore:
    put:
      description: Restores a soft deleted document
      operationId: SetDocumentRestore
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDocumentRestoreResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Restore soft deleted document
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /documents/compress:
    post:
      description: "Compress documents into an .ZIP archive file, and returns a S3\
        \ presigned url for the location of the archive file. The operation is async\
        \ and processing time depends on the number and size of documents included;\
        \ a 404 status code is returned until the file is ready."
      operationId: CompressDocuments
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentsCompressRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentsCompressResponse'
          description: 201 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Compress multiple documents into a .zip file
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /search:
    post:
      description: "Document search query request; \n\nSupports searching DynamoDB\
        \ for document(s) by a single TAG key and/or value. Value can be \"exacted\"\
        \ or \"begins_with\" matched. Search can be filtered to only check certain\
        \ documentIds (up to 100 documentIds accepted).\n\nIf using Enteprise TagSchema\
        \ Composite Keys feature then multiple tag(s) can be searched for.\n\nIf Typesense\
        \ is enabled, full text search is supported through the \"text\" parameter.\
        \ Full text search will look for the text in the \"content\" and/or document\
        \ \"metadata\".\n\nDocumentIds parameter allows you to filter your results\
        \ to a specific set of documents. \n\nSee requestBody examples below for commmon\
        \ examples."
      operationId: DocumentSearch
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Previous page of results token
        explode: true
        in: query
        name: previous
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              Search_By_Key:
                value:
                  query:
                    tag:
                      key: category
              Search_By_Value:
                value:
                  query:
                    tag:
                      key: category
                      eq: person
              Tag_Value_Begins_With:
                value:
                  query:
                    tag:
                      key: firstname
                      beginsWith: jo
              Search_By_Value_for_Specific_Documents:
                value:
                  query:
                    tag:
                      key: category
                      eq: person
                    documentIds:
                    - "1"
                    - "2"
              Typesense_Fulltext_Search:
                value:
                  query:
                    text: my search text
            schema:
              $ref: '#/components/schemas/DocumentSearchRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentSearchResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Document search
      tags:
      - Document Search
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/searchLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /searchFulltext:
    post:
      description: "Document full-text search (and more robust multi-tag search queries,\
        \ powered by OpenSearch); ONLY available with FormKiQ Enterprise"
      operationId: SearchFulltext
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentFulltextRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentFulltextResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Document full-text search
      tags:
      - Advanced Document Search
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /queryFulltext:
    post:
      description: "Endpoint for allowing custom, complex queries using the OpenSearch\
        \ search API (https://opensearch.org/docs/latest/opensearch/rest-api/search/);\
        \ ONLY available with FormKiQ Enterprise"
      operationId: QueryFulltext
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryFulltextRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryFulltextResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Direct opensearch search API
      tags:
      - Advanced Document Search
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/actions:
    get:
      description: Get document actions and their status
      operationId: GetDocumentActions
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentActionsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document actions
      tags:
      - Document Actions
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    post:
      description: |-
        Add one or more actions to a document; this appends actions and does not replace previous actions

        Each action type supports a different set of parameters as shown in the table below:

        ### Action Parameters

        | ActionType | Parameter | Description | Example |
        | -------- | ------- | ------- | ------- |
        | OCR  | ocrParseTypes | Ocr Parsing strategy to use | TEXT, FORMS, TABLES |
        | OCR | ocrEngine     | Ocr Engine to use | tesseract or textract |
        | OCR    | addPdfDetectedCharactersAsText | PDF Documents convert images to text | true or false |
        | FULLTEXT    | characterMax    | Maximum number of characters to add to Fulltext destination | -1 |
        | DOCUMENTTAGGING    | engine    | Tagging Engine to use | chatgpt |
        | DOCUMENTTAGGING    | tags    | Comma-deliminted list of keywords | author,title,description |
        | WEBHOOK    | url    | Webhook URL | https://yourdomain.com/webhook-endpoint |
        | NOTIFICATION    | notificationType | Type of Notification | email |
        | NOTIFICATION    | notificationToCc    | Notification Carbon Copy | <email>@yourdomain.com |
        | NOTIFICATION    | notificationToBcc    | Notification Blind Carbon Copy | <email>@yourdomain.com |
        | NOTIFICATION    | notificationSubject    | Notification Subject | Email Subject |
        | NOTIFICATION    | notificationText    | Notification as Text | Email Text |
        | NOTIFICATION    | notificationHtml    | Notification as Html | Email HTML Text |
        | QUEUE    | queueName    | Name of Queue | |
      operationId: AddDocumentActions
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDocumentActionsRequest'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocumentActionsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      summary: Add document action
      tags:
      - Document Actions
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/actions/retry:
    post:
      description: Retries all failed document action(s). Failed action status changes
        to "FAILED_RETRY" and a new "PENDING" action is created.
      operationId: AddDocumentRetryAction
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocumentActionsRetryResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      summary: Retries failed document action(s)
      tags:
      - Document Actions
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /documents/{documentId}/ocr:
    delete:
      description: "Delete a document's optical character recognition (OCR) result,\
        \ if exists; ONLY available with FormKiQ Pro and Enterprise"
      operationId: DeleteDocumentOcr
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Delete document ocr
      tags:
      - Document OCR
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/ocrLambdaApi200'
      x-accepts: application/json
    get:
      description: "Get a document's optical character recognition (OCR) result, if\
        \ exists; ONLY available with FormKiQ Pro and Enterprise"
      operationId: GetDocumentOcr
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: "Whether to return a \"contentUrl\", set value to 'true'"
        explode: true
        in: query
        name: contentUrl
        required: false
        schema:
          type: string
        style: form
      - description: "Returns raw 'text' of OCR content. e.g. AWS Textract returns\
          \ JSON, setting parameter to 'true' converts JSON to Text"
        explode: true
        in: query
        name: text
        required: false
        schema:
          type: string
        style: form
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentOcrResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document ocr content
      tags:
      - Document OCR
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/ocrLambdaApi200'
      x-accepts: application/json
    post:
      description: Document optical character recognition (OCR) request; extract text
        and data from a document; ONLY available with FormKiQ Pro and Enterprise
      operationId: AddDocumentOcr
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDocumentOcrRequest'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocumentOcrResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Perform document ocr
      tags:
      - Document OCR
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/ocrLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: Set a document's optical character recognition (OCR) result for
        a document; ONLY available with FormKiQ Pro and Enterprise
      operationId: SetDocumentOcr
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDocumentOcrRequest'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocumentOcrResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Set document ocr result
      tags:
      - Document OCR
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/ocrLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/versions:
    get:
      description: Get a listing of document content and metadata versions; ONLY available
        with FormKiQ Pro and Enterprise
      operationId: GetDocumentVersions
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentVersionsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document's versions
      tags:
      - Document Versions
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    put:
      description: Set document to a previous document version; ONLY available with
        FormKiQ Pro and Enterprise
      operationId: SetDocumentVersion
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDocumentVersionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDocumentVersionResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      summary: Set version of document
      tags:
      - Document Versions
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/versions/{versionKey}:
    delete:
      description: Delete a specific previous document version; ONLY available with
        FormKiQ Pro and Enterprise
      operationId: DeleteDocumentVersion
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Version Key
        explode: false
        in: path
        name: versionKey
        required: true
        schema:
          type: string
        style: simple
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Delete document version
      tags:
      - Document Versions
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /folders:
    get:
      description: Get list of documents in a folder
      operationId: GetFolderDocuments
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Index Key Identifier
        explode: true
        in: query
        name: indexKey
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFoldersResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document folders
      tags:
      - Document Folders
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/searchLambdaApi200'
      x-accepts: application/json
    post:
      description: Creates a new folder
      operationId: AddFolder
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFolderRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddFolderResponse'
          description: 201 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Add document folder
      tags:
      - Document Folders
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /folders/{indexKey}:
    delete:
      description: Delete a specific folder; folder must be empty
      operationId: DeleteFolder
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Index Key Identifier
        explode: false
        in: path
        name: indexKey
        required: true
        schema:
          type: string
        style: simple
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFolderResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Delete document folder
      tags:
      - Document Folders
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /shares:
    get:
      description: Get a listing of user folder/document shares; ONLY available with
        FormKiQ Enterprise
      operationId: GetUserShares
      parameters:
      - description: Group Identifier
        explode: true
        in: query
        name: group
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserSharesResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get user shared folders
      tags:
      - Document Shares
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /shares/folders/{indexKey}:
    post:
      description: Creates a new folder share; ONLY available with FormKiQ Enterprise
      operationId: AddFolderShare
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Index Key Identifier
        explode: false
        in: path
        name: indexKey
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddFolderShareRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddFolderShareResponse'
          description: 201 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      summary: Add folder share
      tags:
      - Document Shares
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /shares/{shareKey}:
    delete:
      description: Delete a specific document share; ONLY available with FormKiQ Enterprise
      operationId: DeleteShare
      parameters:
      - description: Share Identifier
        explode: false
        in: path
        name: shareKey
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteShareResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Delete folder share
      tags:
      - Document Shares
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /workflows:
    get:
      description: Get a listing of workflows; ONLY available with FormKiQ Enterprise
      operationId: GetWorkflows
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Filters Status
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - ACTIVE
          - INACTIVE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get workflows
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    post:
      description: Creates a new Workflow; ONLY available with FormKiQ Pro and Enterprise
      operationId: AddWorkflow
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWorkflowRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddWorkflowResponse'
          description: 201 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
          description: 400 BAD REQUEST
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Add workflow
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /workflows/{workflowId}:
    delete:
      description: Delete a Workflow; ONLY available with FormKiQ Pro and Enterprise
      operationId: DeleteWorkflow
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Workflow Identifier
        explode: false
        in: path
        name: workflowId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteWorkflowResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Delete workflow
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    get:
      description: Get a workflow; ONLY available with FormKiQ Enterprise
      operationId: GetWorkflow
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Workflow Identifier
        explode: false
        in: path
        name: workflowId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get workflow
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    put:
      description: Set a Workflow details; ONLY available with FormKiQ Pro and Enterprise
      operationId: SetWorkflow
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Workflow Identifier
        explode: false
        in: path
        name: workflowId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetWorkflowRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetWorkflowResponse'
          description: 20) OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
          description: 400 BAD REQUEST
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Add workflow
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /workflows/{workflowId}/documents:
    get:
      description: List documents in Workflow; ONLY available with FormKiQ Pro and
        Enterprise
      operationId: GetWorkflowDocuments
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Workflow Identifier
        explode: false
        in: path
        name: workflowId
        required: true
        schema:
          type: string
        style: simple
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowDocumentsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get list of documents in workflow
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/searchLambdaApi200'
      x-accepts: application/json
  /queues:
    get:
      description: Get a listing of queues; ONLY available with FormKiQ Enterprise
      operationId: GetQueues
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetQueuesResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get queues
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    post:
      description: Creates a new Queue; ONLY available with FormKiQ Pro and Enterprise
      operationId: AddQueue
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddQueueRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddQueueResponse'
          description: 201 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
          description: 400 BAD REQUEST
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Add queue
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /queues/{queueId}:
    delete:
      description: Delete a Queue; ONLY available with FormKiQ Pro and Enterprise
      operationId: DeleteQueue
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Queue Id
        explode: false
        in: path
        name: queueId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteQueueResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Delete queue
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    get:
      description: Get a queue; ONLY available with FormKiQ Enterprise
      operationId: GetQueue
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Queue Id
        explode: false
        in: path
        name: queueId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetQueueResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get queue
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /queues/{queueId}/documents:
    get:
      description: List documents in Workflow Queue; ONLY available with FormKiQ Pro
        and Enterprise
      operationId: GetWorkflowQueueDocuments
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Queue Id
        explode: false
        in: path
        name: queueId
        required: true
        schema:
          type: string
        style: simple
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWorkflowQueueDocumentsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get list of documents in queue
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/searchLambdaApi200'
      x-accepts: application/json
  /documents/{documentId}/workflows:
    get:
      description: Gets a document workflows; ONLY available with FormKiQ Pro and
        Enterprise
      operationId: GetDocumentWorkflows
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentWorkflowsResponse'
          description: 200 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
          description: 400 BAD REQUEST
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document workflows
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    post:
      description: Creates a document workflow; ONLY available with FormKiQ Pro and
        Enterprise
      operationId: AddDocumentWorkflow
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDocumentWorkflowRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocumentWorkflowResponse'
          description: 201 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
          description: 400 BAD REQUEST
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Add document workflow
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/workflows/{workflowId}:
    get:
      description: Gets a document workflow; ONLY available with FormKiQ Pro and Enterprise
      operationId: GetDocumentWorkflow
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Workflow Identifier
        explode: false
        in: path
        name: workflowId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentWorkflowResponse'
          description: 200 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
          description: 400 BAD REQUEST
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document workflow
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /documents/{documentId}/workflow/{workflowId}/decisions:
    post:
      description: Approve/Reject document in approval queue; ONLY available with
        FormKiQ Pro and Enterprise
      operationId: AddDocumentWorkflowDecisions
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Workflow Identifier
        explode: false
        in: path
        name: workflowId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDocumentWorkflowDecisionsRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocumentWorkflowDecisionsResponse'
          description: 201 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
          description: 400 BAD REQUEST
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Approve/Reject document in approval queue
      tags:
      - Document Workflows
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /tagSchemas:
    get:
      description: Returns the list of tagSchemas; ONLY available with FormKiQ Pro
        and Enterprise
      operationId: GetTagSchemas
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Previous page of results token
        explode: true
        in: query
        name: previous
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTagSchemasResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get tag schemas
      tags:
      - Tag Schema
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    post:
      description: Creates a new TagSchema; ONLY available with FormKiQ Pro and Enterprise
      operationId: AddTagSchema
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTagSchemaRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddTagSchemaResponse'
          description: 201 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
          description: 400 BAD REQUEST
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Add tag schemas
      tags:
      - Tag Schema
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /tagSchemas/{tagSchemaId}:
    delete:
      description: Delete a TagSchema; ONLY available with FormKiQ Pro and Enterprise
      operationId: DeleteTagSchema
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Tag Schema Identifier
        explode: false
        in: path
        name: tagSchemaId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Delete tag schema
      tags:
      - Tag Schema
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    get:
      description: "Retrieves a TagSchema's details, i.e., metadata; ONLY available\
        \ with FormKiQ Pro and Enterprise"
      operationId: GetTagSchema
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Tag Schema Identifier
        explode: false
        in: path
        name: tagSchemaId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTagSchemaResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get tag schema
      tags:
      - Tag Schema
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /documents/{documentId}/antivirus:
    put:
      description: Perform an Anti-Malware / Antivirus scan on a document; ONLY available
        with FormKiQ Pro and Enterprise
      operationId: SetAntivirus
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetAntivirusRequest'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetAntivirusResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Antivirus document scan
      tags:
      - Antivirus
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/antivirusLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/fulltext:
    delete:
      description: Remove full text search for a document from OpenSearch; ONLY available
        with FormKiQ Enterprise
      operationId: DeleteDocumentFulltext
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFulltextResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Delete document full-text
      tags:
      - Advanced Document Search
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200'
      x-accepts: application/json
    get:
      description: "Retrieve an OpenSearch document's details, i.e., metadata"
      operationId: GetDocumentFulltext
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentFulltextResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document's full-text
      tags:
      - Advanced Document Search
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200'
      x-accepts: application/json
    patch:
      description: Update a document in OpenSearch; ONLY available with FormKiQ Enterprise
      operationId: UpdateDocumentFulltext
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocumentFulltextRequest'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDocumentFulltextResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Update document's full-text
      tags:
      - Advanced Document Search
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: Set all text/tags found within a document to OpenSearch; ONLY available
        with FormKiQ Enterprise
      operationId: SetDocumentFulltext
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDocumentFulltextRequest'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetDocumentFulltextResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Set document's full-text
      tags:
      - Advanced Document Search
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /documents/{documentId}/fulltext/tags/{tagKey}:
    delete:
      description: Remove document tags from OpenSearch; ONLY available with FormKiQ
        Enterprise
      operationId: DeleteDocumentFulltextTag
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Tag Key
        explode: false
        in: path
        name: tagKey
        required: true
        schema:
          type: string
        style: simple
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Delete document full-text tag
      tags:
      - Advanced Document Search
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200'
      x-accepts: application/json
  /documents/{documentId}/fulltext/tags/{tagKey}/{tagValue}:
    delete:
      description: Remove document tag/value from OpenSearch; ONLY available with
        FormKiQ Enterprise
      operationId: DeleteDocumentFulltextTagAndValue
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Tag Key
        explode: false
        in: path
        name: tagKey
        required: true
        schema:
          type: string
        style: simple
      - description: Tag Key Value
        explode: false
        in: path
        name: tagValue
        required: true
        schema:
          type: string
        style: simple
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Delete document full-text tag/value
      tags:
      - Advanced Document Search
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/fulltextLambdaApi200'
      x-accepts: application/json
  /documents/{documentId}/syncs:
    get:
      description: Retrieve the document syncs with external services status
      operationId: GetDocumentSyncs
      parameters:
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Share Identifier
        explode: true
        in: query
        name: shareKey
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDocumentSyncResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get document syncs
      tags:
      - Documents
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /userActivities:
    get:
      description: Retrieve a user's activities
      operationId: GetUserActivities
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Fetch specific user activities
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserActivitesResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get user activities
      tags:
      - User Activities
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /documents/{documentId}/userActivities:
    get:
      description: Retrieve a user's activities
      operationId: GetDocumentUserActivities
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserActivitesResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get user activities
      tags:
      - User Activities
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /public/documents:
    post:
      description: |-
        Allow unauthenticated creation of new documents; must be enabled during installation (disabled by default)

        See POST /documents/{documentId}/tags for adding tags to document schema

        See POST /documents/{documentId}/actions for adding actions to document schema
      operationId: PublicAddDocument
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDocumentRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDocumentResponse'
          description: 201 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      summary: Public add document
      tags:
      - Public
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /public/webhooks/{webhooks+}:
    post:
      description: Receive an incoming public post to a specified webhook and creates
        a document based on the data sent; must be enabled during installation (disabled
        by default)
      operationId: PublicAddWebhook
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Web Hook Param
        explode: false
        in: path
        name: webhooks+
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentId'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      summary: Public add webhook
      tags:
      - Public
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /private/webhooks/{webhooks+}:
    post:
      description: Receive an incoming private webhook and creates a document based
        on the webhook's body; requires authentication
      operationId: AddWebhookDocument
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Web Hook Param
        explode: false
        in: path
        name: webhooks+
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentId'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Add webhook
      tags:
      - Webhooks
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /webhooks:
    get:
      description: "Return a list of webhooks; each webhook's id can be provided to\
        \ an external service, allowing data to be sent, received, and processed via\
        \ that webhook"
      operationId: GetWebhooks
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWebhooksResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get webhooks
      tags:
      - Webhooks
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    post:
      description: "Create a new webhook; once created, a webhook's id can be provided\
        \ to an external service, allowing data to be sent, received, and processed\
        \ via that webhook"
      operationId: AddWebhook
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWebhookRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddWebhookResponse'
          description: 201 CREATED
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Add webhook
      tags:
      - Webhooks
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /webhooks/{webhookId}:
    delete:
      description: "Delete a webhook; this will disable sending, receiving, or processing\
        \ of data from external services to this webhook"
      operationId: DeleteWebhook
      parameters:
      - description: Web Hook Param
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Delete webhook
      tags:
      - Webhooks
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    get:
      description: "Return a webhook's details, i.e., its metadata"
      operationId: GetWebhook
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Web Hook Param
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWebhookResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get webhook
      tags:
      - Webhooks
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    patch:
      description: "Updates a webhook's details, i.e., its metadata"
      operationId: UpdateWebhook
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Web Hook Param
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddWebhookRequest'
        required: true
      responses:
        "200":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Update webhook
      tags:
      - Webhooks
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /webhooks/{webhookId}/tags:
    get:
      description: Get a webhook's tags
      operationId: GetWebhookTags
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Web Hook Param
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetWebhookTagsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get webhook tags
      tags:
      - Webhooks
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
    post:
      description: Add a tag to a webhook
      operationId: AddWebhookTag
      parameters:
      - description: Web Hook Param
        explode: false
        in: path
        name: webhookId
        required: true
        schema:
          type: string
        style: simple
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              Add_Key_Only_Tag:
                value:
                  key: category
              Add_Key_and_Value_Tag:
                value:
                  key: category
                  value: person
            schema:
              $ref: '#/components/schemas/AddWebhookTagRequest'
        required: true
      responses:
        "201":
          content: {}
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Add webhook tag
      tags:
      - Webhooks
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi201'
      x-content-type: application/json
      x-accepts: application/json
  /onlyoffice/{documentId}/edit:
    post:
      description: Provide ONLYOFFICE integration for editing documents; ONLY available
        with FormKiQ Enterprise
      operationId: OnlyOfficeDocumentEdit
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnlyOfficeDocumentEditRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlyOfficeDocumentResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Edit onlyoffice document
      tags:
      - Onlyoffice
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/onlyOfficeLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /onlyoffice/new:
    post:
      description: Provide ONLYOFFICE integration for the creation of new documents;
        ONLY available with FormKiQ Enterprise
      operationId: OnlyOfficeDocumentNew
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OnlyOfficeDocumentNewRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlyOfficeDocumentResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Create onlyoffice document
      tags:
      - Onlyoffice
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/onlyOfficeLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /onlyoffice/{documentId}/save:
    post:
      description: Save an updated document for ONLYOFFICE integration. ONLY available
        with FormKiQ Enterprise
      operationId: OnlyOfficeDocumentSave
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnlyOfficeDocumentSaveResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      summary: Save onlyoffice document
      tags:
      - Onlyoffice
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/onlyOfficeLambdaApi200'
      x-accepts: application/json
  /indices/{indexType}/move:
    post:
      description: Perform an Folder Index Move
      operationId: IndexFolderMove
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Index Type
        explode: false
        in: path
        name: indexType
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexFolderMoveRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexFolderMoveResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      tags:
      - Custom Index
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /indices/{indexType}/{indexKey}:
    delete:
      description: Perform a delete on the Folder Index
      operationId: DeleteIndex
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Index Key Identifier
        explode: false
        in: path
        name: indexKey
        required: true
        schema:
          type: string
        style: simple
      - description: Index Type
        explode: false
        in: path
        name: indexType
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteIndicesResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      tags:
      - Custom Index
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /indices/search:
    post:
      description: Perform a search on a index; this is currently available for both
        folder and tag indices
      operationId: IndexSearch
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Previous page of results token
        explode: true
        in: query
        name: previous
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexSearchRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexSearchResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      tags:
      - Custom Index
      - Tag Index
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /esignature/docusign/{documentId}:
    post:
      description: Create a DocuSign E-Signature request; ONLY available with FormKiQ
        Enterprise
      operationId: AddEsignatureDocusign
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Document Identifier
        explode: false
        in: path
        name: documentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddEsignatureDocusignRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddEsignatureDocusignResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorsResponse'
          description: 400 OK
      security:
      - ApiAuthorization: []
      summary: Create E-signature request
      tags:
      - E-Signature
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/esignatureLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /esignature/docusign/config:
    get:
      description: Get DocuSign configuration info; ONLY available with FormKiQ Enterprise
      operationId: GetEsignatureDocusignConfig
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEsignatureDocusignConfigResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Get E-signature config
      tags:
      - E-Signature
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/esignatureLambdaApi200'
      x-accepts: application/json
    put:
      description: "Set DocuSign configuration, required for integration; ONLY available\
        \ with FormKiQ Enterprise"
      operationId: SetEsignatureDocusignConfig
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetEsignatureDocusignConfigRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetEsignatureDocusignConfigResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Set E-signature config
      tags:
      - E-Signature
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/esignatureLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /esignature/docusign/events:
    post:
      description: DocuSign callback URL handler; ONLY available with FormKiQ Enterprise
      operationId: AddEsignatureDocusignEvents
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddEsignatureDocusignResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      summary: Add E-signature event
      tags:
      - E-Signature
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/esignatureLambdaApi200'
      x-accepts: application/json
  /groups:
    get:
      description: Returns the list of user groups configured in the application
      operationId: GetGroups
      parameters:
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGroupsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get configured system group(s)
      tags:
      - User Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /groups/{groupName}/users:
    get:
      description: Returns the list of users in a group
      operationId: GetUsersInGroup
      parameters:
      - description: Fetch documents inserted on a certain date (yyyy-MM-dd)
        explode: false
        in: path
        name: groupName
        required: true
        schema:
          type: string
        style: simple
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersInGroupResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get users in a group
      tags:
      - User Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/lambdaApi200'
      x-accepts: application/json
  /cases:
    get:
      description: Returns a list of the Cases; ONLY available with FormKiQ Enterprise
      operationId: GetCases
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCasesResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get Case listing
      tags:
      - Case Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/caseManagementLambdaApi200'
      x-accepts: application/json
    post:
      description: Adds new case; ONLY available with FormKiQ Enterprise
      operationId: AddCase
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCaseRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCaseResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Add New Case
      tags:
      - Case Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/caseManagementLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /cases/{caseId}:
    get:
      description: Returns a Case; ONLY available with FormKiQ Enterprise
      operationId: GetCase
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Case Identifier
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCaseResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get Case details
      tags:
      - Case Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/caseManagementLambdaApi200'
      x-accepts: application/json
    patch:
      description: Updates existing case; ONLY available with FormKiQ Enterprise
      operationId: UpdateCase
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Case Identifier
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCaseRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCaseResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Update existing Case
      tags:
      - Case Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/caseManagementLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /cases/{caseId}/documents:
    get:
      description: Returns documents in a Case; ONLY available with FormKiQ Enterprise
      operationId: GetCaseDocuments
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Case Identifier
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCaseDocumentsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get list of document in a case
      tags:
      - Case Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/caseManagementLambdaApi200'
      x-accepts: application/json
  /cases/{caseId}/tasks/{taskId}:
    patch:
      description: Updates existing task; ONLY available with FormKiQ Enterprise
      operationId: UpdateTask
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Case Identifier
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      - description: Task Identifier
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTaskResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Update existing Task
      tags:
      - Case Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/caseManagementLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /cases/{caseId}/tasks/{taskId}/documents:
    get:
      description: Returns a list documents in a Case; ONLY available with FormKiQ
        Enterprise
      operationId: GetTaskDocuments
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Case Identifier
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      - description: Task Identifier
        explode: false
        in: path
        name: taskId
        required: true
        schema:
          type: string
        style: simple
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCaseDocumentsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get list of document in a task
      tags:
      - Case Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/caseManagementLambdaApi200'
      x-accepts: application/json
  /cases/{caseId}/nigos/{nigoId}:
    patch:
      description: Updates existing nigo; ONLY available with FormKiQ Enterprise
      operationId: UpdateNigo
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Case Identifier
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      - description: Nigo Identifier
        explode: false
        in: path
        name: nigoId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNigoRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateNigoResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/AccessControlAllowOrigin'
            Access-Control-Allow-Methods:
              $ref: '#/components/headers/AccessControlAllowMethods'
            Access-Control-Allow-Headers:
              $ref: '#/components/headers/AccessControlAllowHeaders'
      security:
      - ApiAuthorization: []
      summary: Update existing Nigo
      tags:
      - Case Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/caseManagementLambdaApi200'
      x-content-type: application/json
      x-accepts: application/json
  /cases/{caseId}/nigos/{nigoId}/documents:
    get:
      description: Returns a list documents in a Case; ONLY available with FormKiQ
        Enterprise
      operationId: GetNigoDocuments
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Case Identifier
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      - description: Nigo Identifier
        explode: false
        in: path
        name: nigoId
        required: true
        schema:
          type: string
        style: simple
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCaseDocumentsResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get list of document in a task
      tags:
      - Case Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/caseManagementLambdaApi200'
      x-accepts: application/json
  /cases/{caseId}/tasks:
    get:
      description: Returns a Case; ONLY available with FormKiQ Enterprise
      operationId: GetCaseTasks
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Case Identifier
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCaseTasksResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get list of tasks in a case
      tags:
      - Case Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/caseManagementLambdaApi200'
      x-accepts: application/json
  /cases/{caseId}/nigos:
    get:
      description: Returns a Nigos of Case; ONLY available with FormKiQ Enterprise
      operationId: GetCaseNigos
      parameters:
      - description: Site Identifier
        explode: true
        in: query
        name: siteId
        required: false
        schema:
          type: string
        style: form
      - description: Case Identifier
        explode: false
        in: path
        name: caseId
        required: true
        schema:
          type: string
        style: simple
      - description: Next page of results token
        explode: true
        in: query
        name: next
        required: false
        schema:
          type: string
        style: form
      - description: Limit Results
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: "10"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCaseNigosResponse'
          description: 200 OK
          headers:
            Access-Control-Allow-Origin:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Methods:
              explode: false
              schema:
                type: string
              style: simple
            Access-Control-Allow-Headers:
              explode: false
              schema:
                type: string
              style: simple
      security:
      - ApiAuthorization: []
      summary: Get list of Nigos in a case
      tags:
      - Case Management
      x-amazon-apigateway-integration:
        $ref: '#/components/x-amazon-apigateway-integrations/caseManagementLambdaApi200'
      x-accepts: application/json
components:
  headers:
    AccessControlAllowOrigin:
      explode: false
      schema:
        type: string
      style: simple
    AccessControlAllowMethods:
      explode: false
      schema:
        type: string
      style: simple
    AccessControlAllowHeaders:
      explode: false
      schema:
        type: string
      style: simple
    Location:
      explode: false
      schema:
        type: string
      style: simple
  parameters:
    versionKeyPath:
      description: Version Key
      explode: false
      in: path
      name: versionKey
      required: true
      schema:
        type: string
      style: simple
    versionKeyParam:
      description: Version Key
      explode: true
      in: query
      name: versionKey
      required: false
      schema:
        type: string
      style: form
    webhooksParam:
      description: Web Hook Param
      explode: false
      in: path
      name: webhooks+
      required: true
      schema:
        type: string
      style: simple
    webhookIdParam:
      description: Web Hook Param
      explode: false
      in: path
      name: webhookId
      required: true
      schema:
        type: string
      style: simple
    shareKey:
      description: Share Identifier
      explode: false
      in: path
      name: shareKey
      required: true
      schema:
        type: string
      style: simple
    shareKeyParam:
      description: Share Identifier
      explode: true
      in: query
      name: shareKey
      required: false
      schema:
        type: string
      style: form
    siteIdParam:
      description: Site Identifier
      explode: true
      in: query
      name: siteId
      required: false
      schema:
        type: string
      style: form
    caseIdParam:
      description: Case Identifier
      explode: false
      in: path
      name: caseId
      required: true
      schema:
        type: string
      style: simple
    taskIdParam:
      description: Task Identifier
      explode: false
      in: path
      name: taskId
      required: true
      schema:
        type: string
      style: simple
    nigoIdParam:
      description: Nigo Identifier
      explode: false
      in: path
      name: nigoId
      required: true
      schema:
        type: string
      style: simple
    documentSearchDeleted:
      description: Fetch soft deleted documents
      explode: true
      in: query
      name: deleted
      required: false
      schema:
        type: boolean
      style: form
    wsParam:
      description: Whether to enable WebSocket real-time communication with the request
      explode: true
      in: query
      name: ws
      required: false
      schema:
        type: string
      style: form
    groupParam:
      description: Group Identifier
      explode: true
      in: query
      name: group
      required: false
      schema:
        type: string
      style: form
    providerParam:
      description: Provider Identifier
      explode: true
      in: query
      name: provider
      required: true
      schema:
        type: string
      style: form
    statusParam:
      description: Filters Status
      explode: true
      in: query
      name: status
      required: false
      schema:
        enum:
        - ACTIVE
        - INACTIVE
        type: string
      style: form
    limitParam:
      description: Limit Results
      explode: true
      in: query
      name: limit
      required: false
      schema:
        default: "10"
        type: string
      style: form
    nextParam:
      description: Next page of results token
      explode: true
      in: query
      name: next
      required: false
      schema:
        type: string
      style: form
    apiKeyParam:
      description: API Key
      explode: false
      in: path
      name: apiKey
      required: true
      schema:
        type: string
      style: simple
    folderIdParam:
      description: Folder Identifier
      explode: false
      in: path
      name: folderId
      required: true
      schema:
        type: string
      style: simple
    documentIdParam:
      description: Document Identifier
      explode: false
      in: path
      name: documentId
      required: true
      schema:
        type: string
      style: simple
    permissionKeyParam:
      description: Permission Identifier
      explode: false
      in: path
      name: permissionKey
      required: true
      schema:
        type: string
      style: simple
    queueIdParam:
      description: Queue Id
      explode: false
      in: path
      name: queueId
      required: true
      schema:
        type: string
      style: simple
    workflowIdParam:
      description: Workflow Identifier
      explode: false
      in: path
      name: workflowId
      required: true
      schema:
        type: string
      style: simple
    tagSchemaIdParam:
      description: Tag Schema Identifier
      explode: false
      in: path
      name: tagSchemaId
      required: true
      schema:
        type: string
      style: simple
    tagkeyParam:
      description: Tag Key
      explode: false
      in: path
      name: tagKey
      required: true
      schema:
        type: string
      style: simple
    tagvalueParam:
      description: Tag Key Value
      explode: false
      in: path
      name: tagValue
      required: true
      schema:
        type: string
      style: simple
    contentLengthParam:
      description: Indicates the size of the entity-body
      explode: true
      in: query
      name: contentLength
      required: false
      schema:
        type: integer
      style: form
    durationParam:
      description: Indicates the number of hours request is valid for
      explode: true
      in: query
      name: duration
      required: false
      schema:
        type: integer
      style: form
    contentUrlParam:
      description: "Whether to return a \"contentUrl\", set value to 'true'"
      explode: true
      in: query
      name: contentUrl
      required: false
      schema:
        type: string
      style: form
    textParam:
      description: "Returns raw 'text' of OCR content. e.g. AWS Textract returns JSON,\
        \ setting parameter to 'true' converts JSON to Text"
      explode: true
      in: query
      name: text
      required: false
      schema:
        type: string
      style: form
    indexKeyQueryParam:
      description: Index Key Identifier
      explode: true
      in: query
      name: indexKey
      required: false
      schema:
        type: string
      style: form
    indexKeyParam:
      description: Index Key Identifier
      explode: false
      in: path
      name: indexKey
      required: true
      schema:
        type: string
      style: simple
    indexTypeParam:
      description: Index Type
      explode: false
      in: path
      name: indexType
      required: true
      schema:
        type: string
      style: simple
  responses:
    "200Cors":
      content: {}
      description: 200 OK
      headers:
        Access-Control-Allow-Origin:
          explode: false
          schema:
            type: string
          style: simple
        Access-Control-Allow-Methods:
          explode: false
          schema:
            type: string
          style: simple
        Access-Control-Allow-Headers:
          explode: false
          schema:
            type: string
          style: simple
  schemas:
    ValidationErrorsResponse:
      properties:
        errors:
          description: List of errors
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
      type: object
    ValidationError:
      properties:
        key:
          description: Error Key
          type: string
        error:
          description: Error Message
          type: string
      type: object
    IndexFolderMoveRequest:
      example:
        source: source
        target: target
      properties:
        source:
          description: Source path
          type: string
        target:
          description: Target path
          type: string
      type: object
    SetDocumentTagKeyRequest:
      example:
        values:
        - values
        - values
        value: value
      properties:
        value:
          description: Tag value
          type: string
        values:
          description: Tag values
          items:
            type: string
          type: array
      type: object
    DeleteIndicesResponse:
      example:
        message: message
      properties:
        message:
          description: response message
          type: string
      type: object
    UpdateMatchingDocumentTagsResponse:
      example:
        message: message
      properties:
        message:
          description: response message
          type: string
      type: object
    IndexFolderMoveResponse:
      example:
        message: message
      properties:
        message:
          description: Folder move message
          type: string
      type: object
    IndexSearchRequest:
      example:
        indexType: indexType
      properties:
        indexType:
          description: The name of the index to search
          type: string
      type: object
    IndexSearchResponse:
      example:
        next: next
        previous: previous
        values:
        - value: value
        - value: value
      properties:
        next:
          description: Next page of results token
          type: string
        previous:
          description: Previous page of results token
          type: string
        values:
          description: List of search results
          items:
            $ref: '#/components/schemas/IndexSearch'
          type: array
      type: object
    IndexSearch:
      example:
        value: value
      properties:
        value:
          description: value of index
          type: string
      type: object
    GetDocumentContentResponse:
      example:
        contentUrl: contentUrl
        contentType: contentType
        isBase64: true
        content: content
      properties:
        content:
          description: Document content
          type: string
        contentUrl:
          description: URL to retrieve document content
          type: string
        contentType:
          description: Document Content-Type
          type: string
        isBase64:
          description: Is the content Base64-encoded?
          type: boolean
      type: object
    GetDocumentVersionsResponse:
      example:
        next: next
        documents:
        - path: path
          deepLinkPath: deepLinkPath
          insertedDate: insertedDate
          lastModifiedDate: lastModifiedDate
          s3version: s3version
          checksum: checksum
          documentId: documentId
          contentLength: 0
          contentType: contentType
          userId: userId
          version: version
          versionKey: versionKey
        - path: path
          deepLinkPath: deepLinkPath
          insertedDate: insertedDate
          lastModifiedDate: lastModifiedDate
          s3version: s3version
          checksum: checksum
          documentId: documentId
          contentLength: 0
          contentType: contentType
          userId: userId
          version: version
          versionKey: versionKey
      properties:
        next:
          description: Next page of results token
          type: string
        documents:
          description: List of document versions
          items:
            $ref: '#/components/schemas/DocumentVersion'
          type: array
      type: object
    AddFolderRequest:
      example:
        path: path
      properties:
        path:
          description: Path of Folder to create
          type: string
      type: object
    AddFolderResponse:
      example:
        indexKey: indexKey
        message: message
      properties:
        message:
          description: Response Message
          type: string
        indexKey:
          description: Folder Index Key
          type: string
      type: object
    GetQueuesResponse:
      example:
        next: next
        queues:
        - queueId: queueId
          name: name
        - queueId: queueId
          name: name
      properties:
        next:
          description: Next page of results token
          type: string
        queues:
          description: List of queues
          items:
            $ref: '#/components/schemas/Queue'
          type: array
      type: object
    Queue:
      example:
        queueId: queueId
        name: name
      properties:
        name:
          description: Name of Queue
          type: string
        queueId:
          description: Queue identifier
          type: string
      type: object
    GetWorkflowsResponse:
      example:
        next: next
        workflows:
        - insertedDate: insertedDate
          name: name
          inUse: true
          description: description
          userId: userId
          workflowId: workflowId
          status: ACTIVE
        - insertedDate: insertedDate
          name: name
          inUse: true
          description: description
          userId: userId
          workflowId: workflowId
          status: ACTIVE
      properties:
        next:
          description: Next page of results token
          type: string
        workflows:
          description: List of workflows
          items:
            $ref: '#/components/schemas/WorkflowSummary'
          type: array
      type: object
    GetQueueResponse:
      example:
        name: name
      properties:
        name:
          description: Queue name
          type: string
      type: object
    GetWorkflowResponse:
      example:
        name: name
        inUse: true
        description: description
        steps:
        - stepId: stepId
          action:
            queueId: queueId
            metadata:
              key: metadata
            insertedDate: insertedDate
            type: ANTIVIRUS
            message: message
            userId: userId
            parameters:
              key: parameters
            workflowId: workflowId
            startDate: startDate
            completedDate: completedDate
            status: COMPLETE
            workflowStepId: workflowStepId
          decisions:
          - nextStepId: nextStepId
            type: APPROVE
          - nextStepId: nextStepId
            type: APPROVE
          queue:
            queueId: queueId
            approvalGroups:
            - approvalGroups
            - approvalGroups
        - stepId: stepId
          action:
            queueId: queueId
            metadata:
              key: metadata
            insertedDate: insertedDate
            type: ANTIVIRUS
            message: message
            userId: userId
            parameters:
              key: parameters
            workflowId: workflowId
            startDate: startDate
            completedDate: completedDate
            status: COMPLETE
            workflowStepId: workflowStepId
          decisions:
          - nextStepId: nextStepId
            type: APPROVE
          - nextStepId: nextStepId
            type: APPROVE
          queue:
            queueId: queueId
            approvalGroups:
            - approvalGroups
            - approvalGroups
        status: ACTIVE
      properties:
        name:
          description: Workflow name
          type: string
        description:
          description: Workflow description
          type: string
        inUse:
          description: Whether the Workflow is in use
          type: boolean
        status:
          enum:
          - ACTIVE
          - INACTIVE
          type: string
        steps:
          description: Workflow steps
          items:
            $ref: '#/components/schemas/WorkflowStep'
          type: array
      type: object
    WorkflowStep:
      example:
        stepId: stepId
        action:
          queueId: queueId
          metadata:
            key: metadata
          insertedDate: insertedDate
          type: ANTIVIRUS
          message: message
          userId: userId
          parameters:
            key: parameters
          workflowId: workflowId
          startDate: startDate
          completedDate: completedDate
          status: COMPLETE
          workflowStepId: workflowStepId
        decisions:
        - nextStepId: nextStepId
          type: APPROVE
        - nextStepId: nextStepId
          type: APPROVE
        queue:
          queueId: queueId
          approvalGroups:
          - approvalGroups
          - approvalGroups
      properties:
        stepId:
          description: Workflow Step Identifier
          type: string
        action:
          $ref: '#/components/schemas/DocumentAction'
        queue:
          $ref: '#/components/schemas/WorkflowQueue'
        decisions:
          description: Workflow Decisions
          items:
            $ref: '#/components/schemas/WorkflowStepDecision'
          type: array
      type: object
    WorkflowQueue:
      example:
        queueId: queueId
        approvalGroups:
        - approvalGroups
        - approvalGroups
      properties:
        queueId:
          description: Queue Id
          type: string
        approvalGroups:
          items:
            type: string
          type: array
      type: object
    WorkflowSummary:
      example:
        insertedDate: insertedDate
        name: name
        inUse: true
        description: description
        userId: userId
        workflowId: workflowId
        status: ACTIVE
      properties:
        name:
          description: Name of Workflow
          type: string
        workflowId:
          description: Workflow identifier
          type: string
        description:
          description: Description of Workflow
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        userId:
          description: User who created workflow
          type: string
        inUse:
          description: Whether the Workflow is in use
          type: boolean
        status:
          description: Type of Document
          enum:
          - ACTIVE
          - INACTIVE
          type: string
      type: object
    GetUserSharesResponse:
      example:
        next: next
        shares:
        - path: path
          permissionType: GROUP
          permissions:
          - READ
          - READ
          siteId: siteId
          shareKey: shareKey
          type: FOLDER
          userId: userId
          group: group
        - path: path
          permissionType: GROUP
          permissions:
          - READ
          - READ
          siteId: siteId
          shareKey: shareKey
          type: FOLDER
          userId: userId
          group: group
      properties:
        next:
          description: Next page of results token
          type: string
        shares:
          description: List of user's shares
          items:
            $ref: '#/components/schemas/UserShare'
          type: array
      type: object
    UserShare:
      example:
        path: path
        permissionType: GROUP
        permissions:
        - READ
        - READ
        siteId: siteId
        shareKey: shareKey
        type: FOLDER
        userId: userId
        group: group
      properties:
        group:
          description: Name of Share Group
          type: string
        shareKey:
          description: Share Identifier
          type: string
        type:
          description: Type of Document
          enum:
          - FOLDER
          type: string
        permissions:
          description: List of share permissions
          items:
            enum:
            - READ
            - WRITE
            - DELETE
            type: string
          type: array
        siteId:
          description: Site Identifier
          type: string
        path:
          description: Path or Name of document
          type: string
        userId:
          description: User who created share
          type: string
        permissionType:
          description: Type of share
          enum:
          - GROUP
          type: string
      type: object
    GetDocumentTagsResponse:
      example:
        next: next
        previous: previous
        tags:
        - insertedDate: insertedDate
          values:
          - values
          - values
          documentId: documentId
          type: type
          userId: userId
          value: value
          key: key
        - insertedDate: insertedDate
          values:
          - values
          - values
          documentId: documentId
          type: type
          userId: userId
          value: value
          key: key
      properties:
        next:
          description: Next page of results token
          type: string
        previous:
          description: Previous page of results token
          type: string
        tags:
          description: List of tags
          items:
            $ref: '#/components/schemas/DocumentTag'
          type: array
      type: object
    SetDocumentVersionRequest:
      example:
        versionKey: versionKey
      properties:
        versionKey:
          description: "VersionKey returned by the GET /documents/{documentId}/versions\
            \ to revert to"
          type: string
      type: object
    SetDocumentVersionResponse:
      example:
        message: message
      properties:
        message:
          description: Response Message
          type: string
      type: object
    DocumentSearch:
      description: Document tag search criteria
      example:
        meta:
          path: path
          indexFilterBeginsWith: indexFilterBeginsWith
          indexType: folder
          folder: folder
        text: text
        tag:
          eqOr:
          - eqOr
          - eqOr
          beginsWith: beginsWith
          eq: eq
          key: key
        tags:
        - eq: eq
          key: key
        - eq: eq
          key: key
        documentIds:
        - documentIds
        - documentIds
      properties:
        text:
          description: Full text search
          type: string
        meta:
          $ref: '#/components/schemas/DocumentSearchMeta'
        tag:
          $ref: '#/components/schemas/DocumentSearchTag'
        tags:
          description: List of Composite Key tags to filter search results on
          items:
            $ref: '#/components/schemas/DocumentCompositeSearchTag'
          type: array
        documentIds:
          description: List of DocumentIds to filter search results on
          items:
            type: string
          type: array
      type: object
    DocumentId:
      example:
        siteId: siteId
        documentId: documentId
      properties:
        documentId:
          description: Document Identifier
          type: string
        siteId:
          description: Site Identifier
          type: string
      required:
      - documentId
      type: object
    AddWebhookResponse:
      example:
        webhookId: webhookId
        siteId: siteId
      properties:
        webhookId:
          type: string
        siteId:
          description: Site Identifier
          type: string
      type: object
    AddDocumentResponse:
      example:
        uploadUrl: uploadUrl
        documents:
        - uploadUrl: uploadUrl
          documentId: documentId
        - uploadUrl: uploadUrl
          documentId: documentId
        siteId: siteId
        documentId: documentId
      properties:
        documentId:
          description: Document Identifier
          type: string
        siteId:
          description: Site Identifier
          type: string
        uploadUrl:
          description: Url to upload document to
          type: string
        documents:
          description: List of child documents
          items:
            $ref: '#/components/schemas/AddChildDocumentResponse'
          type: array
      type: object
    AddChildDocumentResponse:
      example:
        uploadUrl: uploadUrl
        documentId: documentId
      properties:
        documentId:
          description: Document Identifier
          type: string
        uploadUrl:
          description: Url to upload document to
          type: string
      type: object
    GetDocumentUrlResponse:
      example:
        documentId: documentId
        url: url
      properties:
        documentId:
          description: Document Identifier
          type: string
        url:
          description: Document content url
          type: string
      type: object
    GetDocumentResponse:
      example:
        metadata:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
        deepLinkPath: deepLinkPath
        lastModifiedDate: lastModifiedDate
        documents:
        - path: path
          versionId: versionId
          deepLinkPath: deepLinkPath
          insertedDate: insertedDate
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          checksum: checksum
          documentId: documentId
          contentLength: 6
          contentType: contentType
          userId: userId
        - path: path
          versionId: versionId
          deepLinkPath: deepLinkPath
          insertedDate: insertedDate
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          checksum: checksum
          documentId: documentId
          contentLength: 6
          contentType: contentType
          userId: userId
        belongsToDocumentId: belongsToDocumentId
        userId: userId
        path: path
        versionId: versionId
        insertedDate: insertedDate
        checksum: checksum
        siteId: siteId
        documentId: documentId
        contentLength: 0
        contentType: contentType
      properties:
        siteId:
          description: Site Identifier
          type: string
        path:
          description: Path or Name of document
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        lastModifiedDate:
          description: Last Modified Timestamp
          type: string
        checksum:
          description: "Document checksum, changes when document file changes"
          type: string
        documentId:
          description: Document Identifier
          type: string
        contentType:
          description: Document Content-Type
          type: string
        userId:
          description: User who added document
          type: string
        contentLength:
          description: Document size
          type: integer
        versionId:
          description: Document version
          type: string
        documents:
          description: List of child documents
          items:
            $ref: '#/components/schemas/ChildDocument'
          type: array
        belongsToDocumentId:
          description: Parent Document Identifier
          type: string
        metadata:
          description: List of document Metadata
          items:
            $ref: '#/components/schemas/DocumentMetadata'
          type: array
      required:
      - documentId
      type: object
    ChildDocument:
      example:
        path: path
        versionId: versionId
        deepLinkPath: deepLinkPath
        insertedDate: insertedDate
        lastModifiedDate: lastModifiedDate
        belongsToDocumentId: belongsToDocumentId
        checksum: checksum
        documentId: documentId
        contentLength: 6
        contentType: contentType
        userId: userId
      properties:
        path:
          description: Path or Name of document
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        lastModifiedDate:
          description: Last Modified Timestamp
          type: string
        checksum:
          description: "Document checksum, changes when document file changes"
          type: string
        documentId:
          description: Document Identifier
          type: string
        contentType:
          description: Document Content-Type
          type: string
        userId:
          description: User who added document
          type: string
        contentLength:
          description: Document size
          type: integer
        versionId:
          description: Document version
          type: string
        belongsToDocumentId:
          description: Parent Document Identifier
          type: string
      required:
      - documentId
      type: object
    DocumentsCompressRequest:
      example:
        documentIds:
        - documentIds
        - documentIds
      properties:
        documentIds:
          description: Documents to compress
          items:
            type: string
          type: array
      required:
      - documentIds
      type: object
    DocumentsCompressResponse:
      example:
        downloadUrl: downloadUrl
      properties:
        downloadUrl:
          description: Archive download URL
          type: string
      type: object
    DocumentFulltextRequest:
      description: Document full text search
      example:
        query:
          page: 0
          text: text
          tags:
          - eqOr:
            - eqOr
            - eqOr
            eq: eq
            key: key
          - eqOr:
            - eqOr
            - eqOr
            eq: eq
            key: key
        responseFields:
          tags:
          - tags
          - tags
      properties:
        query:
          $ref: '#/components/schemas/DocumentFulltextSearch'
        responseFields:
          $ref: '#/components/schemas/SearchResponseFields'
      required:
      - query
      type: object
    DocumentFulltextSearch:
      description: Document full text search criteria
      example:
        page: 0
        text: text
        tags:
        - eqOr:
          - eqOr
          - eqOr
          eq: eq
          key: key
        - eqOr:
          - eqOr
          - eqOr
          eq: eq
          key: key
      properties:
        page:
          description: Result page to return (starting at 1)
          type: integer
        text:
          description: Full text search
          type: string
        tags:
          description: List of search tags
          items:
            $ref: '#/components/schemas/DocumentFulltextTag'
          type: array
      type: object
    DocumentFulltextTag:
      example:
        eqOr:
        - eqOr
        - eqOr
        eq: eq
        key: key
      properties:
        eq:
          description: Searches for strings that eq
          type: string
        eqOr:
          description: Searches for ANY strings that eq
          items:
            type: string
          type: array
        key:
          description: Tag key to search
          type: string
      required:
      - key
      type: object
    DocumentSearchRequest:
      description: Document search tag criteria
      example:
        query:
          meta:
            path: path
            indexFilterBeginsWith: indexFilterBeginsWith
            indexType: folder
            folder: folder
          text: text
          tag:
            eqOr:
            - eqOr
            - eqOr
            beginsWith: beginsWith
            eq: eq
            key: key
          tags:
          - eq: eq
            key: key
          - eq: eq
            key: key
          documentIds:
          - documentIds
          - documentIds
        responseFields:
          tags:
          - tags
          - tags
      properties:
        query:
          $ref: '#/components/schemas/DocumentSearch'
        responseFields:
          $ref: '#/components/schemas/SearchResponseFields'
      required:
      - query
      type: object
    SearchResponseFields:
      example:
        tags:
        - tags
        - tags
      properties:
        tags:
          items:
            type: string
          type: array
    DocumentSearchMeta:
      example:
        path: path
        indexFilterBeginsWith: indexFilterBeginsWith
        indexType: folder
        folder: folder
      properties:
        folder:
          description: Searches for a folder
          type: string
        path:
          description: Searches for a Path of document
          type: string
        indexType:
          description: Searches in an index
          enum:
          - folder
          type: string
        indexFilterBeginsWith:
          description: Returns index records that begins with a particular substring
          type: string
      type: object
    DocumentSearchTag:
      example:
        eqOr:
        - eqOr
        - eqOr
        beginsWith: beginsWith
        eq: eq
        key: key
      properties:
        beginsWith:
          description: Searches for strings that begin with
          type: string
        eq:
          description: Searches for strings that eq
          type: string
        eqOr:
          description: Searches for ANY strings that eq
          items:
            type: string
          type: array
        key:
          description: Tag key to search
          type: string
      required:
      - key
      type: object
    DocumentCompositeSearchTag:
      example:
        eq: eq
        key: key
      properties:
        eq:
          description: Searches for strings that eq
          type: string
        key:
          description: Tag key to search
          type: string
      required:
      - key
      type: object
    AddWebhookRequest:
      example:
        name: name
        ttl: ttl
        enabled: enabled
        tags:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
      properties:
        name:
          description: Name of webhook
          type: string
        ttl:
          description: Webhook time to live (expiry)
          type: string
        enabled:
          description: Is webhook enabled
          type: string
        tags:
          description: List of document tags
          items:
            $ref: '#/components/schemas/AddDocumentTag'
          type: array
      required:
      - name
      type: object
    AddDocumentUploadRequest:
      example:
        path: path
        tagSchemaId: tagSchemaId
        deepLinkPath: deepLinkPath
        contentType: contentType
        actions:
        - type: OCR
          parameters:
            characterMax: characterMax
            ocrEngine: TESSERACT
            ocrParseTypes: ocrParseTypes
            addPdfDetectedCharactersAsText: true
            notificationType: email
            notificationToCc: notificationToCc
            notificationToBcc: notificationToBcc
            url: url
            tags: tags
            notificationSubject: notificationSubject
            queueName: queueName
            engine: chatgpt
            notificationText: notificationText
            notificationHtml: notificationHtml
        - type: OCR
          parameters:
            characterMax: characterMax
            ocrEngine: TESSERACT
            ocrParseTypes: ocrParseTypes
            addPdfDetectedCharactersAsText: true
            notificationType: email
            notificationToCc: notificationToCc
            notificationToBcc: notificationToBcc
            url: url
            tags: tags
            notificationSubject: notificationSubject
            queueName: queueName
            engine: chatgpt
            notificationText: notificationText
            notificationHtml: notificationHtml
        tags:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
      properties:
        tagSchemaId:
          description: Tag Schema Id
          type: string
        path:
          description: Path or Name of document
          type: string
        contentType:
          description: Document media type
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        tags:
          description: List of document tags
          items:
            $ref: '#/components/schemas/AddDocumentTag'
          type: array
        actions:
          description: List of Actions
          items:
            $ref: '#/components/schemas/AddAction'
          type: array
      type: object
    AddDocumentRequest:
      example:
        path: path
        metadata:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
        tagSchemaId: tagSchemaId
        deepLinkPath: deepLinkPath
        accessAttributes:
        - stringValue: stringValue
          booleanValue: true
          numberValue: 0.8008281904610115
          key: key
        - stringValue: stringValue
          booleanValue: true
          numberValue: 0.8008281904610115
          key: key
        documents:
        - path: path
          metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          contentType: contentType
          isBase64: true
          content: content
          tags:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
        - path: path
          metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          contentType: contentType
          isBase64: true
          content: content
          tags:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
        contentType: contentType
        isBase64: true
        actions:
        - type: OCR
          parameters:
            characterMax: characterMax
            ocrEngine: TESSERACT
            ocrParseTypes: ocrParseTypes
            addPdfDetectedCharactersAsText: true
            notificationType: email
            notificationToCc: notificationToCc
            notificationToBcc: notificationToBcc
            url: url
            tags: tags
            notificationSubject: notificationSubject
            queueName: queueName
            engine: chatgpt
            notificationText: notificationText
            notificationHtml: notificationHtml
        - type: OCR
          parameters:
            characterMax: characterMax
            ocrEngine: TESSERACT
            ocrParseTypes: ocrParseTypes
            addPdfDetectedCharactersAsText: true
            notificationType: email
            notificationToCc: notificationToCc
            notificationToBcc: notificationToBcc
            url: url
            tags: tags
            notificationSubject: notificationSubject
            queueName: queueName
            engine: chatgpt
            notificationText: notificationText
            notificationHtml: notificationHtml
        content: content
        tags:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
      properties:
        tagSchemaId:
          description: Tag Schema Id
          type: string
        path:
          description: Path or Name of document
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        contentType:
          description: Document media type
          type: string
        isBase64:
          description: Is the content Base64-encoded?
          type: boolean
        content:
          description: Document content
          type: string
        tags:
          description: List of document tags
          items:
            $ref: '#/components/schemas/AddDocumentTag'
          type: array
        metadata:
          description: List of document Metadata
          items:
            $ref: '#/components/schemas/AddDocumentMetadata'
          type: array
        actions:
          description: List of Actions
          items:
            $ref: '#/components/schemas/AddAction'
          type: array
        accessAttributes:
          description: List of Access Attributes (only available in pro/enterprise)
          items:
            $ref: '#/components/schemas/AddAccessAttribute'
          type: array
        documents:
          description: List of child documents
          items:
            $ref: '#/components/schemas/AddChildDocument'
          type: array
      required:
      - content
      type: object
    UpdateDocumentRequest:
      example:
        path: path
        metadata:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
        tagSchemaId: tagSchemaId
        deepLinkPath: deepLinkPath
        documents:
        - path: path
          metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          contentType: contentType
          isBase64: true
          content: content
          tags:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
        - path: path
          metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          contentType: contentType
          isBase64: true
          content: content
          tags:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
        contentType: contentType
        isBase64: true
        actions:
        - type: OCR
          parameters:
            characterMax: characterMax
            ocrEngine: TESSERACT
            ocrParseTypes: ocrParseTypes
            addPdfDetectedCharactersAsText: true
            notificationType: email
            notificationToCc: notificationToCc
            notificationToBcc: notificationToBcc
            url: url
            tags: tags
            notificationSubject: notificationSubject
            queueName: queueName
            engine: chatgpt
            notificationText: notificationText
            notificationHtml: notificationHtml
        - type: OCR
          parameters:
            characterMax: characterMax
            ocrEngine: TESSERACT
            ocrParseTypes: ocrParseTypes
            addPdfDetectedCharactersAsText: true
            notificationType: email
            notificationToCc: notificationToCc
            notificationToBcc: notificationToBcc
            url: url
            tags: tags
            notificationSubject: notificationSubject
            queueName: queueName
            engine: chatgpt
            notificationText: notificationText
            notificationHtml: notificationHtml
        content: content
        tags:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
      properties:
        tagSchemaId:
          description: Tag Schema Id
          type: string
        path:
          description: Path or Name of document
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        contentType:
          description: Document media type
          type: string
        isBase64:
          description: Is the content Base64-encoded?
          type: boolean
        content:
          description: Document content
          type: string
        tags:
          description: List of document tags
          items:
            $ref: '#/components/schemas/AddDocumentTag'
          type: array
        metadata:
          description: List of document Metadata
          items:
            $ref: '#/components/schemas/AddDocumentMetadata'
          type: array
        actions:
          description: List of Actions
          items:
            $ref: '#/components/schemas/AddAction'
          type: array
        documents:
          description: List of child documents
          items:
            $ref: '#/components/schemas/AddChildDocument'
          type: array
      type: object
    AddFolderShareRequest:
      example:
        share:
          permissions:
          - READ
          - READ
          group: group
      properties:
        share:
          $ref: '#/components/schemas/AddShare'
      type: object
    AddShare:
      example:
        permissions:
        - READ
        - READ
        group: group
      properties:
        group:
          description: Share with Group
          type: string
        permissions:
          description: List of share permissions
          items:
            enum:
            - READ
            - WRITE
            - DELETE
            type: string
          type: array
      type: object
    SetDocumentRestoreResponse:
      example:
        message: message
      properties:
        message:
          description: Document Document restore message
          type: string
      type: object
    AddFolderShareResponse:
      example:
        shareKey: shareKey
        message: message
      properties:
        message:
          description: API Response message
          type: string
        shareKey:
          description: Share Identifier
          type: string
      type: object
    DeleteFolderResponse:
      example:
        message: message
      properties:
        message:
          description: API Response message
          type: string
      type: object
    DeleteShareResponse:
      example:
        message: message
      properties:
        message:
          description: API Response message
          type: string
      type: object
    MatchDocumentTag:
      description: Match Document Tag
      example:
        beginsWith: beginsWith
        eq: eq
        key: key
      properties:
        key:
          description: Tag key
          type: string
        beginsWith:
          description: Searches for strings that begin with
          type: string
        eq:
          description: Searches for strings that eq
          type: string
      required:
      - key
      type: object
    UpdateMatchingDocumentTagsRequest:
      description: Add/Update of multiple document tag(s) based on document(s) that
        have the matching tag.
      example:
        match:
          tag:
            beginsWith: beginsWith
            eq: eq
            key: key
        update:
          tags:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
      properties:
        match:
          $ref: '#/components/schemas/UpdateMatchingDocumentTagsRequest_match'
        update:
          $ref: '#/components/schemas/UpdateMatchingDocumentTagsRequest_update'
      required:
      - match
      - update
      type: object
    AddDocumentTagsRequest:
      description: Add List of document tags
      example:
        tags:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
      properties:
        tags:
          description: List of document tags
          items:
            $ref: '#/components/schemas/AddDocumentTag'
          type: array
      type: object
    DocumentMetadata:
      description: Document Metadata (use either 'value' or 'values' not both)
      example:
        values:
        - values
        - values
        value: value
        key: key
      properties:
        key:
          description: Metadata key
          type: string
        value:
          description: Metadata value
          type: string
        values:
          description: Metadata values
          items:
            description: Metadata value
            type: string
          type: array
      type: object
    AddDocumentMetadata:
      description: Document Metadata (use either 'value' or 'values' not both)
      example:
        values:
        - values
        - values
        value: value
        key: key
      properties:
        key:
          description: Metadata key
          type: string
        value:
          description: Metadata value
          type: string
        values:
          description: Metadata values
          items:
            description: Metadata value
            type: string
          type: array
      required:
      - key
      type: object
    AddDocumentAccessAttributesRequest:
      description: List of document access attributes to add
      example:
        accessAttributes:
        - stringValue: stringValue
          booleanValue: true
          numberValue: 0.8008281904610115
          key: key
        - stringValue: stringValue
          booleanValue: true
          numberValue: 0.8008281904610115
          key: key
      properties:
        accessAttributes:
          description: List of document access attributes
          items:
            $ref: '#/components/schemas/AddAccessAttribute'
          type: array
      type: object
    SetDocumentAccessAttributesRequest:
      description: List of document access attributes to set
      example:
        accessAttributes:
        - stringValue: stringValue
          booleanValue: true
          numberValue: 0.8008281904610115
          key: key
        - stringValue: stringValue
          booleanValue: true
          numberValue: 0.8008281904610115
          key: key
      properties:
        accessAttributes:
          description: List of document access attributes
          items:
            $ref: '#/components/schemas/AddAccessAttribute'
          type: array
      type: object
    GetDocumentAccessAttributesResponse:
      description: List of document access attributes
      example:
        accessAttributes:
        - stringValue: stringValue
          booleanValue: true
          numberValue: 0.8008281904610115
          key: key
        - stringValue: stringValue
          booleanValue: true
          numberValue: 0.8008281904610115
          key: key
      properties:
        accessAttributes:
          description: List of document access attributes
          items:
            $ref: '#/components/schemas/AccessAttribute'
          type: array
      type: object
    AccessAttribute:
      description: "Document Access Attribute (requires either: stringValue, numberValue,\
        \ booleanValue)"
      example:
        stringValue: stringValue
        booleanValue: true
        numberValue: 0.8008281904610115
        key: key
      properties:
        key:
          description: Attribute key
          type: string
        stringValue:
          description: Attribute with string value
          type: string
        numberValue:
          description: Attribute with number value
          type: number
        booleanValue:
          description: Attribute with boolean value
          type: boolean
      type: object
    AddAccessAttribute:
      description: "Document Access Attribute (requires either: stringValue, numberValue,\
        \ booleanValue)"
      example:
        stringValue: stringValue
        booleanValue: true
        numberValue: 0.8008281904610115
        key: key
      properties:
        key:
          description: Attribute key
          type: string
        stringValue:
          description: Attribute with string value
          type: string
        numberValue:
          description: Attribute with number value
          type: number
        booleanValue:
          description: Attribute with boolean value
          type: boolean
      required:
      - key
      type: object
    AddDocumentTag:
      description: List of Document Tags (use either 'value' or 'values' not both)
      example:
        values:
        - values
        - values
        value: value
        key: key
      properties:
        key:
          description: Tag key
          type: string
        value:
          description: Tag value
          type: string
        values:
          description: Tag values
          items:
            description: Tag value
            type: string
          type: array
      required:
      - key
      type: object
    AddChildDocument:
      description: List of related documents
      example:
        path: path
        metadata:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
        deepLinkPath: deepLinkPath
        contentType: contentType
        isBase64: true
        content: content
        tags:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
      properties:
        path:
          description: Path or Name of document
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        contentType:
          description: Document Content-Type
          type: string
        isBase64:
          description: Is the content Base64-encoded?
          type: boolean
        content:
          description: Document content
          type: string
        tags:
          description: List of document tags
          items:
            $ref: '#/components/schemas/AddDocumentTag'
          type: array
        metadata:
          description: List of document Metadata
          items:
            $ref: '#/components/schemas/AddDocumentMetadata'
          type: array
      required:
      - content
      type: object
    DocumentVersion:
      example:
        path: path
        deepLinkPath: deepLinkPath
        insertedDate: insertedDate
        lastModifiedDate: lastModifiedDate
        s3version: s3version
        checksum: checksum
        documentId: documentId
        contentLength: 0
        contentType: contentType
        userId: userId
        version: version
        versionKey: versionKey
      properties:
        path:
          description: Path or Name of document
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        lastModifiedDate:
          description: Last Modified Timestamp
          type: string
        checksum:
          description: "Document checksum, changes when document file changes"
          type: string
        documentId:
          description: Document Identifier
          type: string
        contentType:
          description: Document Content-Type
          type: string
        userId:
          description: User who added document
          type: string
        contentLength:
          description: Document size
          type: integer
        version:
          description: Document version
          type: string
        versionKey:
          description: Document Version Identifier
          type: string
        s3version:
          description: Document storage version
          type: string
      type: object
    DocumentTag:
      example:
        insertedDate: insertedDate
        values:
        - values
        - values
        documentId: documentId
        type: type
        userId: userId
        value: value
        key: key
      properties:
        insertedDate:
          description: Inserted Timestamp
          type: string
        documentId:
          description: Document Identifier
          type: string
        type:
          description: Tag type
          type: string
        userId:
          description: User who added document
          type: string
        value:
          description: Tag value
          type: string
        values:
          description: Tag values
          items:
            description: Tag value
            type: string
          type: array
        key:
          description: Tag key
          type: string
      type: object
    AddWebhookTagRequest:
      example:
        values:
        - values
        - values
        value: value
        key: key
      properties:
        value:
          description: Tag value
          type: string
        values:
          description: Tag values
          items:
            description: Tag value
            type: string
          type: array
        key:
          description: Tag key
          type: string
      type: object
    GetDocumentTagResponse:
      example:
        insertedDate: insertedDate
        values:
        - values
        - values
        documentId: documentId
        type: type
        userId: userId
        value: value
        key: key
      properties:
        insertedDate:
          description: Inserted Timestamp
          type: string
        documentId:
          description: Document Identifier
          type: string
        type:
          description: Tag type
          type: string
        userId:
          description: User who added document
          type: string
        value:
          description: Tag value
          type: string
        values:
          description: Tag values
          items:
            description: Tag value
            type: string
          type: array
        key:
          description: Tag key
          type: string
      type: object
    QueryFulltextRequest:
      description: OpenSearch search API request (https://opensearch.org/docs/latest/opensearch/rest-api/search/)
      example:
        query:
          match:
            title: Wind
      type: object
    QueryFulltextResponse:
      example:
        result:
          hits:
            hits:
            - _index: ""
              _id: ""
              _source:
                documentId: ""
                content: ""
      properties:
        result:
          type: object
      type: object
    DocumentFulltextResponse:
      example:
        documents:
        - path: path
          metadata:
            key: "{}"
          deepLinkPath: deepLinkPath
          insertedDate: insertedDate
          lastModifiedDate: lastModifiedDate
          createdBy: createdBy
          accessAttributes:
            key: "{}"
          siteId: siteId
          documentId: documentId
          contentLength: 0
          tags:
            key: "{}"
        - path: path
          metadata:
            key: "{}"
          deepLinkPath: deepLinkPath
          insertedDate: insertedDate
          lastModifiedDate: lastModifiedDate
          createdBy: createdBy
          accessAttributes:
            key: "{}"
          siteId: siteId
          documentId: documentId
          contentLength: 0
          tags:
            key: "{}"
      properties:
        documents:
          description: List of search result documents
          items:
            $ref: '#/components/schemas/FulltextSearchItem'
          type: array
      type: object
    FulltextSearchItem:
      example:
        path: path
        metadata:
          key: "{}"
        deepLinkPath: deepLinkPath
        insertedDate: insertedDate
        lastModifiedDate: lastModifiedDate
        createdBy: createdBy
        accessAttributes:
          key: "{}"
        siteId: siteId
        documentId: documentId
        contentLength: 0
        tags:
          key: "{}"
      properties:
        siteId:
          description: Site Identifier
          type: string
        path:
          description: Path or Name of document
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        lastModifiedDate:
          description: Last Modified Timestamp
          type: string
        documentId:
          description: Document Identifier
          type: string
        contentLength:
          description: Document size
          type: integer
        createdBy:
          description: User who added document
          type: string
        tags:
          additionalProperties:
            type: object
          type: object
        metadata:
          additionalProperties:
            type: object
          type: object
        accessAttributes:
          additionalProperties:
            type: object
          type: object
      type: object
    GetDocumentFulltextResponse:
      example:
        path: path
        metadata: "{}"
        deepLinkPath: deepLinkPath
        insertedDate: insertedDate
        lastModifiedDate: lastModifiedDate
        createdBy: createdBy
        siteId: siteId
        documentId: documentId
        contentLength: 0
        contentType: contentType
        content: content
        tags: "{}"
      properties:
        siteId:
          description: Site Identifier
          type: string
        content:
          description: Content of document
          type: string
        contentType:
          description: Document Content-Type
          type: string
        path:
          description: Path or Name of document
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        lastModifiedDate:
          description: Last Modified Timestamp
          type: string
        documentId:
          description: Document Identifier
          type: string
        createdBy:
          description: User who added document
          type: string
        contentLength:
          description: Document size
          type: integer
        tags:
          type: object
        metadata:
          type: object
      type: object
    GetDocumentSyncResponse:
      example:
        next: next
        syncs:
        - service: TYPESENSE
          syncDate: syncDate
          type: METADATA
          message: message
          userId: userId
          status: COMPLETE
        - service: TYPESENSE
          syncDate: syncDate
          type: METADATA
          message: message
          userId: userId
          status: COMPLETE
      properties:
        next:
          description: Next page of results token
          type: string
        syncs:
          description: List of document syncs
          items:
            $ref: '#/components/schemas/GetDocumentSync'
          type: array
      type: object
    GetDocumentSync:
      example:
        service: TYPESENSE
        syncDate: syncDate
        type: METADATA
        message: message
        userId: userId
        status: COMPLETE
      properties:
        service:
          description: To which service the data was synced
          enum:
          - TYPESENSE
          - OPENSEARCH
          type: string
        status:
          description: The status of the sync
          enum:
          - COMPLETE
          - FAILED
          type: string
        type:
          description: The type of the sync
          enum:
          - METADATA
          - TAG
          - CONTENT
          type: string
        syncDate:
          description: Timestamp of synchronization
          type: string
        userId:
          description: User who added document
          type: string
        message:
          description: Document sync message
          type: string
      type: object
    GetUserActivitesResponse:
      example:
        next: next
        userActivities:
        - activityId: activityId
          timeToLive: timeToLive
          insertedDate: insertedDate
          type: VIEW
          userId: userId
          versionKey: versionKey
        - activityId: activityId
          timeToLive: timeToLive
          insertedDate: insertedDate
          type: VIEW
          userId: userId
          versionKey: versionKey
      properties:
        next:
          description: Next page of results token
          type: string
        userActivities:
          description: List of user activities syncs
          items:
            $ref: '#/components/schemas/UserActivity'
          type: array
      type: object
    UserActivity:
      example:
        activityId: activityId
        timeToLive: timeToLive
        insertedDate: insertedDate
        type: VIEW
        userId: userId
        versionKey: versionKey
      properties:
        activityId:
          description: Activity identifier
          type: string
        type:
          description: The type of the activity
          enum:
          - VIEW
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        userId:
          description: User who added document
          type: string
        versionKey:
          description: Document Version Identifier
          type: string
        timeToLive:
          description: User activity time to live
          type: string
      type: object
    GetFoldersResponse:
      example:
        next: next
        previous: previous
        documents:
        - metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          matchedTags:
          - type: type
            value: value
            key: key
          - type: type
            value: value
            key: key
          matchedTag:
            type: type
            value: value
            key: key
          userId: userId
          tags:
            key: ""
          path: path
          versionId: versionId
          folder: true
          insertedDate: insertedDate
          checksum: checksum
          siteId: siteId
          indexKey: indexKey
          documentId: documentId
          contentLength: 0
          contentType: contentType
        - metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          matchedTags:
          - type: type
            value: value
            key: key
          - type: type
            value: value
            key: key
          matchedTag:
            type: type
            value: value
            key: key
          userId: userId
          tags:
            key: ""
          path: path
          versionId: versionId
          folder: true
          insertedDate: insertedDate
          checksum: checksum
          siteId: siteId
          indexKey: indexKey
          documentId: documentId
          contentLength: 0
          contentType: contentType
      properties:
        next:
          description: Next page of results token
          type: string
        previous:
          description: Previous page of results token
          type: string
        documents:
          description: List of search result documents
          items:
            $ref: '#/components/schemas/SearchResultDocument'
          type: array
      type: object
    GetWorkflowQueueDocumentsResponse:
      example:
        next: next
        documents:
        - workflow:
            insertedDate: insertedDate
            name: name
            inUse: true
            description: description
            userId: userId
            workflowId: workflowId
            status: ACTIVE
          document:
            metadata:
            - values:
              - values
              - values
              value: value
              key: key
            - values:
              - values
              - values
              value: value
              key: key
            deepLinkPath: deepLinkPath
            lastModifiedDate: lastModifiedDate
            belongsToDocumentId: belongsToDocumentId
            userId: userId
            version: version
            versionKey: versionKey
            path: path
            insertedDate: insertedDate
            s3version: s3version
            checksum: checksum
            siteId: siteId
            documentId: documentId
            contentLength: 0
            contentType: contentType
        - workflow:
            insertedDate: insertedDate
            name: name
            inUse: true
            description: description
            userId: userId
            workflowId: workflowId
            status: ACTIVE
          document:
            metadata:
            - values:
              - values
              - values
              value: value
              key: key
            - values:
              - values
              - values
              value: value
              key: key
            deepLinkPath: deepLinkPath
            lastModifiedDate: lastModifiedDate
            belongsToDocumentId: belongsToDocumentId
            userId: userId
            version: version
            versionKey: versionKey
            path: path
            insertedDate: insertedDate
            s3version: s3version
            checksum: checksum
            siteId: siteId
            documentId: documentId
            contentLength: 0
            contentType: contentType
      properties:
        next:
          description: Next page of results token
          type: string
        documents:
          description: List of search result documents
          items:
            $ref: '#/components/schemas/WorkflowDocument'
          type: array
      type: object
    GetWorkflowDocumentsResponse:
      example:
        next: next
        documents:
        - metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          userId: userId
          version: version
          versionKey: versionKey
          path: path
          insertedDate: insertedDate
          s3version: s3version
          checksum: checksum
          siteId: siteId
          documentId: documentId
          contentLength: 0
          contentType: contentType
        - metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          userId: userId
          version: version
          versionKey: versionKey
          path: path
          insertedDate: insertedDate
          s3version: s3version
          checksum: checksum
          siteId: siteId
          documentId: documentId
          contentLength: 0
          contentType: contentType
      properties:
        next:
          description: Next page of results token
          type: string
        documents:
          description: List of workflow documents
          items:
            $ref: '#/components/schemas/Document'
          type: array
      type: object
    WorkflowDocument:
      example:
        workflow:
          insertedDate: insertedDate
          name: name
          inUse: true
          description: description
          userId: userId
          workflowId: workflowId
          status: ACTIVE
        document:
          metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          userId: userId
          version: version
          versionKey: versionKey
          path: path
          insertedDate: insertedDate
          s3version: s3version
          checksum: checksum
          siteId: siteId
          documentId: documentId
          contentLength: 0
          contentType: contentType
      properties:
        workflow:
          $ref: '#/components/schemas/WorkflowSummary'
        document:
          $ref: '#/components/schemas/Document'
      type: object
    Document:
      example:
        metadata:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
        deepLinkPath: deepLinkPath
        lastModifiedDate: lastModifiedDate
        belongsToDocumentId: belongsToDocumentId
        userId: userId
        version: version
        versionKey: versionKey
        path: path
        insertedDate: insertedDate
        s3version: s3version
        checksum: checksum
        siteId: siteId
        documentId: documentId
        contentLength: 0
        contentType: contentType
      properties:
        siteId:
          description: Site Identifier
          type: string
        path:
          description: Path or Name of document
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        lastModifiedDate:
          description: Last Modified Timestamp
          type: string
        checksum:
          description: "Document checksum, changes when document file changes"
          type: string
        documentId:
          description: Document Identifier
          type: string
        contentType:
          description: Document Content-Type
          type: string
        userId:
          description: User who added document
          type: string
        contentLength:
          description: Document size
          type: integer
        version:
          description: Document version
          type: string
        versionKey:
          description: Document Version Identifier
          type: string
        s3version:
          description: Document storage version
          type: string
        belongsToDocumentId:
          description: Parent Document Identifier
          type: string
        metadata:
          description: List of document Metadata
          items:
            $ref: '#/components/schemas/DocumentMetadata'
          type: array
      type: object
    DocumentSearchResponse:
      example:
        next: next
        previous: previous
        documents:
        - metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          matchedTags:
          - type: type
            value: value
            key: key
          - type: type
            value: value
            key: key
          matchedTag:
            type: type
            value: value
            key: key
          userId: userId
          tags:
            key: ""
          path: path
          versionId: versionId
          folder: true
          insertedDate: insertedDate
          checksum: checksum
          siteId: siteId
          indexKey: indexKey
          documentId: documentId
          contentLength: 0
          contentType: contentType
        - metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          matchedTags:
          - type: type
            value: value
            key: key
          - type: type
            value: value
            key: key
          matchedTag:
            type: type
            value: value
            key: key
          userId: userId
          tags:
            key: ""
          path: path
          versionId: versionId
          folder: true
          insertedDate: insertedDate
          checksum: checksum
          siteId: siteId
          indexKey: indexKey
          documentId: documentId
          contentLength: 0
          contentType: contentType
      properties:
        next:
          description: Next page of results token
          type: string
        previous:
          description: Previous page of results token
          type: string
        documents:
          description: List of search result documents
          items:
            $ref: '#/components/schemas/SearchResultDocument'
          type: array
      type: object
    SearchResultDocument:
      example:
        metadata:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
        deepLinkPath: deepLinkPath
        lastModifiedDate: lastModifiedDate
        belongsToDocumentId: belongsToDocumentId
        matchedTags:
        - type: type
          value: value
          key: key
        - type: type
          value: value
          key: key
        matchedTag:
          type: type
          value: value
          key: key
        userId: userId
        tags:
          key: ""
        path: path
        versionId: versionId
        folder: true
        insertedDate: insertedDate
        checksum: checksum
        siteId: siteId
        indexKey: indexKey
        documentId: documentId
        contentLength: 0
        contentType: contentType
      properties:
        siteId:
          description: Site Identifier
          type: string
        path:
          description: Path or Name of document
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        lastModifiedDate:
          description: Last Modified Timestamp
          type: string
        folder:
          description: Is Result a Document Folder
          type: boolean
        indexKey:
          description: populated if search result are from an index
          type: string
        checksum:
          description: "Document checksum, changes when document file changes"
          type: string
        documentId:
          description: Document Identifier
          type: string
        contentType:
          description: Document Content-Type
          type: string
        userId:
          description: User who added document
          type: string
        contentLength:
          description: Document size
          type: integer
        versionId:
          description: Document version
          type: string
        belongsToDocumentId:
          description: Parent Document Identifier
          type: string
        matchedTag:
          $ref: '#/components/schemas/DocumentSearchMatchTag'
        matchedTags:
          items:
            $ref: '#/components/schemas/DocumentSearchMatchTag'
          type: array
        tags:
          additionalProperties: true
          type: object
        metadata:
          description: List of document Metadata
          items:
            $ref: '#/components/schemas/DocumentMetadata'
          type: array
      type: object
    DocumentSearchMatchTag:
      example:
        type: type
        value: value
        key: key
      properties:
        key:
          description: Tag key
          type: string
        value:
          description: Tag value
          type: string
        type:
          description: Tag type
          type: string
      type: object
    AddCaseResponse:
      example:
        caseId: caseId
      properties:
        caseId:
          description: Case Identifier
          type: string
      type: object
    AddCaseRequest:
      example:
        case:
          metadata:
            key: "{}"
          documentNumberFormat:
          - padding: 0
            staticValue: staticValue
            type: null
          - padding: 0
            staticValue: staticValue
            type: null
          name: name
          caseNumberFormat:
          - padding: 0
            staticValue: staticValue
            type: null
          - padding: 0
            staticValue: staticValue
            type: null
          tasks:
          - metadata:
              key: "{}"
            description: description
            status: null
            documentIds:
            - documentIds
            - documentIds
          - metadata:
              key: "{}"
            description: description
            status: null
            documentIds:
            - documentIds
            - documentIds
          status: null
          documentIds:
          - documentIds
          - documentIds
          nigos:
          - metadata:
              key: "{}"
            description: description
            status: null
            documentIds:
            - documentIds
            - documentIds
          - metadata:
              key: "{}"
            description: description
            status: null
            documentIds:
            - documentIds
            - documentIds
      properties:
        case:
          $ref: '#/components/schemas/AddCase'
      required:
      - case
      type: object
    AddCase:
      example:
        metadata:
          key: "{}"
        documentNumberFormat:
        - padding: 0
          staticValue: staticValue
          type: null
        - padding: 0
          staticValue: staticValue
          type: null
        name: name
        caseNumberFormat:
        - padding: 0
          staticValue: staticValue
          type: null
        - padding: 0
          staticValue: staticValue
          type: null
        tasks:
        - metadata:
            key: "{}"
          description: description
          status: null
          documentIds:
          - documentIds
          - documentIds
        - metadata:
            key: "{}"
          description: description
          status: null
          documentIds:
          - documentIds
          - documentIds
        status: null
        documentIds:
        - documentIds
        - documentIds
        nigos:
        - metadata:
            key: "{}"
          description: description
          status: null
          documentIds:
          - documentIds
          - documentIds
        - metadata:
            key: "{}"
          description: description
          status: null
          documentIds:
          - documentIds
          - documentIds
      properties:
        name:
          description: Case Name
          type: string
        status:
          $ref: '#/components/schemas/CaseStatus'
        documentNumberFormat:
          description: Format of Document Number
          items:
            $ref: '#/components/schemas/StringFormat'
          type: array
        caseNumberFormat:
          description: Format of Case Number
          items:
            $ref: '#/components/schemas/StringFormat'
          type: array
        metadata:
          additionalProperties:
            type: object
          type: object
        documentIds:
          items:
            type: string
          type: array
        tasks:
          items:
            $ref: '#/components/schemas/AddTask'
          type: array
        nigos:
          items:
            $ref: '#/components/schemas/AddNigo'
          type: array
      required:
      - name
      type: object
    StringFormat:
      example:
        padding: 0
        staticValue: staticValue
        type: null
      properties:
        type:
          $ref: '#/components/schemas/StringGeneratorType'
        staticValue:
          description: Static Value
          type: string
        padding:
          description: Optional padding for AUTO_INCREMENT number
          type: integer
      type: object
    UpdateCaseResponse:
      example:
        caseId: caseId
      properties:
        caseId:
          description: Case Identifier
          type: string
      type: object
    UpdateCaseRequest:
      example:
        case:
          name: name
          status: null
          documentIds:
          - documentIds
          - documentIds
      properties:
        case:
          $ref: '#/components/schemas/UpdateCase'
      type: object
    UpdateCase:
      example:
        name: name
        status: null
        documentIds:
        - documentIds
        - documentIds
      properties:
        name:
          description: Case Name
          type: string
        status:
          $ref: '#/components/schemas/CaseStatus'
        documentIds:
          items:
            type: string
          type: array
      type: object
    StringGeneratorType:
      description: Generate Strings of Type
      enum:
      - AUTO_INCREMENT
      - STATIC
      - DATE_YYYYMMDD
      type: string
    CaseStatus:
      description: Status of the Case
      enum:
      - NEW
      - ASSIGNED
      - IN_PROGRESS
      - ON_HOLD
      - ESCALATED
      - RESOLVED
      - CLOSED
      - UNDER_REVIEW
      - AWAITING_CLIENT_RESPONSE
      type: string
    TaskStatus:
      description: Status of the Task
      enum:
      - NEW
      - ASSIGNED
      - IN_PROGRESS
      - ON_HOLD
      - ESCALATED
      - RESOLVED
      - CLOSED
      - UNDER_REVIEW
      - AWAITING_CLIENT_RESPONSE
      type: string
    NigoStatus:
      description: Status of the Nigo
      enum:
      - NEW
      - ASSIGNED
      - IN_PROGRESS
      - ON_HOLD
      - ESCALATED
      - RESOLVED
      - CLOSED
      - UNDER_REVIEW
      - AWAITING_CLIENT_RESPONSE
      type: string
    UpdateTaskResponse:
      example:
        taskId: taskId
      properties:
        taskId:
          description: Task Identifier
          type: string
      type: object
    UpdateTaskRequest:
      example:
        task:
          metadata:
            key: "{}"
          description: description
          status: null
          documentIds:
          - documentIds
          - documentIds
      properties:
        task:
          $ref: '#/components/schemas/UpdateTask'
      type: object
    UpdateTask:
      example:
        metadata:
          key: "{}"
        description: description
        status: null
        documentIds:
        - documentIds
        - documentIds
      properties:
        description:
          description: Description of Task
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        metadata:
          additionalProperties:
            type: object
          type: object
        documentIds:
          items:
            type: string
          type: array
      type: object
    AddTask:
      example:
        metadata:
          key: "{}"
        description: description
        status: null
        documentIds:
        - documentIds
        - documentIds
      properties:
        description:
          description: Description of Task
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        metadata:
          additionalProperties:
            type: object
          type: object
        documentIds:
          items:
            type: string
          type: array
      required:
      - description
      type: object
    UpdateNigoResponse:
      example:
        nigoId: nigoId
      properties:
        nigoId:
          description: Nigo Identifier
          type: string
      type: object
    UpdateNigoRequest:
      example:
        nigo:
          metadata:
            key: "{}"
          description: description
          status: null
          documentIds:
          - documentIds
          - documentIds
      properties:
        nigo:
          $ref: '#/components/schemas/UpdateNigo'
      type: object
    UpdateNigo:
      example:
        metadata:
          key: "{}"
        description: description
        status: null
        documentIds:
        - documentIds
        - documentIds
      properties:
        description:
          description: Description of Nigo
          type: string
        status:
          $ref: '#/components/schemas/NigoStatus'
        metadata:
          additionalProperties:
            type: object
          type: object
        documentIds:
          items:
            type: string
          type: array
      type: object
    AddNigo:
      example:
        metadata:
          key: "{}"
        description: description
        status: null
        documentIds:
        - documentIds
        - documentIds
      properties:
        description:
          description: Description of Task
          type: string
        status:
          $ref: '#/components/schemas/NigoStatus'
        metadata:
          additionalProperties:
            type: object
          type: object
        documentIds:
          items:
            type: string
          type: array
      required:
      - name
      type: object
    Task:
      example:
        metadata:
          key: "{}"
        insertedDate: insertedDate
        description: description
        taskId: taskId
        status: null
      properties:
        taskId:
          description: Task Identifier
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        description:
          description: Description of Task
          type: string
        status:
          $ref: '#/components/schemas/TaskStatus'
        metadata:
          additionalProperties:
            type: object
          type: object
      type: object
    Nigo:
      example:
        metadata:
          key: "{}"
        nigoId: nigoId
        insertedDate: insertedDate
        description: description
        status: null
      properties:
        nigoId:
          description: Nigo Identifier
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        description:
          description: Description of Task
          type: string
        status:
          $ref: '#/components/schemas/NigoStatus'
        metadata:
          additionalProperties:
            type: object
          type: object
      type: object
    GetCasesResponse:
      example:
        next: next
        cases:
        - metadata:
            key: "{}"
          insertedDate: insertedDate
          caseNumber: caseNumber
          documentNumber: documentNumber
          caseId: caseId
          name: name
          status: null
        - metadata:
            key: "{}"
          insertedDate: insertedDate
          caseNumber: caseNumber
          documentNumber: documentNumber
          caseId: caseId
          name: name
          status: null
      properties:
        next:
          description: Next page of results token
          type: string
        cases:
          description: List of cases
          items:
            $ref: '#/components/schemas/Case'
          type: array
      type: object
    GetCaseNigosResponse:
      example:
        next: next
        nigos:
        - metadata:
            key: "{}"
          nigoId: nigoId
          insertedDate: insertedDate
          description: description
          status: null
        - metadata:
            key: "{}"
          nigoId: nigoId
          insertedDate: insertedDate
          description: description
          status: null
      properties:
        next:
          description: Next page of results token
          type: string
        nigos:
          description: List of Nigos
          items:
            $ref: '#/components/schemas/Nigo'
          type: array
      type: object
    GetCaseTasksResponse:
      example:
        next: next
        tasks:
        - metadata:
            key: "{}"
          insertedDate: insertedDate
          description: description
          taskId: taskId
          status: null
        - metadata:
            key: "{}"
          insertedDate: insertedDate
          description: description
          taskId: taskId
          status: null
      properties:
        next:
          description: Next page of results token
          type: string
        tasks:
          description: List of tasks
          items:
            $ref: '#/components/schemas/Task'
          type: array
      type: object
    GetCaseDocumentsResponse:
      example:
        next: next
        documents:
        - metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          userId: userId
          version: version
          versionKey: versionKey
          path: path
          insertedDate: insertedDate
          s3version: s3version
          checksum: checksum
          siteId: siteId
          documentId: documentId
          contentLength: 0
          contentType: contentType
        - metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          userId: userId
          version: version
          versionKey: versionKey
          path: path
          insertedDate: insertedDate
          s3version: s3version
          checksum: checksum
          siteId: siteId
          documentId: documentId
          contentLength: 0
          contentType: contentType
      properties:
        next:
          description: Next page of results token
          type: string
        documents:
          description: List of documents
          items:
            $ref: '#/components/schemas/Document'
          type: array
      type: object
    GetCaseResponse:
      example:
        case:
          metadata:
            key: "{}"
          insertedDate: insertedDate
          caseNumber: caseNumber
          documentNumber: documentNumber
          caseId: caseId
          name: name
          status: null
      properties:
        case:
          $ref: '#/components/schemas/Case'
      type: object
    Case:
      example:
        metadata:
          key: "{}"
        insertedDate: insertedDate
        caseNumber: caseNumber
        documentNumber: documentNumber
        caseId: caseId
        name: name
        status: null
      properties:
        caseId:
          description: Case Identifier
          type: string
        caseNumber:
          description: Case Number
          type: string
        documentNumber:
          description: Document Number
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        name:
          description: Case Name
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        status:
          $ref: '#/components/schemas/CaseStatus'
      type: object
    GetDocumentsResponse:
      example:
        next: next
        previous: previous
        documents:
        - metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          userId: userId
          version: version
          versionKey: versionKey
          path: path
          insertedDate: insertedDate
          s3version: s3version
          checksum: checksum
          siteId: siteId
          documentId: documentId
          contentLength: 0
          contentType: contentType
        - metadata:
          - values:
            - values
            - values
            value: value
            key: key
          - values:
            - values
            - values
            value: value
            key: key
          deepLinkPath: deepLinkPath
          lastModifiedDate: lastModifiedDate
          belongsToDocumentId: belongsToDocumentId
          userId: userId
          version: version
          versionKey: versionKey
          path: path
          insertedDate: insertedDate
          s3version: s3version
          checksum: checksum
          siteId: siteId
          documentId: documentId
          contentLength: 0
          contentType: contentType
      properties:
        next:
          description: Next page of results token
          type: string
        previous:
          description: Previous page of results token
          type: string
        documents:
          description: List of documents
          items:
            $ref: '#/components/schemas/Document'
          type: array
      type: object
    GetWebhooksResponse:
      example:
        webhooks:
        - webhookId: webhookId
          insertedDate: insertedDate
          name: name
          siteId: siteId
          userId: userId
          url: url
          enabled: enabled
        - webhookId: webhookId
          insertedDate: insertedDate
          name: name
          siteId: siteId
          userId: userId
          url: url
          enabled: enabled
      properties:
        webhooks:
          description: List of webhooks
          items:
            $ref: '#/components/schemas/GetWebhookResponse'
          type: array
      type: object
    GetWebhookResponse:
      example:
        webhookId: webhookId
        insertedDate: insertedDate
        name: name
        siteId: siteId
        userId: userId
        url: url
        enabled: enabled
      properties:
        siteId:
          description: Site Identifier
          type: string
        name:
          description: Webhook name
          type: string
        url:
          description: Webhook url
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        webhookId:
          description: Webhook Identifier
          type: string
        userId:
          description: User who added document
          type: string
        enabled:
          description: Is webhook enabled
          type: string
      type: object
    GetWebhookTagsResponse:
      example:
        next: next
        previous: previous
        tags:
        - webhookId: webhookId
          insertedDate: insertedDate
          type: type
          userId: userId
          value: value
          key: key
        - webhookId: webhookId
          insertedDate: insertedDate
          type: type
          userId: userId
          value: value
          key: key
      properties:
        next:
          description: Next page of results token
          type: string
        previous:
          description: Previous page of results token
          type: string
        tags:
          description: List of webhook tags
          items:
            $ref: '#/components/schemas/WebhookTag'
          type: array
      type: object
    WebhookTag:
      example:
        webhookId: webhookId
        insertedDate: insertedDate
        type: type
        userId: userId
        value: value
        key: key
      properties:
        insertedDate:
          description: Inserted Timestamp
          type: string
        webhookId:
          description: Webhook Identifier
          type: string
        type:
          description: Tag type
          type: string
        userId:
          description: User who added document
          type: string
        value:
          description: Tag value
          type: string
        key:
          description: Tag key
          type: string
      required:
      - key
      - value
      type: object
    GetDocumentActionsResponse:
      example:
        actions:
        - queueId: queueId
          metadata:
            key: metadata
          insertedDate: insertedDate
          type: ANTIVIRUS
          message: message
          userId: userId
          parameters:
            key: parameters
          workflowId: workflowId
          startDate: startDate
          completedDate: completedDate
          status: COMPLETE
          workflowStepId: workflowStepId
        - queueId: queueId
          metadata:
            key: metadata
          insertedDate: insertedDate
          type: ANTIVIRUS
          message: message
          userId: userId
          parameters:
            key: parameters
          workflowId: workflowId
          startDate: startDate
          completedDate: completedDate
          status: COMPLETE
          workflowStepId: workflowStepId
      properties:
        actions:
          description: List of document actions
          items:
            $ref: '#/components/schemas/DocumentAction'
          type: array
      type: object
    DocumentAction:
      example:
        queueId: queueId
        metadata:
          key: metadata
        insertedDate: insertedDate
        type: ANTIVIRUS
        message: message
        userId: userId
        parameters:
          key: parameters
        workflowId: workflowId
        startDate: startDate
        completedDate: completedDate
        status: COMPLETE
        workflowStepId: workflowStepId
      properties:
        status:
          description: Status of the Document Action
          enum:
          - COMPLETE
          - FAILED
          - IN_QUEUE
          - PENDING
          - RUNNING
          - SKIPPED
          - FAILED_RETRY
          type: string
        type:
          description: Type of Document Action
          enum:
          - ANTIVIRUS
          - DOCUMENTTAGGING
          - FULLTEXT
          - NOTIFICATION
          - OCR
          - QUEUE
          - WEBHOOK
          type: string
        queueId:
          description: Queue Id
          type: string
        workflowId:
          description: Workflow Id
          type: string
        workflowStepId:
          description: Workflow Step Id
          type: string
        message:
          description: Action message information
          type: string
        userId:
          description: User who requested the Action
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        startDate:
          description: Started Timestamp
          type: string
        completedDate:
          description: Completed Timestamp
          type: string
        parameters:
          additionalProperties:
            type: string
          description: Action parameters
          type: object
        metadata:
          additionalProperties:
            type: string
          description: Action metadata
          type: object
      type: object
    GetDocumentOcrResponse:
      example:
        ocrEngine: ocrEngine
        data: data
        insertedDate: insertedDate
        ocrStatus: ocrStatus
        documentId: documentId
        contentType: contentType
        isBase64: true
        userId: userId
      properties:
        data:
          description: OCR text result
          type: string
        ocrEngine:
          description: The OCR technique used
          type: string
        ocrStatus:
          description: The status of the OCR request
          type: string
        contentType:
          description: Document Content-Type
          type: string
        isBase64:
          description: Is the content Base64-encoded?
          type: boolean
        userId:
          description: User who requested the OCR
          type: string
        documentId:
          description: Document Identifier
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
      type: object
    AddDocumentAccessAttributesResponse:
      example:
        message: message
      properties:
        message:
          description: Document Action message
          type: string
      type: object
    SetDocumentAccessAttributesResponse:
      example:
        message: message
      properties:
        message:
          description: Document Action message
          type: string
      type: object
    DeleteDocumentAccessAttributesResponse:
      example:
        message: message
      properties:
        message:
          description: Document Action message
          type: string
      type: object
    AddDocumentActionsResponse:
      example:
        message: message
      properties:
        message:
          description: Document Action message
          type: string
      type: object
    AddDocumentActionsRetryResponse:
      example:
        message: message
      properties:
        message:
          description: Document Action message
          type: string
      type: object
    AddDocumentOcrResponse:
      example:
        message: message
      properties:
        message:
          description: OCR processing message
          type: string
      type: object
    SetDocumentFulltextResponse:
      example:
        message: message
      properties:
        message:
          description: Full text processing message
          type: string
      type: object
    SetDocumentFulltextRequest:
      example:
        path: path
        metadata:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
        contentUrls:
        - contentUrls
        - contentUrls
        deepLinkPath: deepLinkPath
        contentType: contentType
        content: content
        tags:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
      properties:
        contentType:
          description: Document Content-Type
          type: string
        content:
          description: Document content
          type: string
        contentUrls:
          description: URL(s) which contain document content
          items:
            type: string
          type: array
        path:
          description: Path or Name of document
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        tags:
          description: List of document tags
          items:
            $ref: '#/components/schemas/AddDocumentTag'
          type: array
        metadata:
          description: List of document Metadata
          items:
            $ref: '#/components/schemas/AddDocumentMetadata'
          type: array
      type: object
    UpdateDocumentFulltextRequest:
      example:
        path: path
        metadata:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
        contentUrls:
        - contentUrls
        - contentUrls
        deepLinkPath: deepLinkPath
        contentType: contentType
        content: content
        tags:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
      properties:
        contentType:
          description: Document Content-Type
          type: string
        content:
          description: Document content
          type: string
        contentUrls:
          description: URL(s) which contain document content
          items:
            type: string
          type: array
        path:
          description: Path or Name of document
          type: string
        deepLinkPath:
          description: Path or Name of deep link
          type: string
        tags:
          description: List of document tags
          items:
            $ref: '#/components/schemas/AddDocumentTag'
          type: array
        metadata:
          description: List of document Metadata
          items:
            $ref: '#/components/schemas/AddDocumentMetadata'
          type: array
      type: object
    SetAntivirusRequest:
      type: object
    SetAntivirusResponse:
      example:
        message: message
      properties:
        message:
          description: Antivirus processing message
          type: string
      type: object
    AddDocumentActionsRequest:
      example:
        actions:
        - type: OCR
          parameters:
            characterMax: characterMax
            ocrEngine: TESSERACT
            ocrParseTypes: ocrParseTypes
            addPdfDetectedCharactersAsText: true
            notificationType: email
            notificationToCc: notificationToCc
            notificationToBcc: notificationToBcc
            url: url
            tags: tags
            notificationSubject: notificationSubject
            queueName: queueName
            engine: chatgpt
            notificationText: notificationText
            notificationHtml: notificationHtml
        - type: OCR
          parameters:
            characterMax: characterMax
            ocrEngine: TESSERACT
            ocrParseTypes: ocrParseTypes
            addPdfDetectedCharactersAsText: true
            notificationType: email
            notificationToCc: notificationToCc
            notificationToBcc: notificationToBcc
            url: url
            tags: tags
            notificationSubject: notificationSubject
            queueName: queueName
            engine: chatgpt
            notificationText: notificationText
            notificationHtml: notificationHtml
      properties:
        actions:
          description: List of Actions
          items:
            $ref: '#/components/schemas/AddAction'
          type: array
      type: object
    AddAction:
      example:
        type: OCR
        parameters:
          characterMax: characterMax
          ocrEngine: TESSERACT
          ocrParseTypes: ocrParseTypes
          addPdfDetectedCharactersAsText: true
          notificationType: email
          notificationToCc: notificationToCc
          notificationToBcc: notificationToBcc
          url: url
          tags: tags
          notificationSubject: notificationSubject
          queueName: queueName
          engine: chatgpt
          notificationText: notificationText
          notificationHtml: notificationHtml
      properties:
        type:
          description: Type of Document Action
          enum:
          - OCR
          - FULLTEXT
          - ANTIVIRUS
          - WEBHOOK
          - DOCUMENTTAGGING
          - NOTIFICATION
          - QUEUE
          type: string
        parameters:
          $ref: '#/components/schemas/AddActionParameters'
      required:
      - type
      type: object
    AddActionParameters:
      example:
        characterMax: characterMax
        ocrEngine: TESSERACT
        ocrParseTypes: ocrParseTypes
        addPdfDetectedCharactersAsText: true
        notificationType: email
        notificationToCc: notificationToCc
        notificationToBcc: notificationToBcc
        url: url
        tags: tags
        notificationSubject: notificationSubject
        queueName: queueName
        engine: chatgpt
        notificationText: notificationText
        notificationHtml: notificationHtml
      properties:
        ocrParseTypes:
          description: "OCR: Parse types - TEXT, FORMS, TABLES"
          type: string
        ocrEngine:
          description: "OCR: Engine to use for Optical character recognition"
          enum:
          - TESSERACT
          - TEXTRACT
          type: string
        addPdfDetectedCharactersAsText:
          description: "OCR: For the rewriting of the PDF document, converting any\
            \ image text to searchable text"
          type: boolean
        url:
          description: "Webhook: Callback URL"
          type: string
        characterMax:
          description: "Fulltext: Maximum number of characters (-1 unlimited, Typesense\
            \ defaults to 2048 characters)"
          type: string
        engine:
          description: "DocumentTagging: Engine to use for document tagging generation"
          enum:
          - chatgpt
          type: string
        notificationType:
          description: Notification Type
          enum:
          - email
          type: string
        notificationToCc:
          description: Who to carbon copy on the notification to (comma-delimited
            list)
          type: string
        notificationToBcc:
          description: Who to blind carbon copy on the notification to (comma-delimited
            list)
          type: string
        notificationSubject:
          description: Subject of the notification
          type: string
        notificationText:
          description: Text of the notification
          type: string
        notificationHtml:
          description: Html of the notification
          type: string
        tags:
          description: "DocumentTagging: Comma-deliminted list of keywords to generate\
            \ tags for"
          type: string
        queueName:
          description: Name of Queue action
          type: string
      type: object
    AddDocumentOcrRequest:
      example:
        parseTypes:
        - TEXT
        - FORMS
        - TABLES
      properties:
        parseTypes:
          description: "OCR Parse types - TEXT, FORMS, TABLES"
          items:
            type: string
          type: array
        addPdfDetectedCharactersAsText:
          description: "Rewrite PDF document, converting any Image text to searchable\
            \ text"
          type: boolean
        ocrEngine:
          description: "OCR: Engine to use for Optical character recognition"
          enum:
          - TESSERACT
          - TEXTRACT
          type: string
      type: object
    SetDocumentOcrRequest:
      example:
        contentType: contentType
        isBase64: true
        content: content
      properties:
        contentType:
          description: Document Content-Type
          type: string
        isBase64:
          description: Is the content Base64-encoded?
          type: boolean
        content:
          description: Document content
          type: string
      required:
      - content
      type: object
    GetVersionResponse:
      example:
        type: type
        version: version
        modules:
        - modules
        - modules
      properties:
        version:
          description: FormKiQ version
          type: string
        type:
          description: FormKiQ type
          type: string
        modules:
          description: List of installed modules
          items:
            type: string
          type: array
      type: object
    UpdateConfigurationRequest:
      example:
        maxContentLengthBytes: maxContentLengthBytes
        maxDocuments: maxDocuments
        chatGptApiKey: chatGptApiKey
        maxWebhooks: maxWebhooks
        notificationEmail: notificationEmail
      properties:
        chatGptApiKey:
          description: ChatGPT Api Key
          type: string
        maxContentLengthBytes:
          description: Set Maximum Document Content Length in Bytes
          type: string
        maxDocuments:
          description: Set Maximum number of Documents allowed
          type: string
        maxWebhooks:
          description: Set Maximum number of Webhooks allowed
          type: string
        notificationEmail:
          description: Email address to use for notifications
          type: string
      type: object
    UpdateConfigurationResponse:
      example:
        message: message
      properties:
        message:
          description: Result message
          type: string
      type: object
    AddApiKeyRequest:
      example:
        permissions:
        - READ
        - READ
        name: name
      properties:
        name:
          description: Name of API Key
          type: string
        permissions:
          description: List of permissions
          items:
            enum:
            - READ
            - WRITE
            - DELETE
            type: string
          type: array
      type: object
    AddApiKeyResponse:
      example:
        apiKey: apiKey
      properties:
        apiKey:
          description: API Key Identifier
          type: string
      type: object
    DeleteQueueResponse:
      example:
        message: message
      properties:
        message:
          description: Result message
          type: string
      type: object
    DeleteWorkflowResponse:
      example:
        message: message
      properties:
        message:
          description: Result message
          type: string
      type: object
    DeleteFulltextResponse:
      example:
        message: message
      properties:
        message:
          description: Result message
          type: string
      type: object
    DeleteApiKeyResponse:
      example:
        message: message
      properties:
        message:
          description: Result message
          type: string
      type: object
    GetOpaConfigurationResponse:
      example:
        policy: policy
      properties:
        policy:
          description: OPA Policy in YAML format
          type: string
      type: object
    SetOpaConfigurationRequest:
      example:
        siteId: siteId
        policy: policy
      properties:
        policy:
          description: OPA Policy in YAML format
          type: string
        siteId:
          description: "Site Id to apply policy to, leave empty for global policy"
          type: string
      type: object
    SetOpaConfigurationResponse:
      example:
        message: message
      properties:
        message:
          description: Result message
          type: string
      type: object
    DeleteOpaConfigurationResponse:
      example:
        message: message
      properties:
        message:
          description: Result message
          type: string
      type: object
    GetApiKeysResponse:
      example:
        apiKeys:
        - apiKey: apiKey
          insertedDate: insertedDate
          permissions:
          - READ
          - READ
          name: name
          siteId: siteId
          userId: userId
        - apiKey: apiKey
          insertedDate: insertedDate
          permissions:
          - READ
          - READ
          name: name
          siteId: siteId
          userId: userId
      properties:
        apiKeys:
          description: List of ApiKeys
          items:
            $ref: '#/components/schemas/ApiKey'
          type: array
      type: object
    ApiKey:
      example:
        apiKey: apiKey
        insertedDate: insertedDate
        permissions:
        - READ
        - READ
        name: name
        siteId: siteId
        userId: userId
      properties:
        name:
          description: Name of API Key
          type: string
        apiKey:
          description: API Key value
          type: string
        userId:
          type: string
        siteId:
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        permissions:
          description: List of permissions
          items:
            enum:
            - READ
            - WRITE
            - DELETE
            type: string
          type: array
      type: object
    GetConfigurationResponse:
      example:
        maxContentLengthBytes: maxContentLengthBytes
        maxDocuments: maxDocuments
        chatGptApiKey: chatGptApiKey
        maxWebhooks: maxWebhooks
        notificationEmail: notificationEmail
      properties:
        chatGptApiKey:
          description: ChatGPT API Key
          type: string
        maxContentLengthBytes:
          description: Set Maximum Document Content Length in Bytes
          type: string
        maxDocuments:
          description: Set Maximum number of Documents allowed
          type: string
        maxWebhooks:
          description: Set Maximum number of Webhooks allowed
          type: string
        notificationEmail:
          description: Email address to use for notifications (Must be verified identity
            created in AWS SES)
          type: string
      type: object
    GetUsersInGroupResponse:
      example:
        next: next
        users:
        - userStatus: userStatus
          insertedDate: insertedDate
          lastModifiedDate: lastModifiedDate
          username: username
        - userStatus: userStatus
          insertedDate: insertedDate
          lastModifiedDate: lastModifiedDate
          username: username
      properties:
        next:
          description: Next page of results token
          type: string
        users:
          description: List of users
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    User:
      example:
        userStatus: userStatus
        insertedDate: insertedDate
        lastModifiedDate: lastModifiedDate
        username: username
      properties:
        username:
          description: Username of user
          type: string
        userStatus:
          description: Status of user
          type: string
        insertedDate:
          description: Inserted timestamp of user
          type: string
        lastModifiedDate:
          description: Last nodified timestamp of user
          type: string
      type: object
    GetGroupsResponse:
      example:
        next: next
        groups:
        - insertedDate: insertedDate
          lastModifiedDate: lastModifiedDate
          name: name
          description: description
        - insertedDate: insertedDate
          lastModifiedDate: lastModifiedDate
          name: name
          description: description
      properties:
        next:
          description: Next page of results token
          type: string
        groups:
          description: List of groups
          items:
            $ref: '#/components/schemas/Group'
          type: array
      type: object
    Group:
      example:
        insertedDate: insertedDate
        lastModifiedDate: lastModifiedDate
        name: name
        description: description
      properties:
        name:
          description: Name of group
          type: string
        description:
          description: Description of group
          type: string
        insertedDate:
          description: Inserted timestamp of group
          type: string
        lastModifiedDate:
          description: Last nodified timestamp of group
          type: string
      type: object
    GetSitesResponse:
      example:
        sites:
        - uploadEmail: uploadEmail
          permissions:
          - ADMIN
          - ADMIN
          siteId: siteId
          permission: READ_WRITE
        - uploadEmail: uploadEmail
          permissions:
          - ADMIN
          - ADMIN
          siteId: siteId
          permission: READ_WRITE
        username: username
      properties:
        username:
          description: Username of request caller
          type: string
        sites:
          description: List of sites
          items:
            $ref: '#/components/schemas/Site'
          type: array
      type: object
    Site:
      example:
        uploadEmail: uploadEmail
        permissions:
        - ADMIN
        - ADMIN
        siteId: siteId
        permission: READ_WRITE
      properties:
        siteId:
          description: Site Identifier
          type: string
        permission:
          description: SiteId permission level
          enum:
          - READ_WRITE
          - READ_ONLY
          type: string
        permissions:
          description: List of caller permissions
          items:
            enum:
            - ADMIN
            - DELETE
            - READ
            - WRITE
            type: string
          type: array
        uploadEmail:
          description: SiteId document upload email address
          type: string
      type: object
    AddTagSchemaResponse:
      example:
        tagSchemaId: tagSchemaId
      properties:
        tagSchemaId:
          description: Tag Schema Identifier
          type: string
      type: object
    ErrorsResponse:
      properties:
        errors:
          description: List of errors
          items:
            $ref: '#/components/schemas/Error'
          type: array
      type: object
    Error:
      properties:
        key:
          description: Error Key
          type: string
        error:
          description: Error Message
          type: string
      type: object
    GetTagSchemasResponse:
      example:
        next: next
        previous: previous
        schemas:
        - tagSchemaId: tagSchemaId
          insertedDate: insertedDate
          name: name
          userId: userId
        - tagSchemaId: tagSchemaId
          insertedDate: insertedDate
          name: name
          userId: userId
      properties:
        schemas:
          description: List of Tag Schemas
          items:
            $ref: '#/components/schemas/TagSchemaSummary'
          type: array
        next:
          type: string
        previous:
          type: string
      type: object
    AddQueueRequest:
      example:
        name: name
      properties:
        name:
          description: Queue name
          type: string
      required:
      - name
      type: object
    SetWorkflowRequest:
      example:
        name: name
        description: description
        steps:
        - stepId: stepId
          action:
            type: OCR
            parameters:
              characterMax: characterMax
              ocrEngine: TESSERACT
              ocrParseTypes: ocrParseTypes
              addPdfDetectedCharactersAsText: true
              notificationType: email
              notificationToCc: notificationToCc
              notificationToBcc: notificationToBcc
              url: url
              tags: tags
              notificationSubject: notificationSubject
              queueName: queueName
              engine: chatgpt
              notificationText: notificationText
              notificationHtml: notificationHtml
          decisions:
          - nextStepId: nextStepId
            type: APPROVE
          - nextStepId: nextStepId
            type: APPROVE
          queue:
            queueId: queueId
            approvalGroups:
            - approvalGroups
            - approvalGroups
        - stepId: stepId
          action:
            type: OCR
            parameters:
              characterMax: characterMax
              ocrEngine: TESSERACT
              ocrParseTypes: ocrParseTypes
              addPdfDetectedCharactersAsText: true
              notificationType: email
              notificationToCc: notificationToCc
              notificationToBcc: notificationToBcc
              url: url
              tags: tags
              notificationSubject: notificationSubject
              queueName: queueName
              engine: chatgpt
              notificationText: notificationText
              notificationHtml: notificationHtml
          decisions:
          - nextStepId: nextStepId
            type: APPROVE
          - nextStepId: nextStepId
            type: APPROVE
          queue:
            queueId: queueId
            approvalGroups:
            - approvalGroups
            - approvalGroups
        status: ACTIVE
      properties:
        name:
          description: Workflow name
          type: string
        description:
          description: Workflow description
          type: string
        status:
          enum:
          - ACTIVE
          - INACTIVE
          type: string
        steps:
          description: Workflow Steps
          items:
            $ref: '#/components/schemas/AddWorkflowStep'
          type: array
      required:
      - name
      - status
      - steps
      type: object
    AddWorkflowRequest:
      example:
        name: name
        description: description
        steps:
        - stepId: stepId
          action:
            type: OCR
            parameters:
              characterMax: characterMax
              ocrEngine: TESSERACT
              ocrParseTypes: ocrParseTypes
              addPdfDetectedCharactersAsText: true
              notificationType: email
              notificationToCc: notificationToCc
              notificationToBcc: notificationToBcc
              url: url
              tags: tags
              notificationSubject: notificationSubject
              queueName: queueName
              engine: chatgpt
              notificationText: notificationText
              notificationHtml: notificationHtml
          decisions:
          - nextStepId: nextStepId
            type: APPROVE
          - nextStepId: nextStepId
            type: APPROVE
          queue:
            queueId: queueId
            approvalGroups:
            - approvalGroups
            - approvalGroups
        - stepId: stepId
          action:
            type: OCR
            parameters:
              characterMax: characterMax
              ocrEngine: TESSERACT
              ocrParseTypes: ocrParseTypes
              addPdfDetectedCharactersAsText: true
              notificationType: email
              notificationToCc: notificationToCc
              notificationToBcc: notificationToBcc
              url: url
              tags: tags
              notificationSubject: notificationSubject
              queueName: queueName
              engine: chatgpt
              notificationText: notificationText
              notificationHtml: notificationHtml
          decisions:
          - nextStepId: nextStepId
            type: APPROVE
          - nextStepId: nextStepId
            type: APPROVE
          queue:
            queueId: queueId
            approvalGroups:
            - approvalGroups
            - approvalGroups
        status: ACTIVE
      properties:
        name:
          description: Workflow name
          type: string
        description:
          description: Workflow description
          type: string
        status:
          enum:
          - ACTIVE
          - INACTIVE
          type: string
        steps:
          description: Workflow Steps
          items:
            $ref: '#/components/schemas/AddWorkflowStep'
          type: array
      required:
      - name
      - status
      - steps
      type: object
    AddWorkflowStep:
      example:
        stepId: stepId
        action:
          type: OCR
          parameters:
            characterMax: characterMax
            ocrEngine: TESSERACT
            ocrParseTypes: ocrParseTypes
            addPdfDetectedCharactersAsText: true
            notificationType: email
            notificationToCc: notificationToCc
            notificationToBcc: notificationToBcc
            url: url
            tags: tags
            notificationSubject: notificationSubject
            queueName: queueName
            engine: chatgpt
            notificationText: notificationText
            notificationHtml: notificationHtml
        decisions:
        - nextStepId: nextStepId
          type: APPROVE
        - nextStepId: nextStepId
          type: APPROVE
        queue:
          queueId: queueId
          approvalGroups:
          - approvalGroups
          - approvalGroups
      properties:
        stepId:
          description: Workflow Step Identifier
          type: string
        action:
          $ref: '#/components/schemas/AddAction'
        queue:
          $ref: '#/components/schemas/AddWorkflowStepQueue'
        decisions:
          description: Workflow Decisions
          items:
            $ref: '#/components/schemas/AddWorkflowStepDecision'
          type: array
      type: object
    AddWorkflowStepDecision:
      example:
        nextStepId: nextStepId
        type: APPROVE
      properties:
        type:
          description: Type of Workflow Step Decision
          enum:
          - APPROVE
          - REJECT
          type: string
        nextStepId:
          description: Workflow Step to move to
          type: string
      required:
      - nextStepId
      - type
      type: object
    WorkflowStepDecision:
      example:
        nextStepId: nextStepId
        type: APPROVE
      properties:
        type:
          description: Type of Workflow Step Decision
          enum:
          - APPROVE
          - REJECT
          type: string
        nextStepId:
          description: Workflow Step to move to
          type: string
      type: object
    AddWorkflowStepQueue:
      example:
        queueId: queueId
        approvalGroups:
        - approvalGroups
        - approvalGroups
      properties:
        queueId:
          description: Queue Identifier
          type: string
        approvalGroups:
          items:
            type: string
          type: array
      required:
      - queueId
      type: object
    AddQueueResponse:
      example:
        queueId: queueId
      properties:
        queueId:
          description: Queue Identifier
          type: string
      type: object
    SetWorkflowResponse:
      example:
        message: message
      properties:
        message:
          description: Result message
          type: string
      type: object
    AddWorkflowResponse:
      example:
        workflowId: workflowId
      properties:
        workflowId:
          description: Workflow Identifier
          type: string
      type: object
    AddDocumentWorkflowRequest:
      example:
        workflowId: workflowId
      properties:
        workflowId:
          description: Workflow Identifier
          type: string
      required:
      - workflowId
      type: object
    GetDocumentWorkflowsResponse:
      example:
        next: next
        workflows:
        - currentStepId: currentStepId
          name: name
          description: description
          workflowId: workflowId
          status: COMPLETE
        - currentStepId: currentStepId
          name: name
          description: description
          workflowId: workflowId
          status: COMPLETE
      properties:
        workflows:
          description: List of Document Workflows
          items:
            $ref: '#/components/schemas/DocumentWorkflow'
          type: array
        next:
          type: string
      type: object
    GetDocumentWorkflowResponse:
      example:
        workflow:
          currentStepId: currentStepId
          name: name
          description: description
          workflowId: workflowId
          status: COMPLETE
      properties:
        workflow:
          $ref: '#/components/schemas/DocumentWorkflow'
      type: object
    DocumentWorkflow:
      example:
        currentStepId: currentStepId
        name: name
        description: description
        workflowId: workflowId
        status: COMPLETE
      properties:
        workflowId:
          description: Workflow identifier
          type: string
        name:
          description: Workflow name
          type: string
        description:
          description: Workflow description
          type: string
        currentStepId:
          description: The current step workflow is on
          type: string
        status:
          description: Workflow status
          enum:
          - COMPLETE
          - IN_PROGRESS
          - FAILED
          type: string
      type: object
    AddDocumentWorkflowResponse:
      example:
        message: message
      properties:
        message:
          description: Result message
          type: string
      type: object
    AddDocumentWorkflowDecisionsRequest:
      example:
        comments: comments
        decision: APPROVE
        stepId: stepId
      properties:
        stepId:
          description: Workflow Step Identifier
          type: string
        comments:
          description: Workflow decision comments
          type: string
        decision:
          enum:
          - APPROVE
          - REJECT
          type: string
      required:
      - decision
      - queueId
      type: object
    AddDocumentWorkflowDecisionsResponse:
      example:
        message: message
      properties:
        message:
          description: Result message
          type: string
      type: object
    AddTagSchemaRequest:
      example:
        name: name
        tags:
          compositeKeys:
          - key:
            - key
            - key
          - key:
            - key
            - key
          allowAdditionalTags: true
          optional:
          - allowedValues:
            - allowedValues
            - allowedValues
            defaultValues:
            - defaultValues
            - defaultValues
            key: key
          - allowedValues:
            - allowedValues
            - allowedValues
            defaultValues:
            - defaultValues
            - defaultValues
            key: key
          required:
          - allowedValues:
            - allowedValues
            - allowedValues
            defaultValues:
            - defaultValues
            - defaultValues
            key: key
          - allowedValues:
            - allowedValues
            - allowedValues
            defaultValues:
            - defaultValues
            - defaultValues
            key: key
      properties:
        name:
          type: string
        tags:
          $ref: '#/components/schemas/AddTagSchemaTags'
      type: object
    AddTagSchemaTags:
      example:
        compositeKeys:
        - key:
          - key
          - key
        - key:
          - key
          - key
        allowAdditionalTags: true
        optional:
        - allowedValues:
          - allowedValues
          - allowedValues
          defaultValues:
          - defaultValues
          - defaultValues
          key: key
        - allowedValues:
          - allowedValues
          - allowedValues
          defaultValues:
          - defaultValues
          - defaultValues
          key: key
        required:
        - allowedValues:
          - allowedValues
          - allowedValues
          defaultValues:
          - defaultValues
          - defaultValues
          key: key
        - allowedValues:
          - allowedValues
          - allowedValues
          defaultValues:
          - defaultValues
          - defaultValues
          key: key
      properties:
        compositeKeys:
          description: List of Composite Keys
          items:
            $ref: '#/components/schemas/TagSchemaCompositeKey'
          type: array
        required:
          description: List of Required Tags
          items:
            $ref: '#/components/schemas/TagSchemaRequired'
          type: array
        optional:
          description: List of Optional Tags
          items:
            $ref: '#/components/schemas/TagSchemaOptional'
          type: array
        allowAdditionalTags:
          default: true
          type: boolean
      type: object
    TagSchemaSummary:
      example:
        tagSchemaId: tagSchemaId
        insertedDate: insertedDate
        name: name
        userId: userId
      properties:
        tagSchemaId:
          type: string
        name:
          type: string
        userId:
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
      type: object
    GetTagSchemaResponse:
      example:
        tagSchema:
          tagSchemaId: tagSchemaId
          insertedDate: insertedDate
          name: name
          userId: userId
          tags:
            compositeKeys:
            - key:
              - key
              - key
            - key:
              - key
              - key
            allowAdditionalTags: true
            optional:
            - allowedValues:
              - allowedValues
              - allowedValues
              defaultValues:
              - defaultValues
              - defaultValues
              key: key
            - allowedValues:
              - allowedValues
              - allowedValues
              defaultValues:
              - defaultValues
              - defaultValues
              key: key
            required:
            - allowedValues:
              - allowedValues
              - allowedValues
              defaultValues:
              - defaultValues
              - defaultValues
              key: key
            - allowedValues:
              - allowedValues
              - allowedValues
              defaultValues:
              - defaultValues
              - defaultValues
              key: key
      properties:
        tagSchema:
          $ref: '#/components/schemas/TagSchema'
      type: object
    TagSchema:
      example:
        tagSchemaId: tagSchemaId
        insertedDate: insertedDate
        name: name
        userId: userId
        tags:
          compositeKeys:
          - key:
            - key
            - key
          - key:
            - key
            - key
          allowAdditionalTags: true
          optional:
          - allowedValues:
            - allowedValues
            - allowedValues
            defaultValues:
            - defaultValues
            - defaultValues
            key: key
          - allowedValues:
            - allowedValues
            - allowedValues
            defaultValues:
            - defaultValues
            - defaultValues
            key: key
          required:
          - allowedValues:
            - allowedValues
            - allowedValues
            defaultValues:
            - defaultValues
            - defaultValues
            key: key
          - allowedValues:
            - allowedValues
            - allowedValues
            defaultValues:
            - defaultValues
            - defaultValues
            key: key
      properties:
        tagSchemaId:
          type: string
        name:
          type: string
        userId:
          type: string
        insertedDate:
          description: Inserted Timestamp
          type: string
        tags:
          $ref: '#/components/schemas/TagSchemaTags'
      type: object
    TagSchemaTags:
      example:
        compositeKeys:
        - key:
          - key
          - key
        - key:
          - key
          - key
        allowAdditionalTags: true
        optional:
        - allowedValues:
          - allowedValues
          - allowedValues
          defaultValues:
          - defaultValues
          - defaultValues
          key: key
        - allowedValues:
          - allowedValues
          - allowedValues
          defaultValues:
          - defaultValues
          - defaultValues
          key: key
        required:
        - allowedValues:
          - allowedValues
          - allowedValues
          defaultValues:
          - defaultValues
          - defaultValues
          key: key
        - allowedValues:
          - allowedValues
          - allowedValues
          defaultValues:
          - defaultValues
          - defaultValues
          key: key
      properties:
        compositeKeys:
          description: List of Composite Keys
          items:
            $ref: '#/components/schemas/TagSchemaCompositeKey'
          type: array
        required:
          description: List of Required Tags
          items:
            $ref: '#/components/schemas/TagSchemaRequired'
          type: array
        optional:
          description: List of Optional Tags
          items:
            $ref: '#/components/schemas/TagSchemaOptional'
          type: array
        allowAdditionalTags:
          default: true
          type: boolean
      type: object
    TagSchemaCompositeKey:
      example:
        key:
        - key
        - key
      properties:
        key:
          items:
            type: string
          type: array
      type: object
    TagSchemaRequired:
      example:
        allowedValues:
        - allowedValues
        - allowedValues
        defaultValues:
        - defaultValues
        - defaultValues
        key: key
      properties:
        key:
          type: string
        defaultValues:
          description: Default values
          items:
            type: string
          type: array
        allowedValues:
          description: Only valid values
          items:
            type: string
          type: array
      type: object
    TagSchemaOptional:
      example:
        allowedValues:
        - allowedValues
        - allowedValues
        defaultValues:
        - defaultValues
        - defaultValues
        key: key
      properties:
        key:
          type: string
        defaultValues:
          description: Default values
          items:
            type: string
          type: array
        allowedValues:
          description: Only valid values
          items:
            type: string
          type: array
      type: object
    OnlyOfficeDocumentNewRequest:
      description: ONLYOFFICE New Document Request
      example:
        extension: DOCX
      properties:
        extension:
          enum:
          - DOCX
          - XLSX
          - PPTX
          type: string
    OnlyOfficeDocumentEditRequest:
      description: ONLYOFFICE Edit Document Request
    OnlyOfficeDocumentResponse:
      example:
        config:
          onlyOfficeUrl: onlyOfficeUrl
          editorConfig:
            callbackUrl: callbackUrl
          documentType: documentType
          document:
            title: title
            url: url
            key: key
            fileType: fileType
          token: token
      properties:
        config:
          $ref: '#/components/schemas/OnlyOfficeConfig'
      type: object
    OnlyOfficeConfig:
      example:
        onlyOfficeUrl: onlyOfficeUrl
        editorConfig:
          callbackUrl: callbackUrl
        documentType: documentType
        document:
          title: title
          url: url
          key: key
          fileType: fileType
        token: token
      properties:
        onlyOfficeUrl:
          description: URL of the ONLYOFFICE application
          type: string
        token:
          description: ONLYOFFICE security token
          type: string
        documentType:
          description: Type of document (https://api.onlyoffice.com/editors/config/)
          type: string
        editorConfig:
          $ref: '#/components/schemas/OnlyOfficeEditorConfig'
        document:
          $ref: '#/components/schemas/OnlyOfficeConfigDocument'
      type: object
    OnlyOfficeEditorConfig:
      example:
        callbackUrl: callbackUrl
      properties:
        callbackUrl:
          type: string
      type: object
    OnlyOfficeConfigDocument:
      example:
        title: title
        url: url
        key: key
        fileType: fileType
      properties:
        url:
          description: Defines the absolute URL where the source viewed or edited
            document is stored
          type: string
        title:
          description: Defines the desired file name for the viewed or edited document
          type: string
        key:
          description: Defines the unique document identifier used by the service
            to recognize the document
          type: string
        fileType:
          description: Defines the type of the file for the source viewed or edited
            document
          type: string
      type: object
    OnlyOfficeDocumentSaveResponse:
      example:
        message: message
      properties:
        message:
          type: string
      type: object
    AddEsignatureDocusignRequest:
      example:
        signers:
        - name: name
          email: email
        - name: name
          email: email
        carbonCopies:
        - name: name
          email: email
        - name: name
          email: email
        recipientTabs:
        - positionY: positionY
          pageNumber: pageNumber
          type: signHere
          positionX: positionX
        - positionY: positionY
          pageNumber: pageNumber
          type: signHere
          positionX: positionX
        developmentMode: true
        emailSubject: emailSubject
        status: created
      properties:
        emailSubject:
          description: Email Subject
          type: string
        status:
          description: The status of the request
          enum:
          - created
          - sent
          type: string
        developmentMode:
          description: Whether to enable developer mode
          type: boolean
        signers:
          description: List of DocuSign Signers
          items:
            $ref: '#/components/schemas/EsignatureDocusignSigner'
          type: array
        carbonCopies:
          description: List of DocuSign Carbon Copies
          items:
            $ref: '#/components/schemas/EsignatureDocusignCarbonCopy'
          type: array
        recipientTabs:
          description: List of DocuSign Recipient Tabs
          items:
            $ref: '#/components/schemas/EsignatureDocusignRecipientTab'
          type: array
      type: object
    EsignatureDocusignSigner:
      example:
        name: name
        email: email
      properties:
        name:
          description: Name of Signer
          type: string
        email:
          description: Email of Signer
          type: string
      type: object
    EsignatureDocusignCarbonCopy:
      example:
        name: name
        email: email
      properties:
        name:
          description: Name of Signer
          type: string
        email:
          description: Email of Signer
          type: string
      type: object
    EsignatureDocusignRecipientTab:
      example:
        positionY: positionY
        pageNumber: pageNumber
        type: signHere
        positionX: positionX
      properties:
        type:
          description: Type of Recipient
          enum:
          - signHere
          type: string
        pageNumber:
          description: Document Page Number
          type: string
        positionX:
          description: Element X Position
          type: string
        positionY:
          description: Element Y Position
          type: string
      type: object
    AddEsignatureDocusignResponse:
      example:
        message: message
        redirect_url: redirect_url
      properties:
        redirect_url:
          description: Redirect Url to complete DocuSign workflow
          type: string
        message:
          description: Result message
          type: string
      type: object
    GetEsignatureDocusignConfigResponse:
      example:
        configured: true
        clientId: clientId
        userId: userId
      properties:
        configured:
          description: Whether DocuSign is configured
          type: boolean
        userId:
          description: DocuSign UserId configured
          type: string
        clientId:
          description: DocuSign Client configured
          type: string
      type: object
    SetEsignatureDocusignConfigRequest:
      example:
        privateKey: privateKey
        clientId: clientId
        userId: userId
      properties:
        privateKey:
          description: DocuSign App RSA PRIVATE KEY
          type: string
        userId:
          description: DocuSign App UserId
          type: string
        clientId:
          description: DocuSign App Client
          type: string
      required:
      - clientId
      - privateKey
      - userId
      type: object
    SetEsignatureDocusignConfigResponse:
      example:
        message: message
      properties:
        message:
          description: Message response
          type: string
      type: object
    UpdateMatchingDocumentTagsRequest_match:
      example:
        tag:
          beginsWith: beginsWith
          eq: eq
          key: key
      properties:
        tag:
          $ref: '#/components/schemas/MatchDocumentTag'
      type: object
    UpdateMatchingDocumentTagsRequest_update:
      description: Data to update
      example:
        tags:
        - values:
          - values
          - values
          value: value
          key: key
        - values:
          - values
          - values
          value: value
          key: key
      properties:
        tags:
          description: List of document tags
          items:
            $ref: '#/components/schemas/AddDocumentTag'
          type: array
      type: object
  securitySchemes:
    ApiAuthorization:
      flows: {}
      type: oauth2
      x-amazon-apigateway-authorizer:
        type: jwt
        jwtConfiguration:
          issuer:
            Fn::Sub: "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"
          audience:
          - Fn::Sub: "${CognitoUserPoolClient}"
        identitySource: $request.header.Authorization
  x-amazon-apigateway-integrations:
    lambdaApi200:
      uri:
        Fn::Sub: "arn:${Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Methods: '''*'''
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Origin: '''*'''
      passthroughBehavior: when_no_templates
      httpMethod: POST
      type: aws_proxy
      payloadFormatVersion: "1.0"
    ocrLambdaApi200:
      uri:
        Fn::Sub: "arn:${Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Methods: '''*'''
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Origin: '''*'''
      passthroughBehavior: when_no_templates
      httpMethod: POST
      type: aws_proxy
      payloadFormatVersion: "1.0"
    antivirusLambdaApi200:
      uri:
        Fn::Sub: "arn:${Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Methods: '''*'''
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Origin: '''*'''
      passthroughBehavior: when_no_templates
      httpMethod: POST
      type: aws_proxy
      payloadFormatVersion: "1.0"
    searchLambdaApi200:
      uri:
        Fn::Sub: "arn:${Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Methods: '''*'''
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Origin: '''*'''
      passthroughBehavior: when_no_templates
      httpMethod: POST
      type: aws_proxy
      payloadFormatVersion: "1.0"
    fulltextLambdaApi200:
      uri:
        Fn::Sub: "arn:${Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Methods: '''*'''
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Origin: '''*'''
      passthroughBehavior: when_no_templates
      httpMethod: POST
      type: aws_proxy
      payloadFormatVersion: "1.0"
    onlyOfficeLambdaApi200:
      uri:
        Fn::Sub: "arn:${Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Methods: '''*'''
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Origin: '''*'''
      passthroughBehavior: when_no_templates
      httpMethod: POST
      type: aws_proxy
      payloadFormatVersion: "1.0"
    esignatureLambdaApi200:
      uri:
        Fn::Sub: "arn:${Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Methods: '''*'''
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Origin: '''*'''
      passthroughBehavior: when_no_templates
      httpMethod: POST
      type: aws_proxy
      payloadFormatVersion: "1.0"
    caseManagementLambdaApi200:
      uri:
        Fn::Sub: "arn:${Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
      responses:
        default:
          statusCode: "200"
          responseParameters:
            method.response.header.Access-Control-Allow-Methods: '''*'''
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Origin: '''*'''
      passthroughBehavior: when_no_templates
      httpMethod: POST
      type: aws_proxy
      payloadFormatVersion: "1.0"
    lambdaApi201:
      uri:
        Fn::Sub: "arn:${Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DocumentsApiRequests.Arn}/invocations"
      responses:
        default:
          statusCode: "201"
          responseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
            method.response.header.Access-Control-Allow-Methods: '''*'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
      passthroughBehavior: WHEN_NO_TEMPLATES
      httpMethod: POST
      type: aws_proxy
      payloadFormatVersion: "1.0"
x-amazon-apigateway-gateway-responses:
  UNAUTHORIZED:
    statusCode: 401
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: '''*'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
      gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
x-amazon-apigateway-cors: null

